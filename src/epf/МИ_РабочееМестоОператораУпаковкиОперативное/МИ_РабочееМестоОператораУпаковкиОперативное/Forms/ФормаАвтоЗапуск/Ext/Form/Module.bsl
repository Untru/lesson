
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользуетсяУчетПартийТовара			= ПолучитьФункциональнуюОпцию("усИспользуетсяУчетПартийТоваров");
	ИспользуетсяУчетСерийныхНомеровТовара	= ПолучитьФункциональнуюОпцию("усИспользуетсяУчетСерийныхНомеровТовара"); //-- МИ-1 / 2020-08-18
	
	РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	ЗагрузитьНастройкиРабочегоМеста(РабочееМесто);
	
	сткПолей = Новый Структура;
	сткПолей.Вставить("Ячейка",				"Ячейка");
	сткПолей.Вставить("РабочийПоток",		"РабочийПотокУпаковки");
	сткПолей.Вставить("ПринтерДокументов",	"ПринтерДокументов.ИмяПринтераВСистеме");
	сткПолей.Вставить("Принтер",			"Принтер.ИмяПринтераВСистеме");
	
	//++ВИА 20.06.2023 конфигурации обновляются не одновременно.
	//!!ПОСЛЕ  ОЧЕРЕДНОГО ОБНОВЛЕНИЯ- УБРАТЬ ПРОВЕРКУ!!
	РеквизитыРабочегоместа = РабочееМесто.Метаданные().Реквизиты;
	Если РеквизитыРабочегоместа.Найти("МИ_ВертикальныйПринтер")<> Неопределено Тогда
		//++ЧегодаевПС 14.06.2023 79650
		сткПолей.Вставить("МИ_ВертикальныйПринтер",		"МИ_ВертикальныйПринтер");
		сткПолей.Вставить("МИ_ГоризонтальныйПринтер",	"МИ_ГоризонтальныйПринтер");
		//--ЧегодаевПС 14.06.2023 79650
	КонецЕсли;
	//--ВИА 20.06.2023 задача:
	сткДанныеРМ  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РабочееМесто, сткПолей);
	
	Ячейка 					= сткДанныеРМ.Ячейка;
	РабочийПоток 			= сткДанныеРМ.РабочийПоток;
	ИмяПринтераДокументов	= сткДанныеРМ.ПринтерДокументов;
	ИмяПринтераЭтикеток 	= сткДанныеРМ.Принтер;
	
	//++ВИА 20.06.2023 конфигурации обновляются не одновременно.
	//!!ПОСЛЕ  ОЧЕРЕДНОГО ОБНОВЛЕНИЯ- УБРАТЬ ПРОВЕРКУ!!
	//++ЧегодаевПС 14.06.2023 79650
	Если РеквизитыРабочегоместа.Найти("МИ_ВертикальныйПринтер") <> Неопределено Тогда
		МИ_ВертикальныйПринтер	 = сткДанныеРМ.МИ_ВертикальныйПринтер;
		МИ_ГоризонтальныйПринтер = сткДанныеРМ.МИ_ГоризонтальныйПринтер;
	КонецЕсли;
	//--ЧегодаевПС 14.06.2023 79650
	//--ВИА 20.06.2023 задача:
	
	Если НЕ ЗначениеЗаполнено(Ячейка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не задана ячейка рабочего места.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РабочийПоток) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не задан рабочий поток упаковки рабочего места.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если миПеремещатьКонтейнерыПоРабочемуПотоку И НЕ ЗначениеЗаполнено(миРабочийПотокПеремещенияКонтейнеров) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не задан рабочий поток перемещения контейнеров.'"));
		Отказ = Истина;
	КонецЕсли;
		
	Если миПеремещатьКонтейнерыПоАлгоритмуПоиска И НЕ ЗначениеЗаполнено(миАлгоритмПоискаКонтейнераНаОстатке) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не задан алгоритм поиска контейнера.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КнопкаПечатьУпаковочногоЛиста.Доступность 	= ПечатьУпаковочногоЛиста;
	Элементы.КнопкаПечатьЭтикеткиКонтейнера.Доступность = ПечатьЭтикеткиКонтейнера;
	Элементы.КнопкаПечатьЭтикеткиТоваров.Доступность 	= ПечатьЭтикеткиТоваров;
	
	//!ШРВ 06.09.2017 16:34:30 Начало
	Элементы.тбпПланПоЗаказуКоличество.Видимость = НЕ КонтрольВСлепую;
	//!ШРВ 06.09.2017 16:34:30 Конец
	//++ Юдинцев ВС 24.01.23 60503
	Элементы.УпаковатьСписокПоПлану.Видимость = НЕ миЗапретитьДоверительнуюУпаковку;
	//-- Юдинцев ВС 24.01.23 60503

	Если ОтображатьСоставКонтейнера Тогда
		Элементы.ГруппаПланИлиСостав.Заголовок = "Состав контейнера";
		Элементы.ГруппаПланИлиСоставСтраницы.ТекущаяСтраница = Элементы.ГруппаСоставКонтейнера;
	Иначе
		Элементы.ГруппаПланИлиСоставСтраницы.ТекущаяСтраница = Элементы.ГруппаПланПоЗаказу;
	КонецЕсли;
	
	Элементы.ДействиеОткрытьЗаказНаОтгрузку.ТекстНевыбраннойКартинки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 заказ на отгрузку'"), ?(ВыбиратьЗаказНаОтгрузкуИзСписка, НСтр("ru = 'Выберите'"), НСтр("ru = 'Отсканируйте'")));
	
	КартинкаНачальногоКонтейнера	= БиблиотекаКартинок.усКоробкаВзять;
	КартинкаКонечногоКонтейнера 	= БиблиотекаКартинок.усКоробкаПоложить;
	ЦветНеактивнойКнопки  			= ЦветаСтиля.ЦветФонаКнопки;
	ЦветАктивнойКнопки    			= ЦветаСтиля.ФонУправляющегоПоля;
	ЦветЗаблокированнойКнопки 		= Новый Цвет(192, 192, 192);
	ЦветИндикатораВерх        		= Новый Цвет(200, 130, 130);
	ЦветИндикатораНиз         		= Новый Цвет(130, 200, 130);
	
	тбпСоставКонечногоКонтейнера.Параметры.УстановитьЗначениеПараметра("Контейнер", Справочники.усКонтейнеры.ПустаяСсылка());	
	
	// добавить реквизиты
	мРеквизиты = Новый Массив;
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		мРеквизиты.Добавить(Новый РеквизитФормы("НачальныйКонтейнер" + Индекс, Новый ОписаниеТипов("СправочникСсылка.усКонтейнеры")));
		мРеквизиты.Добавить(Новый РеквизитФормы("ЗаполненностьНачальныйКонтейнер" + Индекс, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0))));
		
		ДобавитьСоответствиеКонтейнеровНаСервере("НачальныйКонтейнер" + Индекс, , "НачальныйКонтейнер");
		
		мРеквизиты.Добавить(Новый РеквизитФормы("КонечныйКонтейнер" + Индекс, Новый ОписаниеТипов("СправочникСсылка.усКонтейнеры")));
		мРеквизиты.Добавить(Новый РеквизитФормы("ЗаполненностьКонечныйКонтейнер" + Индекс, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(3, 0))));
		
		ДобавитьСоответствиеКонтейнеровНаСервере("КонечныйКонтейнер" + Индекс, , "КонечныйКонтейнер");
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(мРеквизиты);
	
	ВысотаКнопки   = 3;
	ШтрифтКнопки   = Новый Шрифт(, 12, Истина);
	ШиринаЭлемента = 30;
	
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		// начальные контейнеры
		// группа
		ЭлементГруппа = Элементы.Добавить("ГруппаНачальныйКонтейнер" + Индекс, Тип("ГруппаФормы"), Элементы.ГруппаНачальныеКонтейнерыКнопки);
		ЭлементГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппа.ОтображатьЗаголовок = Ложь;
		ЭлементГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		//ЭлементГруппа.ЦветФона = ЦветЗаблокированнойКнопки;
		
		// кнопка декорация
		Элемент = Элементы.Добавить("НачальныйКонтейнер" + Индекс, Тип("ДекорацияФормы"), ЭлементГруппа);
		Элемент.Вид = ВидДекорацииФормы.Картинка;
		Элемент.Высота = ВысотаКнопки;
		Элемент.Шрифт = ШтрифтКнопки;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.Доступность = Ложь;
		Элемент.Гиперссылка = Истина;
		Элемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 3);
		Элемент.УстановитьДействие("Нажатие", "ВвестиНачальныйКонтейнер");
		
		// индикатор
		Элемент = Элементы.Добавить("ЗаполненностьНачальныйКонтейнер" + Индекс, Тип("ПолеФормы"), ЭлементГруппа);
		Элемент.ПутьКДанным = "ЗаполненностьНачальныйКонтейнер" + Индекс;
		Элемент.Вид = ВидПоляФормы.ПолеИндикатора;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ОтображатьПроценты = Истина;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ЦветРамки = ЦветИндикатораВерх;
		Элемент.Подсказка = "Заполненность контейнера";
		
		// конечные контейнеры
		// группа
		ЭлементГруппа = Элементы.Добавить("ГруппаКонечныйКонтейнер" + Индекс, Тип("ГруппаФормы"), Элементы.ГруппаКонечныеКонтейнерыКнопки);
		ЭлементГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппа.ОтображатьЗаголовок = Ложь; 
		ЭлементГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		// кнопка декорация
		Элемент = Элементы.Добавить("КонечныйКонтейнер" + Индекс, Тип("ДекорацияФормы"), ЭлементГруппа);
		Элемент.Вид = ВидДекорацииФормы.Картинка;
		Элемент.Высота = ВысотаКнопки;
		Элемент.Шрифт = ШтрифтКнопки;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.Доступность = Ложь;
		Элемент.Гиперссылка = Истина;
		Элемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 3);
		Элемент.УстановитьДействие("Нажатие", "ВвестиКонечныйКонтейнер");
		
		// индикатор
		Элемент = Элементы.Добавить("ЗаполненностьКонечныйКонтейнер" + Индекс, Тип("ПолеФормы"), ЭлементГруппа);
		Элемент.ПутьКДанным = "ЗаполненностьКонечныйКонтейнер" + Индекс;
		Элемент.Вид = ВидПоляФормы.ПолеИндикатора;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Низ;
		Элемент.Заголовок = " ";
		Элемент.ОтображатьПроценты = Истина;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ЦветРамки = ЦветИндикатораНиз;
		Элемент.Подсказка = НСтр("ru = 'Заполненность контейнера'");
	КонецЦикла;
	
	Элементы.ГруппаОткрытьСерийныеНомера.Видимость = ИспользуетсяУчетСерийныхНомеровТовара; //-- МИ-1 / 2020-08-18

	ТекущийЭлементСканирования = "Исполнитель";
	УстановитьТекстПодсказки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Если Не ЗначениеЗаполнено(Исполнитель) Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для текущего пользователя не задан складской сотрудник.'"));
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Корзина, "ДокументПривязки")) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Контейнер-корзина зарезервирован.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	// ПодключаемоеОборудование
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ОписаниеОшибки = "" ;
		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить( "СканерШтрихкода" );
		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:%1""%2"".'" );
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Символы.ПС, ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	//Если Не Отказ Тогда
	//	ТекущаяСмена = ТекущаяСменаСотрудникаСервер();
	//	РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//	Если ТекущаяСмена <> Неопределено Тогда
	//		усУправлениеСкладомСервер.ЗаписатьСостояниеСотрудника(ОбщегоНазначенияКлиент.ДатаСеанса(), Исполнитель, РабочийПоток, ПредопределенноеЗначение("Перечисление.усСостоянияСотрудников.Работает"), ТекущаяСмена, , , РабочееМесто);
	//	Иначе
	//		ПараметрыФормы = Новый Структура;
	//		ПараметрыФормы.Вставить("ЕстьВладелец", Истина);
	//		ПараметрыФормы.Вставить("Исполнитель", Исполнитель);
	//		ПараметрыФормы.Вставить("РабочийПоток", РабочийПоток);
	//		ПараметрыФормы.Вставить("РабочееМесто", РабочееМесто);
	//		ОткрытьФорму("Обработка.усУстановкаСмены.Форма", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//	КонецЕсли;
	//КонецЕсли;
		
	НеЗапрашиватьКоличество = усТСДОсновной.ПолучитьЗначениеНастройкиВыполненияОперации(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийПоток, "ПравилаВыполнения"),
		ПредопределенноеЗначение("ПланВидовХарактеристик.усНастройкиСкладскихОпераций.ТоварВзятьПоштучноеСканирование"));
		
	ВводитьМастерКонтейнер = усТСДОсновной.ПолучитьЗначениеНастройкиВыполненияОперации(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийПоток, "ПравилаВыполнения"),
		ПредопределенноеЗначение("ПланВидовХарактеристик.усНастройкиСкладскихОпераций.ПоложитьВводитьМастерКонтейнер"));
		
	ТипМастерКонтейнераПоУмолчанию = усТСДОсновной.ПолучитьЗначениеНастройкиВыполненияОперации(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийПоток, "ПравилаВыполнения"),
		ПредопределенноеЗначение("ПланВидовХарактеристик.усНастройкиСкладскихОпераций.ТипМастерКонтейнераПоУмолчанию"));
		
	Элементы.ГруппаСоставПечать.ТекущаяСтраница = Элементы.ГруппаСоставКонечногоКонтейнера;
	Элементы.ДействиеПоложитьВМастерКонтейнер.Доступность = ВводитьМастерКонтейнер;
	Элементы.ДействиеЗавершитьМастерКонтейнер.Доступность = ВводитьМастерКонтейнер;
	
	//++ БПС 30.05.2023 №70597
	Элементы.АктивностьСтолаУпаковки.Пометка		= Не НеАктивироватьРабочееМестоПриОткрытии;
	Элементы.НеОтображатьУпакованныйТовар.Пометка	= Истина;
	
	сткОбновление = Новый Структура("АктивностьСтолаУпаковки, РежимСканирования, РежимУпаковкиМК");
	ОбновитьСостояниеРежимовРаботы(сткОбновление);
	//-- БПС 30.05.2023 №70597
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			ТекстОшибки = НСтр("ru = 'ОШИБКА. Остались незакрытые конечные контейнеры.'");
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	//Для Индекс = 1 По КоличествоКонтейнеров Цикл
	//	Если ЗначениеЗаполнено(ЭтаФорма["НачальныйКонтейнер" + Индекс]) Тогда
	//		ТекстОшибки = НСтр("ru = 'ОШИБКА. Остались незакрытые начальные контейнеры.'");
	//		Отказ = Истина;
	//		Возврат;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить( "СканерШтрихкода" );
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец ПодключаемоеОборудование
	
	//++ВИА 27.03.2023 
	МИ_ВыполнитьЗавершениеРаботыНаСервере();
	//Если ЗначениеЗаполнено(Исполнитель) И ЗначениеЗаполнено(РабочийПоток) Тогда
	//	РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	//	усУправлениеСкладомСервер.ЗаписатьСостояниеСотрудника(ОбщегоНазначенияКлиент.ДатаСеанса(), Исполнитель, РабочийПоток, ПредопределенноеЗначение("Перечисление.усСостоянияСотрудников.НеРаботает"), , , , РабочееМесто);
	//КонецЕсли;
	//
	//ИзменитьАктивностьСтолаУпаковкиНаСервере();
	//ВернутьЗадачиКВыполнению();
	//--ВИА 27.03.2023 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[ 1 ] = Неопределено Тогда
				ТекКод = Параметр[ 0 ];
			Иначе
				ТекКод = Параметр[ 1 ][ 1 ];
			КонецЕсли;
			ОбработатьШтрихКод(ТекКод);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	//Если ИмяСобытия = "ЗакрытаФормаНоменклатуры" И Источник = ЭтаФорма Тогда 
	//	ОбновитьДанныеЗаказКонтейнер()
	//КонецЕсли;
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ШтрихкодТестированиеПриИзменении(Элемент)
	
	ОбработатьШтрихКод(ШтрихкодТестирование);
	ШтрихкодТестирование = "";
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьЗаказНаОтгрузку(Команда)
	
	Если ТекущийЭлементСканирования = "Количество" Тогда
		Отбор          = Новый Структура("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии, КлючВарианта", Отбор, Истина, "Основной");
		ОткрытьФорму("Отчет.усКонтрольОтгрузки.Форма", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
				ТекстОшибки = НСтр("ru = 'ОШИБКА. Остались незакрытые конечные контейнеры.'");
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		//Для Индекс = 1 По КоличествоКонтейнеров Цикл
		//	Если ЗначениеЗаполнено(ЭтаФорма["НачальныйКонтейнер" + Индекс]) Тогда
		//		ТекстОшибки = НСтр("ru = 'ОШИБКА. Остались незакрытые начальные контейнеры.'");
		//		Отказ = Истина;
		//		Возврат;
		//	КонецЕсли;
		//КонецЦикла;
		
		сзСтатусы = Новый СписокЗначений;
		сзСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.усСтатусыЗаказовНаОтгрузку.СпланированЧастично"));
		сзСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.усСтатусыЗаказовНаОтгрузку.ВОтборе"));
		сзСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.усСтатусыЗаказовНаОтгрузку.Отобран"));
		сзСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.усСтатусыЗаказовНаОтгрузку.Упакован"));
		сзСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.усСтатусыЗаказовНаОтгрузку.Проконтролирован"));
		сзСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.усСтатусыЗаказовНаОтгрузку.ГотовКОтгрузке"));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Статус", сзСтатусы));
		
		Если ВыбиратьЗаказНаОтгрузкуИзСписка Тогда
			ОткрытьФорму("Документ.усЗаказНаОтгрузку.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьЗаказНаОтгрузкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе
			ТекущийЭлементСканирования = "ЗаказНаОтгрузку";
			УстановитьТекстПодсказки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказНаОтгрузкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Результат) Тогда
        ЗаказНаОтгрузку = Результат;
        ПриИзмененииЗаказаНаОтгрузку();
		//--> МИ-1 / 2019-05-22
		ПриИзмененииЗаказаНаОтгрузкуНаКлиенте();
		//<-- МИ-1 / 2019-05-22
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаЗаказа(Команда)
	
	Если ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
		Отбор          = Новый Структура("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
		ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии, КлючВарианта", Отбор, Истина, "Основной");
		ОткрытьФорму("Отчет.усКонтрольОтгрузки.Форма", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНачальныйКонтейнер(Команда)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[Команда.Имя]) Тогда
		текИмяКнопки = Команда.Имя;
		Если ВыбиратьКонтейнерИзСписка Тогда
			ПараметрыФормы = Новый Структура;
			
			спИсключаемыеЭлементы = Новый СписокЗначений;
			Для Индекс = 1 По КоличествоКонтейнеров Цикл
				Если Команда.Имя = "НачальныйКонтейнер" + Индекс тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(ЭтаФорма["НачальныйКонтейнер" + Индекс]) Тогда
					спИсключаемыеЭлементы.Добавить(ЭтаФорма["НачальныйКонтейнер" + Индекс]);
				КонецЕсли;
			КонецЦикла;
			
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументПривязки, ИсключаемыеЭлементы", ЗаказНаОтгрузку, спИсключаемыеЭлементы));	
			ОткрытьФорму("Справочник.усКонтейнеры.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ВвестиНачальныйКонтейнерЗавершение", ЭтотОбъект, Новый Структура("Команда", Команда)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
            Возврат;
		Иначе	
			УстановитьИнформациюПоПоложениюКонтейнеров();
		КонецЕсли;
	КонецЕсли;
	
	ВвестиНачальныйКонтейнерФрагмент(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиНачальныйКонтейнерЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ПланПоКонтейнеру = Ложь;
        Возврат;
	КонецЕсли; 
	
	Если ПланПоКонтейнеру тогда
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат, "ДокументПривязки") <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтаФорма["КонечныйКонтейнер" + Индекс], "ДокументПривязки") тогда
					ТекстОшибки = НСтр("ru = 'ОШИБКА. Различаются заказы в выбранном и конечных контейнерах.'");
					Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
					Возврат;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПланПоКонтейнеру тогда
		ВернутьЗадачиКВыполнению();
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	//ЗаказНаОтгрузку = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат, "ДокументПривязки");
	ОбработатьЭлементСканирования(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат, "Штрихкод"), "НачальныйКонтейнер");
	
	//ЭтаФорма[Команда.Имя] = Результат;
	//ДобавитьСоответствиеКонтейнеров(Команда.Имя, Результат, "НачальныйКонтейнер"); 
	//ВвестиНачальныйКонтейнерФрагмент(Команда);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиНачальныйКонтейнерФрагмент(Знач Команда)
      
    ТекущийНачальныйКонтейнер = ПолучитьКонтейнер(Команда.Имя, "НачальныйКонтейнер");
    
    Если ЗначениеЗаполнено(ЭтаФорма[Команда.Имя]) тогда
        ТекущийЭлементСканирования = "";	
    Иначе
        ТекущийЭлементСканирования = "НачальныйКонтейнер";
    КонецЕсли;
    
    ПриИзмененииНачальногоКонтейнера();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьНачальныйКонтейнер(Команда)
	
	Если ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
		ПараметрыОткрытияФормы = Новый Структура;
		спКнопок = Новый СписокЗначений;
		спКнопок.Добавить("Да", "Да");
		спКнопок.Добавить("Нет", "Нет");
		ПараметрыОткрытияФормы.Вставить("СписокКнопок", спКнопок);
		ПараметрыОткрытияФормы.Вставить("ТекстВопроса", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контейнер %1 пуст?'"), ТекущийНачальныйКонтейнер));

		ОткрытьФорму("ОбщаяФорма.усФормаВопрос", ПараметрыОткрытияФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗавершитьНачальныйКонтейнерЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьНачальныйКонтейнерЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = "Да" Тогда
        КонтрольСоставаКонтейнера(ТекущийНачальныйКонтейнер)
    КонецЕсли;
	ОбновитьКонтрольЗаказаНаОтгрузку();
		
	Если НЕ Допланирование И КонтрольЗаказа = 100 Тогда
		ЗаказНаОтгрузку = ПредопределенноеЗначение("Документ.усЗаказНаОтгрузку.ПустаяСсылка");
		ПриИзмененииЗаказаНаОтгрузку(ТекущийНачальныйКонтейнер);
		//--> МИ-1 / 2019-05-22
		ПриИзмененииЗаказаНаОтгрузкуНаКлиенте();
		//<-- МИ-1 / 2019-05-22
		ТекущийЭлементСканирования = "ЗаказНаОтгрузку";
		ИмяКнопки = ПолучитьИмяКнопки(ТекущийНачальныйКонтейнер, "НачальныйКонтейнер"); 
        ЭтаФорма["Заполненность" + ИмяКнопки] = 0;
        ТекущийНачальныйКонтейнер = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
        ЭтаФорма[ИмяКнопки] = ТекущийНачальныйКонтейнер;
       	ДобавитьСоответствиеКонтейнеров(ИмяКнопки, ТекущийНачальныйКонтейнер, "НачальныйКонтейнер");
        ПриИзмененииНачальногоКонтейнера(ИмяКнопки);
	КонецЕсли;
	
    Если ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
        ИмяКнопки = ПолучитьИмяКнопки(ТекущийНачальныйКонтейнер, "НачальныйКонтейнер"); 
        ЭтаФорма["Заполненность" + ИмяКнопки] = 0;
        ТекущийНачальныйКонтейнер = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
        ЭтаФорма[ИмяКнопки] = ТекущийНачальныйКонтейнер;
        ТекущийЭлементСканирования = "";
        
        ДобавитьСоответствиеКонтейнеров(ИмяКнопки, ТекущийНачальныйКонтейнер, "НачальныйКонтейнер");        
        ПриИзмененииНачальногоКонтейнера(ИмяКнопки);
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция СоздатьНовыйКонтейнерНаСервере()
	
	НомерЗаказаНаОтгрузку = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаОтгрузку, "НомерКИС");
	НовыйКонтейнер = усСервисныеФункции.СоздатьКонтейнер(ТипКонтейнераПоУмолчанию, НомерЗаказаНаОтгрузку, 1, ЗаказНаОтгрузку); 
	
	Возврат НовыйКонтейнер;
	
КонецФункции

&НаКлиенте
Процедура ВвестиКонечныйКонтейнер(Команда)
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[Команда.Имя]) Тогда
		текИмяКнопки = Команда.Имя;
		Если АвтоматическиСоздаватьНовыйКонтейнер тогда
			Если ВыбиратьТипКонтейнера тогда
				сткПараметров = Новый Структура("Отбор", Новый Структура("ИспользоватьПриКонтроле", Истина));
				ОткрытьФорму("Справочник.усТипыКонтейнеров.ФормаВыбора",сткПараметров,,,,, Новый ОписаниеОповещения("ОткрытьСписокТиповКонтейнеров", ЭтотОбъект, Новый Структура("Команда", Команда)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);	
			Иначе
				
				НовыйКонтейнер = СоздатьНовыйКонтейнерНаСервере();
				Если ЗначениеЗаполнено(НовыйКонтейнер) тогда
					ЭтаФорма[Команда.Имя] = НовыйКонтейнер;
					ДобавитьСоответствиеКонтейнеров(Команда.Имя, НовыйКонтейнер, "КонечныйКонтейнер");
					
					ТекущийЭлементСканирования = ?(ЗначениеЗаполнено(ЭтаФорма[Команда.Имя]), "", "КонечныйКонтейнер");
					ТекущийКонечныйКонтейнер = ПолучитьКонтейнер(Команда.Имя, "КонечныйКонтейнер");	
					ПриИзмененииКонечногоКонтейнера();
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВыбиратьКонтейнерИзСписка Тогда
			мДокументы = Новый Массив;
			мДокументы.Добавить(ЗаказНаОтгрузку);
			мДокументы.Добавить(Неопределено);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументПривязки, Ячейка", мДокументы,	Ячейка));
			
			ОткрытьФорму("Справочник.усКонтейнеры.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ВвестиКонечныйКонтейнерЗавершение", ЭтотОбъект, Новый Структура("Команда", Команда)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
            Возврат;
		КонецЕсли;
	ИначеЕсли ТекущийКонечныйКонтейнер = ПолучитьКонтейнер(Команда.Имя, "КонечныйКонтейнер") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементСканирования = ?(ЗначениеЗаполнено(ЭтаФорма[Команда.Имя]), "", "КонечныйКонтейнер"); 
    ТекущийКонечныйКонтейнер = ПолучитьКонтейнер(Команда.Имя, "КонечныйКонтейнер");	
    ПриИзмененииКонечногоКонтейнера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокТиповКонтейнеров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
        Возврат;
	КонецЕсли;
	
	ТипКонтейнераПоУмолчанию = Результат;
	Команда = ДополнительныеПараметры.Команда;
	НовыйКонтейнер = СоздатьНовыйКонтейнерНаСервере();
	Если ЗначениеЗаполнено(НовыйКонтейнер) тогда
		ЭтаФорма[Команда.Имя] = НовыйКонтейнер;
		ДобавитьСоответствиеКонтейнеров(Команда.Имя, НовыйКонтейнер, "КонечныйКонтейнер");
		
		ТекущийЭлементСканирования = ?(ЗначениеЗаполнено(ЭтаФорма[Команда.Имя]), "", "КонечныйКонтейнер");
		ТекущийКонечныйКонтейнер = ПолучитьКонтейнер(Команда.Имя, "КонечныйКонтейнер");	
		ПриИзмененииКонечногоКонтейнера();
	КонецЕсли;
	ТекущийЭлементСканирования = ?(ЗначениеЗаполнено(ЭтаФорма[Команда.Имя]), "", "КонечныйКонтейнер"); 
    ТекущийКонечныйКонтейнер = ПолучитьКонтейнер(Команда.Имя, "КонечныйКонтейнер");	
    ПриИзмененииКонечногоКонтейнера();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКонечныйКонтейнерЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Не ЗначениеЗаполнено(Результат) Тогда
        Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;	
	ОбработатьЭлементСканирования(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат, "Штрихкод"), "КонечныйКонтейнер");
	
	//ЭтаФорма[Команда.Имя] = Результат;
	//ДобавитьСоответствиеКонтейнеров(Команда.Имя, Результат, "КонечныйКонтейнер");
	//
	//ТекущийЭлементСканирования = ?(ЗначениеЗаполнено(ЭтаФорма[Команда.Имя]), "", "КонечныйКонтейнер");
	//ТекущийКонечныйКонтейнер = ПолучитьКонтейнер(Команда.Имя, "КонечныйКонтейнер");	
	//ПриИзмененииКонечногоКонтейнера();

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКонечныйКонтейнер(Команда)
	
	Если ЗначениеЗаполнено(ТекущийКонечныйКонтейнер) Тогда
		
		Если миПредупреждатьПоНеупакованнымТоварам И НЕ КонтрольПланаПоЗаказу() Тогда
			ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковкиОперативное.Форма.ФормаПредупреждение", Новый Структура("ТекущаяСтраница", "Страница2"), ЭтаФорма,,,,
					Новый ОписаниеОповещения("ЗавершитьКонечныйКонтейнер_Предупреждение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли ВводитьНомерПломбы Тогда
			ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковкиОперативное.Форма.ФормаВводНомераПломбы",, ЭтаФорма,,,,
					Новый ОписаниеОповещения("ЗавершитьКонечныйКонтейнер_ВводНомераПломбы", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
		ИначеЕсли КонтейнерНегабаритный(ТекущийКонечныйКонтейнер) Тогда
			ВГХКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийКонечныйКонтейнер, Новый Структура("Ширина, Глубина, Высота, Масса", "ТипКонтейнера.Ширина, ТипКонтейнера.Глубина, ТипКонтейнера.Высота, ТипКонтейнера.Масса"));
			
			ОткрытьФорму("ОбщаяФорма.усФормаВводаВГХ", Новый Структура("ВГХОбъекта, ПоляКонтроляВГХ", ВГХКонтейнера, "Ширина, Глубина, Высота"), ЭтаФорма,,,,
					Новый ОписаниеОповещения("ЗавершитьКонечныйКонтейнер_ВводВГХ", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ЗавершитьКонечныйКонтейнер_ВводВГХ(Неопределено, Неопределено);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКонечныйКонтейнер_Предупреждение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ВводитьНомерПломбы Тогда
		ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковкиОперативное.Форма.ФормаВводНомераПломбы",, ЭтаФорма,,,,
				Новый ОписаниеОповещения("ЗавершитьКонечныйКонтейнер_ВводНомераПломбы", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
	ИначеЕсли КонтейнерНегабаритный(ТекущийКонечныйКонтейнер) Тогда
		ВГХКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийКонечныйКонтейнер, Новый Структура("Ширина, Глубина, Высота, Масса", "ТипКонтейнера.Ширина, ТипКонтейнера.Глубина, ТипКонтейнера.Высота, ТипКонтейнера.Масса"));
		
		ОткрытьФорму("ОбщаяФорма.усФормаВводаВГХ", Новый Структура("ВГХОбъекта, ПоляКонтроляВГХ", ВГХКонтейнера, "Ширина, Глубина, Высота"), ЭтаФорма,,,,
				Новый ОписаниеОповещения("ЗавершитьКонечныйКонтейнер_ВводВГХ", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ЗавершитьКонечныйКонтейнер_ВводВГХ(Неопределено, Неопределено);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКонечныйКонтейнер_ВводНомераПломбы(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаписатьНомерПломбыКонтейнера(ТекущийКонечныйКонтейнер, Результат);
	КонецЕсли;
	
	Если КонтейнерНегабаритный(ТекущийКонечныйКонтейнер) Тогда
		ВГХКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийКонечныйКонтейнер, Новый Структура("Ширина, Глубина, Высота, Масса", "ТипКонтейнера.Ширина, ТипКонтейнера.Глубина, ТипКонтейнера.Высота, ТипКонтейнера.Масса"));
		
		ОткрытьФорму("ОбщаяФорма.усФормаВводаВГХ", Новый Структура("ВГХОбъекта, ПоляКонтроляВГХ", ВГХКонтейнера, "Ширина, Глубина, Высота"), ЭтаФорма,,,,
				Новый ОписаниеОповещения("ЗавершитьКонечныйКонтейнер_ВводВГХ", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ЗавершитьКонечныйКонтейнер_ВводВГХ(Неопределено, Неопределено);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКонечныйКонтейнер_ВводВГХ(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаписатьВГХКонтейнера(ТекущийКонечныйКонтейнер, Результат);
	КонецЕсли;
	
	Если ПереходитьККонтролюКонтейнераПослеУпаковки Тогда 
		ОткрытьФорму("Обработка.усРабочееМестоОператораКонтроляОтгрузки.Форма", Новый Структура("Контейнер", ТекущийКонечныйКонтейнер), ЭтаФорма,,,,
				Новый ОписаниеОповещения("ЗавершитьКонечныйКонтейнер_МастерКонтейнер", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		ЗавершитьКонечныйКонтейнер_МастерКонтейнер(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКонечныйКонтейнер_МастерКонтейнер(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяКнопки = ПолучитьИмяКнопки(ТекущийКонечныйКонтейнер, "КонечныйКонтейнер"); 
	
	ДокументПривязки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийКонечныйКонтейнер, "ДокументПривязки");
	Если ЗначениеЗаполнено(ДокументПривязки) Тогда
		ОпределитьСтатусКонтейнера(Новый ОписаниеОповещения("ЗавершитьКонечныйКонтейнер_СтатусКонтейнера", ЭтотОбъект, Новый Структура("ИмяКнопки, Контейнер", ИмяКнопки, ТекущийКонечныйКонтейнер)));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МастерКонтейнер) Тогда
		ТекущийЭлементСканирования = "МастерКонтейнер";
		ОбработатьЭлементСканирования(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МастерКонтейнер, "Штрихкод"));
	Иначе
		ЗавершитьКонечныйКонтейнерОкончание(ИмяКнопки, ТекущийКонечныйКонтейнер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКонечныйКонтейнер_СтатусКонтейнера(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяКнопки = ДополнительныеПараметры.ИмяКнопки;
    Контейнер = ДополнительныеПараметры.Контейнер;
    
    СтатусКонтейнер = Результат;
    
	Если ЗначениеЗаполнено(СтатусКонтейнер) Тогда
	    Если Не ИзменитьСтатусКонтейнера(Контейнер, СтатусКонтейнер) Тогда
	        ДобавитьСоответствиеКонтейнеров(ИмяКнопки, Контейнер, "КонечныйКонтейнер");
	        Возврат;
	    КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МастерКонтейнер) тогда
		ТекущийЭлементСканирования = "МастерКонтейнер";
		ОбработатьЭлементСканирования(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МастерКонтейнер, "Штрихкод"));
	Иначе
	    ЗавершитьКонечныйКонтейнерОкончание(ИмяКнопки, Контейнер);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКонечныйКонтейнерОкончание(ИмяКнопки, Знач Контейнер)
        
	Если ЗначениеЗаполнено(Контейнер) Тогда
		Печать(Контейнер);
        
        Для Индекс = 1 По КоличествоКонтейнеров Цикл
            Если ЭтаФорма["НачальныйКонтейнер" + Индекс] = Контейнер Тогда
                ЭтаФорма["НачальныйКонтейнер" + Индекс] = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
            КонецЕсли;
            Если ЭтаФорма["КонечныйКонтейнер" + Индекс] = Контейнер Тогда
                ЭтаФорма["КонечныйКонтейнер" + Индекс] = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
				Элементы["КонечныйКонтейнер" + Индекс].ТекстНевыбраннойКартинки = "";
            КонецЕсли;
        КонецЦикла;
        
        Если Не ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
            ИмяКнопкиНачальногоКонтейнера = ПолучитьИмяКнопки(ТекущийНачальныйКонтейнер, "НачальныйКонтейнер");
            ТекущийНачальныйКонтейнер = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
            
            ПриИзмененииНачальногоКонтейнера(ИмяКнопкиНачальногоКонтейнера);
        КонецЕсли;
    Иначе
        ЭтаФорма["Заполненность" + ПолучитьИмяКнопки(ТекущийКонечныйКонтейнер, "КонечныйКонтейнер")] = 0;
        ТекущийКонечныйКонтейнер = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
    КонецЕсли;
    
    ТекущийКонечныйКонтейнер = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
	ДобавитьСоответствиеКонтейнеров(ИмяКнопки, ТекущийКонечныйКонтейнер, "КонечныйКонтейнер");
    
    //++ БПС 30.05.2023 №70597
	Если Не МИ_РежимУпаковкиМК Тогда
	//-- БПС 30.05.2023 №70597
		ТекущийЭлементСканирования = "";
	КонецЕсли;
	ПриИзмененииКонечногоКонтейнера();
	
	// если есть незакрытые конечные контейнеры, то не проверяем план по заказу снизу
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	//++ БПС 30.05.2023 №70597
	Если тбпПланПоЗаказу.Количество() = 0 ИЛИ МИ_РежимУпаковкиМК Тогда
		ЗаказНаОтгрузку = Неопределено;
		ПланПоКонтейнеру = Ложь;
		
		Если тбпПланПоЗаказу.Количество() = 0 Тогда
			МИ_РежимУпаковкиМК = Ложь;
			ОбновитьСостояниеРежимовРаботы();
		КонецЕсли;
		ПриИзмененииЗаказаНаОтгрузку(, МИ_РежимУпаковкиМК);
				
		Если тбпПланПоЗаказу.Количество() = 0 Тогда
			Если миПеремещатьКонтейнерыВЗонуУпаковки Тогда
				ТекущийЭлементСканирования = "Перемещение";
			Иначе
				ТекущийЭлементСканирования = "ЗаказНаОтгрузку";
			КонецЕсли;
			УстановитьТекстПодсказкиНаКлиенте();
		КонецЕсли;
	КонецЕсли;
	//-- БПС 30.05.2023 №70597

КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусКонтейнера(Знач Оповещение)
	
	Если ЗначениеЗаполнено(СтатусКонтейнераПоУмолчанию) Тогда
		СтатусКонтейнера = СтатусКонтейнераПоУмолчанию;
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипСтатуса", ПредопределенноеЗначение("Перечисление.усТипыСтатусовКонтейнеров.Упакован")));
		ОткрытьФорму("Справочник.усСтатусыКонтейнеров.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ОпределитьСтатусКонтейнераЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
        Возврат;			
	КонецЕсли;	
	
	ВыполнитьОбработкуОповещения(Оповещение, СтатусКонтейнера);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтатусКонтейнераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтатусКонтейнера = Результат;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ВыполнитьОбработкуОповещения(Оповещение, СтатусКонтейнера);

КонецПроцедуры

&НаКлиенте
Процедура ПоложитьВМастерКонтейнер(Команда)
	
	Если ЗначениеЗаполнено(ТекущийКонечныйКонтейнер) Тогда
		
		Если КонтейнерНегабаритный(ТекущийКонечныйКонтейнер) Тогда
			ВГХКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийКонечныйКонтейнер, Новый Структура("Ширина, Глубина, Высота, Масса", "ТипКонтейнера.Ширина, ТипКонтейнера.Глубина, ТипКонтейнера.Высота, ТипКонтейнера.Масса"));
			
			ОткрытьФорму("ОбщаяФорма.усФормаВводаВГХ", Новый Структура("ВГХОбъекта, ПоляКонтроляВГХ", ВГХКонтейнера, "Ширина, Глубина, Высота"), ЭтаФорма,,,,
					Новый ОписаниеОповещения("ПоложитьВМастерКонтейнер_ПослеВводаВГХ", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ПоложитьВМастерКонтейнер_ПослеВводаВГХ(Неопределено, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложитьВМастерКонтейнер_ПослеВводаВГХ(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаписатьВГХКонтейнера(ТекущийКонечныйКонтейнер, Результат);
	КонецЕсли;
	
	Если ПереходитьККонтролюКонтейнераПослеУпаковки Тогда 
		ОткрытьФорму("Обработка.усРабочееМестоОператораКонтроляОтгрузки.Форма", Новый Структура("Контейнер", ТекущийКонечныйКонтейнер), ЭтотОбъект, ТекущийКонечныйКонтейнер,,,
				Новый ОписаниеОповещения("ЗавершитьКонечныйКонтейнер_МастерКонтейнер", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе	
		ПоложитьВМастерКонтейнерПервыйФрагмент(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложитьВМастерКонтейнерПервыйФрагмент(Результат, ДополнительныеПараметры) Экспорт
	
	Если ВыбиратьКонтейнерИзСписка Тогда
		мДокументы = Новый Массив;
		мДокументы.Добавить(ЗаказНаОтгрузку);
		мДокументы.Добавить(Рейс);
		мДокументы.Добавить(Неопределено);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументПривязки", мДокументы));
		
		МастерКонтейнер = Неопределено;
		
		ОткрытьФорму("Справочник.усКонтейнеры.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ПоложитьВМастерКонтейнерЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
	ИначеЕсли ЗначениеЗаполнено(МастерКонтейнер) тогда
		ТекущийЭлементСканирования = "МастерКонтейнер";
		ОбработатьЭлементСканирования(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МастерКонтейнер, "Штрихкод"));
	Иначе
		ТекущийЭлементСканирования = "МастерКонтейнер";
		УстановитьТекстПодсказки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложитьВМастерКонтейнерЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(МастерКонтейнер) Тогда
		ПроверитьМастерКонтейнер(Результат);
		
		Если ТекстОшибки <> "" Тогда 
			Возврат;
		КонецЕсли;			
		
		МастерКонтейнер = Результат;
		
		КонтейнерДляЗавершения = ТекущийКонечныйКонтейнер;
        ПоложитьВМастерКонтейнерНаСервере();
        ТекущийЭлементСканирования = "";
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			Если ЭтаФорма["КонечныйКонтейнер" + Индекс] = КонтейнерДляЗавершения Тогда
                ЭтаФорма["КонечныйКонтейнер" + Индекс] = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
            КонецЕсли;			
		КонецЦикла;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействиеЗавершитьМастерКонтейнерНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(СтатусМастерКонтейнераПриЗавершении) Тогда
		ТекстОшибки = НСтр("ru = 'Не установлен статус мастер-контейнера при завершении'");
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		Возврат;
	Иначе
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
				ТекстОшибки = НСтр("ru = 'ОШИБКА. Остались незакрытые конечные контейнеры.'");
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат;
			КонецЕсли;
 		КонецЦикла;
		
		Если ВыбиратьКонтейнерИзСписка Тогда
			мДокументы = Новый Массив;
			мДокументы.Добавить(ЗаказНаОтгрузку);
			мДокументы.Добавить(Рейс);
			//мДокументы.Добавить(Неопределено);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументПривязки", мДокументы));
			
			ОткрытьФорму("Справочник.усКонтейнеры.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ЗавершитьМастерКонтейнерЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
		ИначеЕсли ЗначениеЗаполнено(МастерКонтейнер) тогда
			ОбработатьЭлементСканирования(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МастерКонтейнер, "Штрихкод"), "ЗавершитьМастерКонтейнер");
			УстановитьТекстПодсказки();
		Иначе
			ТекущийЭлементСканирования = "ЗавершитьМастерКонтейнер";
			УстановитьТекстПодсказки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьМастерКонтейнерЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		МастерКонтейнер = Результат;
		Если ИзменитьСтатусМастерКонтейнера(МастерКонтейнер, СтатусМастерКонтейнераПриЗавершении) тогда
			//ПечатьМастерКонтейнера();
			Печать(МастерКонтейнер);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьМастерКонтейнера()
	
	Если ЗначениеЗаполнено(миПечатнаяФормаУпаковочногоЛиста) Тогда
		
		тМассивОбъектовНазначения = Новый Массив;
		тМассивОбъектовНазначения.Добавить(МастерКонтейнер);
		
		ВыполняемаяКоманда = Новый Структура(
		"Ссылка, Представление, 
		|Идентификатор, ВариантЗапуска, ПоказыватьОповещение, 
		|Модификатор, ОбъектыНазначения, ЭтоОтчет, Вид");
		
		ВыполняемаяКоманда.ВариантЗапуска 		= ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода");
		ВыполняемаяКоманда.Вид 					= ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма");
		ВыполняемаяКоманда.Идентификатор    	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(миПечатнаяФормаУпаковочногоЛиста, "ИмяОбъекта");
		ВыполняемаяКоманда.Модификатор      	= "ПечатьMXL";
		ВыполняемаяКоманда.ОбъектыНазначения 	= тМассивОбъектовНазначения;
		ВыполняемаяКоманда.ПоказыватьОповещение = Ложь;
		ВыполняемаяКоманда.Представление        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(миПечатнаяФормаУпаковочногоЛиста, "Наименование");
		ВыполняемаяКоманда.Ссылка				= миПечатнаяФормаУпаковочногоЛиста;
		ВыполняемаяКоманда.ЭтоОтчет 			= Ложь;
		
		ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьОткрытиеПечатнойФормы(ВыполняемаяКоманда, ЭтаФорма, ВыполняемаяКоманда.ОбъектыНазначения);
		
	Иначе
		
		Если ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
			ИмяМакетаПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаОтгрузку, "Контрагент.ШаблонУпаковочногоЛистаКонтейнера");
		Иначе
			ДокументПривязки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МастерКонтейнер, "ДокументПривязки");
			Если ЗначениеЗаполнено(ДокументПривязки) Тогда
				ИмяМакетаПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПривязки, "Контрагент.ШаблонУпаковочногоЛистаКонтейнера");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ИмяМакетаПечати) Тогда
			ИмяМакетаПечати = "УпаковочныйЛист";
		КонецЕсли;
		
		Если ПечатьНаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Обработка.усРабочееМестоОператораУпаковкиОперативное", ИмяМакетаПечати, МастерКонтейнер, Неопределено);
		Иначе	
			мКонтейнеры = Новый Массив;
			мКонтейнеры.Добавить(МастерКонтейнер);
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.усРабочееМестоОператораУпаковкиОперативное", ИмяМакетаПечати,	мКонтейнеры, Неопределено, Неопределено);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьУпаковочногоЛистаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(КонтейнерДляПечати) Тогда
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(КонтейнерДляПечати);
		
		Если ЗначениеЗаполнено(миПечатнаяФормаУпаковочногоЛиста) Тогда
			СсылкаНаОбъект = миПечатнаяФормаУпаковочногоЛиста;
		Иначе
			сткПолей = Новый Структура;
			сткПолей.Вставить("ДополнительнаяОбработка", "ДокументПривязки.СтадииОтгрузки.ВнешняяПечатнаяФормаЭтикеткиКонтейнера");
			СсылкаНаОбъект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КонтейнерДляПечати, сткПолей).ДополнительнаяОбработка;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ИмяМакетаПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ИмяОбъекта");
			ПараметрыПечати = Новый Структура;
			
			Если ПечатьНаПринтер Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
					"Справочник.усКонтейнеры",
					ИмяМакетаПечати,
					МассивОбъектов,
					ПараметрыПечати);
			Иначе
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
					"Справочник.усКонтейнеры",
					ИмяМакетаПечати,
					МассивОбъектов,
					Неопределено,
					ПараметрыПечати);
			КонецЕсли;			
		Иначе
			ИмяМакетаПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаОтгрузку, "Контрагент.ШаблонУпаковочногоЛистаКонтейнера");
			Если НЕ ЗначениеЗаполнено(ИмяМакетаПечати) Тогда
				ИмяМакетаПечати = "УпаковочныйЛист";
			КонецЕсли; 
			
			Если ПечатьНаПринтер Тогда
				ПараметрыПечати = Новый Структура("ВБазовых");
				
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
					"Обработка.усРабочееМестоОператораУпаковкиОперативное",
					ИмяМакетаПечати,
					МассивОбъектов,
					ПараметрыПечати);
			Иначе
				ПараметрыПечати = Новый Структура("ВБазовых");
				
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
					"Обработка.усРабочееМестоОператораУпаковкиОперативное",
					ИмяМакетаПечати,
					МассивОбъектов,
					Неопределено,
					ПараметрыПечати);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеткиКонтейнераНажатие(Элемент)
	
	Если ЗначениеЗаполнено(КонтейнерДляПечати) Тогда
		Если ПечатьНаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Обработка.усРабочееМестоОператораУпаковкиОперативное", "ЭтикеткаКонтейнера", КонтейнерДляПечати);
		Иначе
			АдресВХранилище = ПолучитьДанныеДляПечатиЭтикеток();
			СтруктураПараметры = Новый Структура("АдресВХранилище, ТипЭтикеток, ИмяТаблицыИсходныхДанных, ПечатьИзДокумента", АдресВХранилище, ПредопределенноеЗначение("Перечисление.усТипыШаблоновЭтикеток.Контейнеры"), "Контейнеры", Истина);
			ОткрытьФорму("Обработка.усПечатьЭтикеток.Форма.Форма", СтруктураПараметры,,	УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикеткиТоваровНажатие(Элемент)

	Если ЗначениеЗаполнено(КонтейнерДляПечати) Тогда
		ДокументМаркировка = СоздатьЗадачуМаркировки();
		
		Если ДокументМаркировка <> Неопределено Тогда
			Если ПечатьНаПринтер Тогда
				ПараметрыПечати = Новый Структура("ШаблонЭтикеткиИзКонтрагента");
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Обработка.усРабочееМестоОператораУпаковкиОперативное", "ЭтикеткаТоваров", ДокументМаркировка, ПараметрыПечати);
			Иначе
				ТипЭтикеток     = "";
				ТабличнаяЧасть  = "";
				ПараметрыВыполненияКоманды = Новый Структура("ШаблонЭтикеткиИзКонтрагента");
				АдресВХранилище = ПолучитьДанныеДляПечатиЭтикетокТоваров(ДокументМаркировка, ТипЭтикеток, ТабличнаяЧасть, ПараметрыВыполненияКоманды);
				СтруктураПараметры = Новый Структура("АдресВХранилище, ТипЭтикеток, ИмяТаблицыИсходныхДанных, ПечатьИзДокумента, Документ", АдресВХранилище, ТипЭтикеток, ТабличнаяЧасть, Истина, Неопределено);
				ОткрытьФорму("Обработка.усПечатьЭтикеток.Форма.Форма", СтруктураПараметры,,	Новый УникальныйИдентификатор);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЗакрытьНажатие(Элемент)
	Элементы.ГруппаСоставПечать.ТекущаяСтраница = Элементы.ГруппаСоставКонечногоКонтейнера;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИнструкцииНажатие(Элемент)
	
	текМассивФайлы = ПолучитьПрисоединенныеФайлы(ЗаказНаОтгрузку);
	
	Для Каждого текФайл Из текМассивФайлы Цикл		
		ДанныеФайла = ПолучитьДанныеФайла(текФайл, УникальныйИдентификатор);
	
		Если ДанныеФайла.Зашифрован Тогда
			// Файл может быть изменен в другом сеансе.
			ОповеститьОбИзменении(текФайл);
		Иначе		
			ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПеремещенияНажатие(Элемент)
	
	//--> МИ-1 / #8728# / 2021-10-11
	МассивОбъектов = Новый Массив;
	
	Для Каждого ДанныеСтроки Из тбпЗадачиПеремещенияПоЗаказу Цикл
		МассивОбъектов.Добавить(ДанныеСтроки.Задача);
	КонецЦикла;
	
	Если МассивОбъектов.Количество() Тогда
		ПараметрыПечати = Новый Структура("Исполнитель, РабочийПоток", Исполнитель, миРабочийПотокПеремещенияКонтейнеров);
		
		Если ПечатьНаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
				"Обработка.усРабочееМестоОператораУпаковкиОперативное",
				"ЗадачиПеремещения",
				МассивОбъектов,
				ПараметрыПечати);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
				"Обработка.усРабочееМестоОператораУпаковкиОперативное",
				"ЗадачиПеремещения",
				МассивОбъектов,
				Неопределено,
				ПараметрыПечати);
		КонецЕсли;
	КонецЕсли;
	//<-- МИ-1 / #8728# / 2021-10-11
	
КонецПроцедуры

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ИзменитьАктивностьСтолаУпаковки(Команда)
	
	Элементы.АктивностьСтолаУпаковки.Пометка = Не Элементы.АктивностьСтолаУпаковки.Пометка;
	ПриИзмененииРежимаРаботы_АктивностьСтолаУпаковки();
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ИзменитьРежимСканирования(Команда)
	
	НеЗапрашиватьКоличество = Не НеЗапрашиватьКоличество;
	ПриИзмененииРежимаРаботы_РежимСканирования();
	
	Если ТекущийЭлементСканирования = "Количество" Тогда
		ТекущийЭлементСканирования = "Номенклатура";
		УстановитьТекстПодсказки();
	КонецЕсли;
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ИзменитьРежимВводаКоличества(Команда)
	
	Элементы.РежимВводаКоличества.Пометка = Не Элементы.РежимВводаКоличества.Пометка;
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ИзменитьРежимУпаковкиМК(Команда)
	
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			ТекстОшибки = НСтр("ru = 'ОШИБКА. Остались незакрытые конечные контейнеры.'");
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	МИ_РежимУпаковкиМК = Не МИ_РежимУпаковкиМК;
	ПриИзмененииРежимаРаботы_РежимУпаковкиМК();
	
	Если ТекущийЭлементСканирования <> "Перемещение" Тогда
		Если МИ_РежимУпаковкиМК Тогда
			ТекущийНачальныйКонтейнер = Неопределено;
			ПриИзмененииНачальногоКонтейнера(, Истина);
		Иначе
			ЗаказНаОтгрузку = Неопределено;
			ПланПоКонтейнеру = Ложь;
			ПриИзмененииЗаказаНаОтгрузку();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ИзменитьНеОтображатьУпакованныйТовар(Команда)
	
	Элементы.НеОтображатьУпакованныйТовар.Пометка = Не Элементы.НеОтображатьУпакованныйТовар.Пометка;
	ПриИзмененииРежимаРаботы_НеОтображатьУпакованныйТовар();
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьНастройкиРабочегоМеста(РабочееМесто)
	
	КоличествоКонтейнеров = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаКоличествоКонтейнеров,
		1);	
		
	СтатусКонтейнераПоУмолчанию = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаСтатусКонтейнераПоУмолчанию,
		Справочники.усСтатусыКонтейнеров.ПустаяСсылка());
		
	СтатусМастерКонтейнераПриЗавершении = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаСтатусМастерКонтейнераПоУмолчанию,
		Справочники.усСтатусыКонтейнеров.ПустаяСсылка());
		
	ВыбиратьЗаказНаОтгрузкуИзСписка = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаВыбиратьЗаказНаОтгрузкуИзСписка,
		Истина);
		
	ВыбиратьКонтейнерИзСписка = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаВыбиратьКонтейнерИзСписка,
		Истина);

	АвтоматическиИзменятьСостояниеЯчеекОтбора = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаАвтоматическиИзменятьСостояниеЯчеекОтбора,
		Ложь);
		
	ПечатьНаПринтер = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаПечатьНаПринтер,
		Ложь);
		
	ПечатьУпаковочногоЛиста = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаПечатьУпаковочногоЛиста,
		Ложь);
		
	ПечатьЭтикеткиКонтейнера = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаПечатьЭтикеткиКонтейнера,
		Ложь);
		
	ПечатьЭтикеткиТоваров = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаПечатьЭтикеткиТоваров,
		Ложь);
		
	АвтоматическиСоздаватьНовыйКонтейнер = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаАвтоматическиСоздаватьНовыйКонтейнер,
		Ложь);
		
	ТипКонтейнераПоУмолчанию = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаТипКонтейнераПоУмолчанию,
		Ложь);
		
	ВыбиратьТипКонтейнера = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаВыбиратьТипКонтейнера,
		Ложь);

	//ОтображатьСоставКонтейнера = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	//    РабочееМесто,
	//	ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаОтображатьСоставКонтейнера,
	//	Ложь);
	
	//!ШРВ 06.09.2017 15:07:31 Начало
	ОтображатьСоставКонтейнера = Ложь;	
	//!ШРВ 06.09.2017 15:07:31 Конец
	
	ОтображатьПоложениеКонтейнеровПоЗаказу = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаОтображатьПоложениеКонтейнеровПоЗаказу,
		Ложь);
		
	ПереходитьККонтролюКонтейнераПослеУпаковки = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаПереходитьККонтролюКонтейнераПослеУпаковки,
		Ложь);
		
	КонтролироватьСоставКонтейнера = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаКонтролироватьСоставКонтейнера,
		Ложь);
		
	СоздаватьОтбораПоНедостаче = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаСоздаватьОтбораПоНедостаче,
		Ложь);
		
	ВводитьНомерПломбы = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаВводитьНомерПломбы,
		Ложь);
		
	//!ШРВ 04.09.2017 16:39:31 Начало
	КонтрольВСлепую = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.КонтрольВСлепую,
		Ложь);
	//!ШРВ 04.09.2017 16:39:31 Конец
	
	ОграничениеПоОбъему = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
	    РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаОграничениеПоОбъему,
		0);
		
	ВыполнятьКонтрольПоМассе = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаВыполнятьКонтрольПоМассе,
		Ложь);
		
	НеАктивироватьРабочееМестоПриОткрытии = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.УпаковкаНеАктивироватьРабочееМестоПриОткрытии,
		Ложь);
		
	миАвтоматическиИзменятьШтрихкодКонтейнера = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.миУпаковкаАвтоматическиИзменятьШтрихкодКонтейнера,
		Ложь);
		
	миАлгоритмПечатиУпаковочногоЛиста = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.миУпаковкаАлгоритмПечатиУпаковочногоЛиста,
		Неопределено);
		
	миПечатнаяФормаУпаковочногоЛиста = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.миУпаковкаПечатнаяФормаУпаковочногоЛиста,
		Неопределено);
		
	миПредупреждатьПоНеупакованнымТоварам = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.миУпаковкаПредупреждатьПоНеупакованнымТоварам,
		Ложь);
		
	миАлгоритмПоискаКонтейнераНаОстатке = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.миУпаковкаАлгоритмПоискаКонтейнераНаОстатке,
		Неопределено);
		
	миПеремещатьКонтейнерыВЗонуУпаковки = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.миУпаковкаПеремещатьКонтейнерыВЗонуУпаковки,
		Ложь);
		
	миПравилоПеремещенияКонтейнеров = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.миУпаковкаПравилоПеремещенияКонтейнеров,
		Неопределено);
		
	миРабочийПотокПеремещенияКонтейнеров = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.миУпаковкаРабочийПотокПеремещенияКонтейнеров,
		Неопределено);
		
	//++ Юдинцев ВС 24.01.23 60503
	миЗапретитьДоверительнуюУпаковку = усСервисныеФункции.ХранилищеНастроекРабочихМестЗагрузить(
		РабочееМесто,
		ПланыВидовХарактеристик.усНастройкиРабочихМест.миЗапретитьДоверительнуюУпаковку,
		Неопределено);
	//-- Юдинцев ВС 24.01.23 60503
		
	Если миПеремещатьКонтейнерыВЗонуУпаковки Тогда
		миПеремещатьКонтейнерыПоРабочемуПотоку	= миПравилоПеремещенияКонтейнеров = "РабочийПоток";
		миПеремещатьКонтейнерыПоАлгоритмуПоиска = миПравилоПеремещенияКонтейнеров = "АлгоритмПоискаКонтейнера";
	Иначе
		миПеремещатьКонтейнерыПоРабочемуПотоку	= Ложь;
		миПеремещатьКонтейнерыПоАлгоритмуПоиска = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВернутьЗадачиКВыполнению()
	
	Для Каждого ТекущаяСтрока Из тбпЗадачиПеремещенияПоЗаказу Цикл
		усУправлениеЗадачами.СнятьЗадачуСИсполнителя(Исполнитель, ТекущаяСтрока.Задача, Ложь);
	КонецЦикла;
	
	текДействиеРМ = РегистрыСведений.усТекущееДействиеПользователяРабочегоМеста.СоздатьМенеджерЗаписи();
	текДействиеРМ.НомерСеанса  = НомерСеансаИнформационнойБазы();
	текДействиеРМ.РабочийПоток = миРабочийПотокПеремещенияКонтейнеров;
	текДействиеРМ.Удалить();
	
КонецПроцедуры
 
&НаКлиенте
Процедура НайтиЗадачи()
	
	ТекстОшибки = "";
	Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	Элементы.ГруппаПланИлиСоставСтраницы.ТекущаяСтраница = Элементы.ГруппаЗадачиПеремещения;
	ЗаполнитьТабличнуюЧастьПеремещение();
	
	Если тбпЗадачиПеремещенияПоЗаказу.Количество() Тогда
		ТекстПодсказки = "";
		ОтключитьОбработчикОжидания("НайтиЗадачи");
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеЗаказКонтейнер()
	
	ОбновитьКонтрольЗаказаНаОтгрузку();
	ОбновитьЗаполненностьКонтейнеров();
	//++ БПС 30.05.2023 №70597
	ОбновитьПланПоЗаказу(ПланПоКонтейнеру, МИ_РежимУпаковкиМК);
	//-- БПС 30.05.2023 №70597
	
	Элементы.тбпСоставКонечногоКонтейнера.Обновить();
	ОбновитьДанныеЗаказКонтейнер = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКонтейнер(ИмяКнопки, ТипКонтейнера)
	
	Перем РезультатФункции;
	
	СтрокаПоиска = ТаблицаСоответствий.НайтиСтроки(Новый Структура("ИмяКнопки,ТипКонтейнера", ИмяКнопки, ТипКонтейнера));
	Если СтрокаПоиска.Количество() > 0 Тогда 
		РезультатФункции = СтрокаПоиска[0].Контейнер;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяКнопки(Контейнер, ТипКонтейнера)
	
	Перем РезультатФункции;
	
	СтрокаПоиска = ТаблицаСоответствий.НайтиСтроки(Новый Структура("Контейнер,ТипКонтейнера", Контейнер, ТипКонтейнера));
	Если СтрокаПоиска.Количество() > 0 Тогда 
		РезультатФункции = СтрокаПоиска[0].ИмяКнопки;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСоответствиеКонтейнеров(ИмяКнопки, Знач Контейнер = Неопределено, ТипКонтейнера)
	
	Если Контейнер = Неопределено Тогда
		Контейнер = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");	
	КонецЕсли;
	
	СтрокаПоиска = ТаблицаСоответствий.НайтиСтроки(Новый Структура("ИмяКнопки, ТипКонтейнера", ИмяКнопки, ТипКонтейнера));
	Если СтрокаПоиска.Количество() = 0 Тогда 
		НоваяСтрока = ТаблицаСоответствий.Добавить();
	Иначе
		НоваяСтрока = СтрокаПоиска[0];
		Если НоваяСтрока.Контейнер = Контейнер Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.ИмяКнопки 	  = ИмяКнопки;
	НоваяСтрока.Контейнер 	  = Контейнер;
	НоваяСтрока.ТипКонтейнера = ТипКонтейнера;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЗаказаНаОтгрузку(ТекНачальныйКонтейнер = Неопределено, ВРежимеУпаковкиМК = Ложь)
	
	//++ БПС 30.05.2023 №70597
	сткДанныеЗаказа = Новый Структура;
	сткДанныеЗаказа.Вставить("Номер", "");
	сткДанныеЗаказа.Вставить("НомерКИС", "");
	сткДанныеЗаказа.Вставить("Дата", ТекущаяДатаСеанса());
	сткДанныеЗаказа.Вставить("Рейс", Документы.усРейс.ПустаяСсылка());
	сткДанныеЗаказа.Вставить("Комментарий", "");
	сткДанныеЗаказа.Вставить("Контрагент", Справочники.усКонтрагенты.ПустаяСсылка());
	сткДанныеЗаказа.Вставить("КоличествоЭтикетокПечати", 0);
	сткДанныеЗаказа.Вставить("VIPУпаковка", Ложь);
	сткДанныеЗаказа.Вставить("Статус", Перечисления.усСтатусыЗаказовНаОтгрузку.ПустаяСсылка());
	сткДанныеЗаказа.Вставить("Упаковывается", Ложь);
	
	Если Не ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
		ТекстКомментария						= "";
		Элементы.ДекорацияКонтрагент.Заголовок	= "";
		Элементы.ГруппаДопИнф.Видимость			= Ложь;
		
		Элементы.ДействиеОткрытьЗаказНаОтгрузку.ТекстНевыбраннойКартинки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 заказ на отгрузку'"), ?(ВыбиратьЗаказНаОтгрузкуИзСписка, НСтр("ru = 'Выберите'"), НСтр("ru = 'Отсканируйте'")));
		
		Номенклатура			= Справочники.усНоменклатура.ПустаяСсылка();
		УпаковкаНоменклатуры	= Справочники.усУпаковкиНоменклатуры.ПустаяСсылка();
		СтатусНоменклатуры		= Справочники.усСтатусыНоменклатуры.ПустаяСсылка();
		ПартияНоменклатуры		= Справочники.усПартииНоменклатуры.ПустаяСсылка();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	усЗаказНаОтгрузку.Номер,
		|	усЗаказНаОтгрузку.НомерКИС,
		|	усЗаказНаОтгрузку.Дата,
		|	усЗаказНаОтгрузку.Рейс,
		|	усЗаказНаОтгрузку.Комментарий,
		|	усЗаказНаОтгрузку.Контрагент.Наименование КАК Контрагент,
		|	усЗаказНаОтгрузку.КоличествоЭтикетокПечати,
		|	усЗаказНаОтгрузку.СтадииОтгрузки.VIPУпаковка КАК VIPУпаковка,
		|	усСтатусыЗаказовНаОтгрузку.Статус,
		|	усСтатусыЗаказовНаОтгрузку.Упаковывается
		|ИЗ
		|	Документ.усЗаказНаОтгрузку КАК усЗаказНаОтгрузку
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.усСтатусыЗаказовНаОтгрузку КАК усСтатусыЗаказовНаОтгрузку
		|		ПО усЗаказНаОтгрузку.Ссылка = усСтатусыЗаказовНаОтгрузку.ЗаказНаОтгрузку
		|ГДЕ
		|	усЗаказНаОтгрузку.Ссылка = &ЗаказНаОтгрузку";
		
		Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() тогда
			ЗаполнитьЗначенияСвойств(сткДанныеЗаказа, Выборка);
		КонецЕсли;
		
		Рейс				= сткДанныеЗаказа.Рейс;
		ЗаказУпаковывается	= сткДанныеЗаказа.Упаковывается;
		Если Не ЗаказУпаковывается Тогда
			УстановитьСостояниеЗаказаУпаковывается();
		КонецЕсли;
		
		ТекстКомментария 						= сткДанныеЗаказа.Комментарий;
		Элементы.ДекорацияКонтрагент.Заголовок 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Статус: %1%2%3'"), сткДанныеЗаказа.Статус, Символы.ПС, сткДанныеЗаказа.Контрагент);
		Элементы.ГруппаДопИнф.Видимость 		= сткДанныеЗаказа.КоличествоЭтикетокПечати > 0 ИЛИ сткДанныеЗаказа.VIPУпаковка;
		
		//РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
		//сткДанныеРМ  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РабочееМесто, Новый Структура("ПравилаВыполнения", "РабочийПотокУпаковки.ПравилаВыполнения"));
		//
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	усЗначенияПравилСкладскихОпераций.Значение
		//|ИЗ
		//|	РегистрСведений.усЗначенияПравилСкладскихОпераций КАК усЗначенияПравилСкладскихОпераций
		//|ГДЕ
		//|  усЗначенияПравилСкладскихОпераций.Правило = &Правило И
		//|  усЗначенияПравилСкладскихОпераций.Настройка = &Настройка";
		//
		//Запрос.УстановитьПараметр("Правило", сткДанныеРМ.ПравилаВыполнения);
		//Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.усНастройкиСкладскихОпераций.ПоискЗаказаНаОтгрузку);
		//Выборка = Запрос.Выполнить().Выбрать();
		//
		//Пока Выборка.Следующий() Цикл
		//	Если Выборка.Значение Тогда	
		//		Элементы.ДействиеОткрытьЗаказНаОтгрузку.ТекстНевыбраннойКартинки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказ № %1 от %2'"), сткДанныеЗаказа.Номер, Формат(сткДанныеЗаказа.Дата, "ДФ=dd.MM.yyyy"));
		//	Иначе
		//		Элементы.ДействиеОткрытьЗаказНаОтгрузку.ТекстНевыбраннойКартинки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказ № %1 от %2'"), сткДанныеЗаказа.НомерКИС, Формат(сткДанныеЗаказа.Дата, "ДФ=dd.MM.yyyy"));
		//	КонецЕсли;
		//КонецЦикла;
	КонецЕсли;
	
	ОбновитьКонтрольЗаказаНаОтгрузку();
	ОбновитьПланПоЗаказу(, ВРежимеУпаковкиМК);
	
	Если Не ВРежимеУпаковкиМК Тогда
		Для Каждого ЭлКонтейнер Из ТаблицаСоответствий Цикл
			ЭлКонтейнер.Контейнер = Справочники.усКонтейнеры.ПустаяСсылка();
		КонецЦикла;	
	
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			// инициализировать начальные контейнеры
			ЭтаФорма["НачальныйКонтейнер" + Индекс] = Справочники.усКонтейнеры.ПустаяСсылка();
			ЭтаФорма["ЗаполненностьНачальныйКонтейнер" + Индекс] = 0;
			
			// инициализировать конечные контейнеры
			ЭтаФорма["КонечныйКонтейнер" + Индекс] = Справочники.усКонтейнеры.ПустаяСсылка();
			ЭтаФорма["ЗаполненностьКонечныйКонтейнер" + Индекс] = 0;
			
			// установить доступность
			Элементы["НачальныйКонтейнер" + Индекс].Доступность  = Истина;
			Элементы["КонечныйКонтейнер" + Индекс].Доступность = Истина;
			
			Элементы["НачальныйКонтейнер" + Индекс].ТекстНевыбраннойКартинки  = " ";
			Элементы["КонечныйКонтейнер" + Индекс].ТекстНевыбраннойКартинки = " ";
		КонецЦикла;
		
		ТекущийНачальныйКонтейнер = ТекНачальныйКонтейнер;
		ТекущийКонечныйКонтейнер  = Справочники.усКонтейнеры.ПустаяСсылка();
		
		ПриИзмененииКонечногоКонтейнера();
		КонечныеКонтейнеры.Очистить();
	КонецЕсли;
	
	Если ВРежимеУпаковкиМК Тогда
		ТекущийЭлементСканирования = "Номенклатура";
	ИначеЕсли Не ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
		ТекущийЭлементСканирования = "ЗаказНаОтгрузку";
	Иначе
		ТекущийЭлементСканирования = "";
	КонецЕсли;
	УстановитьТекстПодсказки();
	//-- БПС 30.05.2023 №70597
	
КонецПроцедуры

//!ШРВ 07.09.2017 11:44:01 Начало
&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПеремещение()
	
	СхемаКомпоновкиДанных = миРабочийПотокПеремещенияКонтейнеров.СхемаКомпоновкиДанных.Получить();
	Отбор = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор;
		
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.усСтатусыЗадач.КВыполнению);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "Статус", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);	
	
	СписокТиповДокументаОснования = Новый СписокЗначений;
	СписокТиповДокументаОснования.Добавить(Тип("ДокументСсылка.усЗаказНаОтгрузку"));	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "ТипДокументаОснования", СписокТиповДокументаОснования, ВидСравненияКомпоновкиДанных.ВСписке, НСтр("ru = 'Отбор по типу документа основания'"), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "ТипЗадачи", Перечисления.усТипыЗадач.Перемещение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("Документы");
	НаборДанных.Запрос = СтрЗаменить(НаборДанных.Запрос, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 10000");
	
	Поле = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("ДокументОснование");
	Поле.Использование = Истина;
	
	Поле = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("Объем");
	Поле.Использование = Истина;
	
	Поле = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("Ссылка.КонечнаяЯчейка");
	Поле.Использование = Истина;
	
	Поле = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	Поле.Поле = Новый ПолеКомпоновкиДанных("Ссылка.НачальнаяЯчейка.ПомещениеСсылка");
	Поле.Использование = Истина;
		
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Параметр = СхемаКомпоновкиДанных.Параметры.Найти("КонецСегодняшнегоДня");
	Если Параметр <> Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецСегодняшнегоДня", КонецДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	Параметр = СхемаКомпоновкиДанных.Параметры.Найти("КонецЗавтрашнегоДня");
	Если Параметр <> Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецЗавтрашнегоДня", КонецДня(ТекущаяДатаСеанса() + 86400));
	КонецЕсли;
	Параметр = СхемаКомпоновкиДанных.Параметры.Найти("ТекущаяДата");
	Если Параметр <> Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	КонецЕсли;
	Параметр = СхемаКомпоновкиДанных.Параметры.Найти("ТекущийСтеллаж");
	Если Параметр <> Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущийСтеллаж", Справочники.усСтеллажи.ПустаяСсылка());
	КонецЕсли;
	Параметр = СхемаКомпоновкиДанных.Параметры.Найти("ТекущаяЯчейка");
	Если Параметр <> Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущаяЯчейка", Справочники.усЯчейки.ПустаяСсылка());
	КонецЕсли;
	//--> МИ-1 / 2019-03-14
	Параметр = СхемаКомпоновкиДанных.Параметры.Найти("НачалоТекущегоДня");
	Если Параметр <> Неопределено Тогда
		ДельтаПараметра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(миРабочийПотокПеремещенияКонтейнеров, "ДельтаПараметраНачалоТекущегоДня") * 3600; // Измеряется в часах при заполнении
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()) + ДельтаПараметра);
	КонецЕсли;
	//--> МИ-1 / 2019-03-14
	
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	текРезультат = Новый ТаблицаЗначений;
	
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(текРезультат);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	Если Не текРезультат.Количество() Тогда
		ЗадачиВыполнены = Истина;
		ТекстОшибки = НСтр("ru = 'Не найдены задачи по рабочему потоку перемещения контейнеров.'");
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		Возврат;
	Иначе
		тбпЗадачиПеремещенияПоЗаказу.Очистить();
		ЗадачиПолучены = Ложь;
		
		ДокументОснование = текРезультат[0].ДокументОснование;
		
		текОбъем = ОграничениеПоОбъему;
		ПроверятьОграничениеПоОбъему = ОграничениеПоОбъему <> 0;
		
		мсвСтрок = текРезультат.НайтиСтроки(Новый Структура("ДокументОснование", ДокументОснование));
		КоличествоСтрок = мсвСтрок.Количество();
		
		мсвЗадачи = Новый Массив;
		Для текИндекс = 1 По КоличествоСтрок Цикл
			Строка = мсвСтрок[текИндекс - 1];
			
			Если ПроверятьОграничениеПоОбъему тогда
				сткДанныеКонейнера = усУправлениеСкладомСервер.ПолучитьРазмерКонтейнера(Строка.Ссылка.Контейнер);
				Если (ЗадачиПолучены ИЛИ текИндекс <> КоличествоСтрок) И сткДанныеКонейнера.Объем > текОбъем Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если усУправлениеЗадачами.ПолучитьЗадачуДляИсполнителя(Исполнитель, Строка.Ссылка, Ложь, Неопределено) Тогда
				ЗадачиПолучены = Истина;
				мсвЗадачи.Добавить(Строка.Ссылка);
				
				сткПолей = Новый Структура;
				сткПолей.Вставить("Контейнер",	"Контейнер");
				сткПолей.Вставить("Ячейка",		"ТекущаяЯчейка");
				сткДанныеЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, сткПолей);
				
				НоваяСтрока = тбпЗадачиПеремещенияПоЗаказу.Добавить();
				НоваяСтрока.Ячейка			= сткДанныеЗадачи.Ячейка;
				НоваяСтрока.Контейнер		= сткДанныеЗадачи.Контейнер;
				//++ БПС 30.05.2023 №70597
				НоваяСтрока.ЗаказНаОтгрузку = ДокументОснование;
				//-- БПС 30.05.2023 №70597
				НоваяСтрока.Задача			= Строка.Ссылка;
				
				Если ПроверятьОграничениеПоОбъему Тогда
					текОбъем = текОбъем - сткДанныеКонейнера.Объем;
				КонецЕсли;
			Иначе
				Для Каждого текЗадача Из мсвЗадачи Цикл
					усУправлениеЗадачами.СнятьЗадачуСИсполнителя(Исполнитель, текЗадача.Ссылка, Ложь);
				КонецЦикла;
				мсвЗадачи.Очистить();
				ЗадачиПолучены = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла; 
		
		Если ЗадачиПолучены Тогда
			Элементы.тбпЗадачиПеремещенияПоЗаказу.Видимость 	= Истина;
			Элементы.тбпСоставНачальногоКонтейнера.Видимость 	= Ложь;
			Элементы.тбпПоложениеКонтейнеров.Видимость 			= Ложь;
			Элементы.тбпЗадачиПеремещенияПоЗаказу.Обновить();
			
			текДействиеРм = РегистрыСведений.усТекущееДействиеПользователяРабочегоМеста.СоздатьМенеджерЗаписи();
			текДействиеРм.НомерСеанса 	= НомерСеансаИнформационнойБазы();
			текДействиеРм.РабочийПоток 	= миРабочийПотокПеремещенияКонтейнеров;
			текДействиеРм.Прочитать();
			
			текДействиеРм.НомерСеанса 	= НомерСеансаИнформационнойБазы();
			текДействиеРм.РабочийПоток 	= миРабочийПотокПеремещенияКонтейнеров;
			
			сткДанные = Новый Структура;
			сткДанные.Вставить("Задачи", тбпЗадачиПеремещенияПоЗаказу.Выгрузить().ВыгрузитьКолонку("Задача"));
			
			текДействиеРм.Данные = Новый ХранилищеЗначения(сткДанные);
			текДействиеРм.Сотрудник = Исполнитель;
			текДействиеРм.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
//!ШРВ 07.09.2017 11:44:01 Конец

&НаСервере
Процедура ПриИзмененииНачальногоКонтейнера(НачальныйКонтейнер = Неопределено, ВРежимеУпаковкиМК = Ложь)
	
	//++ БПС 30.05.2023 №70597
	Если ВРежимеУпаковкиМК Тогда
		Если ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
			ПредставлениеКонтейнера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), ТекущийНачальныйКонтейнер);
		Иначе
			ПредставлениеКонтейнера = "";
		КонецЕсли;
		Элементы.ДекорацияКонтрагент.Заголовок = ПредставлениеКонтейнера;
		
		ЗаказНаОтгрузку = Документы.усЗаказНаОтгрузку.ПустаяСсылка();
		
		ОбновитьКонтрольЗаказаНаОтгрузку();
		ОбновитьПланПоЗаказу(, Истина);
						
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			// инициализировать начальные контейнеры
			ЭтаФорма["НачальныйКонтейнер" + Индекс] = Справочники.усКонтейнеры.ПустаяСсылка();
			ЭтаФорма["ЗаполненностьНачальныйКонтейнер" + Индекс] = 0;
			
			// инициализировать конечные контейнеры
			ЭтаФорма["КонечныйКонтейнер" + Индекс] = Справочники.усКонтейнеры.ПустаяСсылка();
			ЭтаФорма["ЗаполненностьКонечныйКонтейнер" + Индекс] = 0;
			
			// установить доступность
			Элементы["НачальныйКонтейнер" + Индекс].Доступность  = Истина;
			Элементы["КонечныйКонтейнер" + Индекс].Доступность = Истина;
			
			Элементы["НачальныйКонтейнер" + Индекс].ТекстНевыбраннойКартинки  = " ";
			Элементы["КонечныйКонтейнер" + Индекс].ТекстНевыбраннойКартинки = " ";
		КонецЦикла;
		
		ТекущийКонечныйКонтейнер = Справочники.усКонтейнеры.ПустаяСсылка();
		КонечныеКонтейнеры.Очистить();
		
		Номенклатура			= Справочники.усНоменклатура.ПустаяСсылка();
		УпаковкаНоменклатуры	= Справочники.усУпаковкиНоменклатуры.ПустаяСсылка();
		СтатусНоменклатуры		= Справочники.усСтатусыНоменклатуры.ПустаяСсылка();
		ПартияНоменклатуры		= Справочники.усПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
			ТекущийЭлементСканирования = "НачальныйКонтейнер";
		Иначе
			ТекущийЭлементСканирования = "Номенклатура";
		КонецЕсли;
		УстановитьТекстПодсказки();
	//-- БПС 30.05.2023 №70597
	Иначе
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			текГруппаФормы = Элементы["ГруппаНачальныйКонтейнер" + Индекс];
			текЭлементФормы = Элементы["НачальныйКонтейнер" + Индекс];
			//Если Неопределено = текЭлементФормы Тогда
			//	текЭлементФормы.ТекстНевыбраннойКартинки = " ";
			//	текГруппаФормы.ЦветФона  = ЦветЗаблокированнойКнопки;
			//Иначе
				текГруппаФормы.ЦветФона  = ЦветНеактивнойКнопки;
			//КонецЕсли;
		КонецЦикла;
		
		Если НачальныйКонтейнер = Неопределено Тогда
			НачальныйКонтейнер = ПолучитьИмяКнопкиНаСервере(ТекущийНачальныйКонтейнер, "НачальныйКонтейнер");
			Если НачальныйКонтейнер = Неопределено Тогда
				НачальныйКонтейнер = "НачальныйКонтейнер1";
				ДобавитьСоответствиеКонтейнеровНаСервере(НачальныйКонтейнер, ТекущийНачальныйКонтейнер, "НачальныйКонтейнер");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
			Элементы[НачальныйКонтейнер].ТекстНевыбраннойКартинки = Строка(ТекущийНачальныйКонтейнер);
			Элементы["Группа" + НачальныйКонтейнер].ЦветФона = ЦветАктивнойКнопки;
		Иначе
			Элементы[НачальныйКонтейнер].ТекстНевыбраннойКартинки = " ";
		КонецЕсли;
		
		ОбновитьЗаполненностьКонтейнеров();
		//УстановитьТекстПодсказки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрольСоставаКонтейнера(Контейнер, КонтрольОтгрузки = Ложь)
	
	// списать состав контейнера
	СоставКонтейнера = усСервисныеФункции.ПолучитьСоставПоКонтейнеру(Контейнер);
	Если Не СоставКонтейнера.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	сткПоложение = РегистрыНакопления.усПоложениеКонтейнеров.ПолучитьПоложениеКонтейнера(Контейнер);
	
	// создать задачу
	Задача = усТСДОсновной.СоздатьЗадачуПересчета(, ?(КонтрольОтгрузки,Перечисления.усТипыЗадачПересчета.КонтрольОтгрузки,Перечисления.усТипыЗадачПересчета.ИнвентаризацияСоставаКонтейнеров), сткПоложение.Ячейка, Контейнер, ЗаказНаОтгрузку, Исполнитель, сткПоложение.МастерКонтейнер);
	
	ТекстОшибки = "";
	Если усУправлениеЗадачами.ВыполнитьДействиеПересчет(Задача, ТекстОшибки) Тогда
		// списать/оприходовать товары в ячейках отбора
		Если АвтоматическиИзменятьСостояниеЯчеекОтбора Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	усЗадачаПересчетТовары.Номенклатура,
			|	усЗадачаПересчетТовары.СтатусНоменклатуры,
			|	усЗадачаПересчетТовары.ПартияНоменклатуры,
			|	СУММА(усЗадачаПересчетТовары.КоличествоПлан - усЗадачаПересчетТовары.КоличествоФакт) КАК Количество
			|ИЗ
			|	Документ.усЗадачаПересчет.Товары КАК усЗадачаПересчетТовары
			|ГДЕ
			|	усЗадачаПересчетТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	усЗадачаПересчетТовары.Номенклатура,
			|	усЗадачаПересчетТовары.СтатусНоменклатуры,
			|	усЗадачаПересчетТовары.ПартияНоменклатуры
			|
			|ИМЕЮЩИЕ
			|	СУММА(усЗадачаПересчетТовары.КоличествоПлан - усЗадачаПересчетТовары.КоличествоФакт) <> 0";
			
			Запрос.УстановитьПараметр("Ссылка", Задача);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				сткВозврат = Обработки.усРабочееМестоОператораУпаковкиОперативное.ВыполнитьДвижениеПоКонтейнеруОтбора(Контейнер, Выборка.Номенклатура, Выборка.СтатусНоменклатуры, Выборка.ПартияНоменклатуры, Выборка.Количество);
			КонецЦикла;
		КонецЕсли;
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|	усКонтрольОтгрузкиОбороты.Номенклатура КАК Номенклатура,
		//|	усКонтрольОтгрузкиОбороты.КоличествоЗапланированоОборот - усКонтрольОтгрузкиОбороты.КоличествоСпланированоОборот КАК Разница
		//|ИЗ
		//|	РегистрНакопления.усКонтрольОтгрузки.Обороты КАК усКонтрольОтгрузкиОбороты
		//|ГДЕ
		//|	усКонтрольОтгрузкиОбороты.ЗаказНаОтгрузку = &ЗаказНаОтгрузку
		//|	И усКонтрольОтгрузкиОбороты.КоличествоЗапланированоОборот > усКонтрольОтгрузкиОбороты.КоличествоСпланированоОборот";
		//
		//Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
		//Результат = Запрос.Выполнить();
		//
		//Если Не Результат.Пустой() тогда
		//	тбзТовары = результат.Выгрузить();
		//	Спланировано = Обработки.усРабочееМестоОператораУпаковкиОперативное.ДопланироватьОтбор(ЗаказНаОтгрузку, Контейнер, тбзТовары);
		//	Допланирование = Истина;
		//	Если Спланировано тогда
		//		ТекстОшибки = "Недостача по товару спланирована к отбору ожидайте завершения сборки";
		//	Иначе
		//		ТекстОшибки = "Товар не найден, завершайте упаковку что есть";
		//	КонецЕсли;
		//КонецЕсли;
	Иначе
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.Статус = Перечисления.усСтатусыЗадач.Отменена;
		ЗадачаОбъект.Записать();
	КонецЕсли;
	
	Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяКнопкиНаСервере(Контейнер, ТипКонтейнера)
	
	Перем РезультатФункции;
	
	СтрокаПоиска = ТаблицаСоответствий.НайтиСтроки(Новый Структура("Контейнер, ТипКонтейнера", Контейнер, ТипКонтейнера));
	Если СтрокаПоиска.Количество() > 0 Тогда 
		РезультатФункции = СтрокаПоиска[0].ИмяКнопки;
	КонецЕсли;
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервере
Процедура ДобавитьСоответствиеКонтейнеровНаСервере(ИмяКнопки, Знач Контейнер = Неопределено, ТипКонтейнера)
	
	Если Контейнер = Неопределено Тогда
		Контейнер = Справочники.усКонтейнеры.ПустаяСсылка();	
	КонецЕсли;
	
	СтрокаПоиска = ТаблицаСоответствий.НайтиСтроки(Новый Структура("ИмяКнопки,ТипКонтейнера", ИмяКнопки, ТипКонтейнера));
	Если СтрокаПоиска.Количество() = 0 Тогда 
		НоваяСтрока = ТаблицаСоответствий.Добавить();
	Иначе
		НоваяСтрока = СтрокаПоиска[0];
		Если НоваяСтрока.Контейнер = Контейнер Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.ИмяКнопки 	  = ИмяКнопки;
	НоваяСтрока.Контейнер 	  = Контейнер;
	НоваяСтрока.ТипКонтейнера = ТипКонтейнера;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонечногоКонтейнера(КонечныйКонтейнер = Неопределено)
	
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		текГруппаФормы = Элементы["ГруппаКонечныйКонтейнер" + Индекс];
		текЭлементФормы = Элементы["ГруппаКонечныйКонтейнер" + Индекс];
		
		//Если Неопределено = текЭлементФормы Тогда
		//	текЭлементФормы.ТекстНевыбраннойКартинки = " ";
		//	текГруппаФормы.ЦветФона  = ЦветЗаблокированнойКнопки;
		//Иначе
			текГруппаФормы.ЦветФона  = ЦветНеактивнойКнопки;
		//КонецЕсли;
	КонецЦикла;
	
	Если КонечныйКонтейнер = Неопределено Тогда
		КонечныйКонтейнер = ПолучитьИмяКнопкиНаСервере(ТекущийКонечныйКонтейнер, "КонечныйКонтейнер");
		Если КонечныйКонтейнер = Неопределено Тогда
			КонечныйКонтейнер = "КонечныйКонтейнер1";
			ДобавитьСоответствиеКонтейнеровНаСервере(КонечныйКонтейнер, ТекущийКонечныйКонтейнер, "КонечныйКонтейнер");
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущийКонечныйКонтейнер) Тогда
		Элементы[КонечныйКонтейнер].ТекстНевыбраннойКартинки = Строка(ТекущийКонечныйКонтейнер);
		Элементы["Группа" + КонечныйКонтейнер].ЦветФона = ЦветАктивнойКнопки;
		
		тбпСоставКонечногоКонтейнера.Параметры.УстановитьЗначениеПараметра("Контейнер", ТекущийКонечныйКонтейнер);
		
		Элементы.ГруппаСоставПечать.ТекущаяСтраница = Элементы.ГруппаСоставКонечногоКонтейнера;
	Иначе
		Элементы[КонечныйКонтейнер].ТекстНевыбраннойКартинки = " ";
		тбпСоставКонечногоКонтейнера.Параметры.УстановитьЗначениеПараметра("Контейнер", Справочники.усКонтейнеры.ПустаяСсылка());	
	КонецЕсли;
	
	Элементы.ГруппаПоложитьВМастерКонтейнер.ЦветФона = ?(ВводитьМастерКонтейнер И ЗначениеЗаполнено(ТекущийКонечныйКонтейнер), ЦветаСтиля.упЦветФонаВыбранногоКонтейнера, ЦветаСтиля.упЦветФонаНевыбранногоКонтейнера);
	Элементы.ДействиеПоложитьВМастерКонтейнер.ЦветРамки = ?(ВводитьМастерКонтейнер И ЗначениеЗаполнено(ТекущийКонечныйКонтейнер), ЦветаСтиля.упЦветРамкиВыбранногоКонтейнера, ЦветаСтиля.упЦветРамкиНевыбранногоКонтейнера);
	
	ОбновитьЗаполненностьКонтейнеров();
	УстановитьТекстПодсказки();
	
КонецПроцедуры

&НаСервере
Процедура ПоложитьВМастерКонтейнерНаСервере()
	
	УстановитьТекстПодсказки();
	
	// создать задачу
	сткПоложениеКонтейнера = РегистрыНакопления.усПоложениеКонтейнеров.ПолучитьПоложениеКонтейнера(ТекущийКонечныйКонтейнер);
	Задача = усТСДОсновной.СоздатьЗадачуПеремещенияКонтейнера(, Перечисления.усТипыЗадач.Упаковка, ?(ЗначениеЗаполнено(сткПоложениеКонтейнера.Ячейка), сткПоложениеКонтейнера.Ячейка, Ячейка), сткПоложениеКонтейнера.МастерКонтейнер, ТекущийКонечныйКонтейнер, ЗаказНаОтгрузку, Исполнитель);
	
	// выполнить задачу
	Попытка
		ТекстОшибки = "";
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		усУправлениеЗадачами.ВыполнитьДействиеПоложитьЦелыйКонтейнер(Задача, Ячейка, МастерКонтейнер, -1, ТекстОшибки,, Ложь);
		Если ТекстОшибки = "" Тогда
			ПриИзмененииКонечногоКонтейнера();
	        Возврат;
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	КонецПопытки;
	
	Если ТекстОшибки <> "" Тогда
		Ошибка = "";
		усУправлениеЗадачами.ОтменитьЗадачуПеремещениеКонтейнера(Задача, Ошибка);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
// Процедура обновляет значение реквизита формы "КонтрольЗаказа". Значение выводится на форму
// в виде индикатора, показывающего процент упакованных единиц по заказу на отгрузку
//
Процедура ОбновитьКонтрольЗаказаНаОтгрузку()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	усПоложениеКонтейнеровОстатки.Ячейка КАК Ячейка,
	|	усПоложениеКонтейнеровОстатки.Контейнер
	|ПОМЕСТИТЬ втКонтейнеры
	|ИЗ
	|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(, Контейнер.ДокументПривязки = &ЗаказНаОтгрузку) КАК усПоложениеКонтейнеровОстатки
	|ГДЕ
	|	усПоложениеКонтейнеровОстатки.КоличествоОстаток = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКонтейнеры.Ячейка КАК Ячейка,
	|	втКонтейнеры.Контейнер
	|ПОМЕСТИТЬ втВложенныеКонтейнеры
	|ИЗ
	|	втКонтейнеры КАК втКонтейнеры
	|ГДЕ
	|	втКонтейнеры.Ячейка ССЫЛКА Справочник.усКонтейнеры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	усПоложениеКонтейнеровОстатки.Контейнер КАК МастерКонтейнер
	|ПОМЕСТИТЬ втМастерКонтейнеры
	|ИЗ
	|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
	|			,
	|			Контейнер В
	|				(ВЫБРАТЬ
	|					втВложенныеКонтейнеры.Ячейка
	|				ИЗ
	|					втВложенныеКонтейнеры КАК втВложенныеКонтейнеры)) КАК усПоложениеКонтейнеровОстатки
	|ГДЕ
	|	усПоложениеКонтейнеровОстатки.КоличествоОстаток = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МастерКонтейнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКонтейнеры.Контейнер КАК Контейнер
	|ПОМЕСТИТЬ втПоложениеКонтейнеров
	|ИЗ
	|	втКонтейнеры КАК втКонтейнеры
	|ГДЕ
	|	втКонтейнеры.Ячейка ССЫЛКА Справочник.усЯчейки
	|	И втКонтейнеры.Контейнер.Упакован
	|	И втКонтейнеры.Контейнер.ТипКонтейнера.КонтейнерУпаковки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втВложенныеКонтейнеры.Контейнер
	|ИЗ
	|	втМастерКонтейнеры КАК втМастерКонтейнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВложенныеКонтейнеры КАК втВложенныеКонтейнеры
	|		ПО втМастерКонтейнеры.МастерКонтейнер = втВложенныеКонтейнеры.Ячейка
	|ГДЕ
	|	(втМастерКонтейнеры.МастерКонтейнер.Упакован
	|			ИЛИ втВложенныеКонтейнеры.Контейнер.Упакован)
	|	И (втМастерКонтейнеры.МастерКонтейнер.ТипКонтейнера.КонтейнерУпаковки
	|			ИЛИ втВложенныеКонтейнеры.Контейнер.ТипКонтейнера.КонтейнерУпаковки)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контейнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	усОстаткиТоваровОстатки.Контейнер КАК Контейнер,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры,
	|	усОстаткиТоваровОстатки.КоличествоОстаток
	|ПОМЕСТИТЬ втСостав
	|ИЗ
	|	РегистрНакопления.усОстаткиТоваров.Остатки(
	|			,
	|			Контейнер В
	|				(ВЫБРАТЬ
	|					втПоложениеКонтейнеров.Контейнер
	|				ИЗ
	|					втПоложениеКонтейнеров КАК втПоложениеКонтейнеров)) КАК усОстаткиТоваровОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контейнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втСостав.КоличествоОстаток) КАК Количество
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	втПоложениеКонтейнеров КАК втПоложениеКонтейнеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСостав КАК втСостав
	|		ПО втПоложениеКонтейнеров.Контейнер = втСостав.Контейнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	усКонтрольОтгрузкиОбороты.КоличествоЗапланированоОборот КАК Запланировано
	|ПОМЕСТИТЬ втПлан
	|ИЗ
	|	РегистрНакопления.усКонтрольОтгрузки.Обороты(&НачПериода, , , ЗаказНаОтгрузку = &ЗаказНаОтгрузку) КАК усКонтрольОтгрузкиОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втСостояние.Упаковано) КАК Упаковано,
	|	СУММА(втСостояние.Запланировано) КАК Запланировано
	|ИЗ
	|	(ВЫБРАТЬ
	|		втОстатки.Количество КАК Упаковано,
	|		0 КАК Запланировано
	|	ИЗ
	|		втОстатки КАК втОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		втПлан.Запланировано
	|	ИЗ
	|		втПлан КАК втПлан) КАК втСостояние";
	
	//++ БПС 30.05.2023 №70597
	Если Не ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
		КонтрольЗаказа = 0;
	//-- БПС 30.05.2023 №70597
	Иначе
		Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
		Запрос.УстановитьПараметр("НачПериода", ЗаказНаОтгрузку.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КонтрольЗаказа = ?(Выборка.Запланировано, Мин((Выборка.Упаковано/Выборка.Запланировано)*100, 100), 0);
		Иначе
			КонтрольЗаказа = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаполненностьКонтейнеров()
	
	мКонтейнеры = Новый Массив;
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		//!ШРВ 06.09.2017 15:47:18 Начало
		//Если ЗначениеЗаполнено(ЭтаФорма["НачальныйКонтейнер" + Индекс]) Тогда
		//	мКонтейнеры.Добавить(ЭтаФорма["НачальныйКонтейнер" + Индекс]);
		//КонецЕсли;
		//!ШРВ 06.09.2017 15:47:18 Конец
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			мКонтейнеры.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
		КонецЕсли;
 	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	усОстаткиТоваровОстатки.Контейнер,
	|	СУММА(ВЫБОР
	|			КОГДА усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура.ВложениеДругВДруга
	|				ТОГДА усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура.Объем + (усОстаткиТоваровОстатки.КоличествоОстаток - 1) * усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура.ДобавочныйОбъемПриВложении
	|			ИНАЧЕ усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура.Объем * усОстаткиТоваровОстатки.КоличествоОстаток
	|		КОНЕЦ) КАК ОбъемТовара,
	|	СУММА(усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура.Масса * усОстаткиТоваровОстатки.КоличествоОстаток) КАК МассаТовара
	|ПОМЕСТИТЬ втОбъемТовара
	|ИЗ
	|	РегистрНакопления.усОстаткиТоваров.Остатки(, Контейнер В (&Контейнеры)) КАК усОстаткиТоваровОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	усОстаткиТоваровОстатки.Контейнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъемТовара.Контейнер,
	|	втОбъемТовара.Контейнер.ТипКонтейнера.Объем КАК ОбъемКонтейнера,
	|	втОбъемТовара.Контейнер.ТипКонтейнера.ДопустимаяМасса КАК МассаКонтейнера,
	|	втОбъемТовара.ОбъемТовара,
	|	втОбъемТовара.МассаТовара
	|ИЗ
	|	втОбъемТовара КАК втОбъемТовара";
	
	Запрос.УстановитьПараметр("Контейнеры", мКонтейнеры);
	тзЗаполненность = Запрос.Выполнить().Выгрузить();
	
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		//!ШРВ 06.09.2017 15:47:31 Начало
		// начальные контейнеры
		//ЭтаФорма["ЗаполненностьНачальныйКонтейнер" + Индекс] = 0;
		//Если ЗначениеЗаполнено(ЭтаФорма["НачальныйКонтейнер" + Индекс]) Тогда
		//	НайденнаяСтрока = тзЗаполненность.Найти(ЭтаФорма["НачальныйКонтейнер" + Индекс], "Контейнер");
		//	Если Не НайденнаяСтрока = Неопределено Тогда
		//		ЭтаФорма["ЗаполненностьНачальныйКонтейнер" + Индекс] = ?(НайденнаяСтрока.ОбъемКонтейнера И НайденнаяСтрока.ОбъемТовара, Мин(100*НайденнаяСтрока.ОбъемТовара/НайденнаяСтрока.ОбъемКонтейнера, 100), 1);
		//	КонецЕсли;
		//КонецЕсли;
		//!ШРВ 06.09.2017 15:47:31 Конец		
		
		// конечные контейнеры
		ЭтаФорма["ЗаполненностьКонечныйКонтейнер" + Индекс] = 0;
		Элементы["ЗаполненностьКонечныйКонтейнер" + Индекс].Заголовок = " ";
		
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			НайденнаяСтрока = тзЗаполненность.Найти(ЭтаФорма["КонечныйКонтейнер" + Индекс], "Контейнер");
			Если Не НайденнаяСтрока = Неопределено Тогда
				ЭтаФорма["ЗаполненностьКонечныйКонтейнер" + Индекс] = ?(НайденнаяСтрока.ОбъемКонтейнера И НайденнаяСтрока.ОбъемТовара, Мин(100*НайденнаяСтрока.ОбъемТовара/НайденнаяСтрока.ОбъемКонтейнера, 100), 1);
				Элементы["ЗаполненностьКонечныйКонтейнер" + Индекс].Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Масса: %1 из %2'"), НайденнаяСтрока.МассаТовара, НайденнаяСтрока.МассаКонтейнера);
			КонецЕсли;
		КонецЕсли;
 	КонецЦикла;
	
	//ОбновитьПланПоЗаказу();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПланПоЗаказу(ПоНачальному = Ложь, ВРежимеУпаковкиМК = Ложь)
	
	//++ БПС 30.05.2023 №70597
	тбпПланПоЗаказу.Очистить();
	
	Если ВРежимеУпаковкиМК Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	усПоложениеКонтейнеров.Контейнер КАК Контейнер
		|ПОМЕСТИТЬ втНачКонт
		|ИЗ
		|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
		|			,
		|			Ячейка = &Ячейка
		|				И Контейнер = &Контейнер
		|				И НЕ Контейнер В (&КонечныеКонтейнеры)) КАК усПоложениеКонтейнеров
		|ГДЕ
		|	усПоложениеКонтейнеров.КоличествоОстаток = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усПоложениеКонтейнеров.Ячейка КАК МастерКонтейнер,
		|	усПоложениеКонтейнеров.Контейнер
		|ПОМЕСТИТЬ втВложенныеКонтейнеры
		|ИЗ
		|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
		|			,
		|			Ячейка В
		|				(ВЫБРАТЬ
		|					втНачКонт.Контейнер
		|				ИЗ
		|					втНачКонт)) КАК усПоложениеКонтейнеров
		|ГДЕ
		|	усПоложениеКонтейнеров.КоличествоОстаток = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усОстаткиТоваровОстатки.Контейнер.ДокументПривязки КАК ЗаказНаОтгрузку,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры КАК СтатусНоменклатуры,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры КАК ПартияНоменклатуры,
		|	СУММА(усОстаткиТоваровОстатки.КоличествоОстаток) КАК Количество
		|ПОМЕСТИТЬ втФакт
		|ИЗ
		|	РегистрНакопления.усОстаткиТоваров.Остатки(
		|			,
		|			Контейнер В
		|				(ВЫБРАТЬ
		|					втВложенныеКонтейнеры.Контейнер
		|				ИЗ
		|					втВложенныеКонтейнеры)) КАК усОстаткиТоваровОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	усОстаткиТоваровОстатки.Контейнер.ДокументПривязки,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаОтгрузку,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усСтрокаЗаказаНаОтгрузку.Владелец КАК ЗаказНаОтгрузку,
		|	усСтрокаЗаказаНаОтгрузку.Номенклатура КАК Номенклатура,
		|	усСтрокаЗаказаНаОтгрузку.СтатусНоменклатуры КАК СтатусНоменклатуры,
		|	усСтрокаЗаказаНаОтгрузку.ПартияНоменклатуры КАК ПартияНоменклатуры,
		|	усСтрокаЗаказаНаОтгрузку.Количество КАК Количество,
		|	усСтрокаЗаказаНаОтгрузку.ШтрихкодШтуки КАК ШтрихкодШтуки,
		|	усСтрокаЗаказаНаОтгрузку.ШтрихкодКванта КАК ШтрихкодКванта,
		|	усСтрокаЗаказаНаОтгрузку.КвантОтгрузки КАК КвантОтгрузки,
		|	усСтрокаЗаказаНаОтгрузку.КомментарийКСтроке КАК КомментарийКСтроке
		|ПОМЕСТИТЬ втСтрокиЗнО
		|ИЗ
		|	втФакт КАК втФакт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.усСтрокаЗаказаНаОтгрузку КАК усСтрокаЗаказаНаОтгрузку
		|		ПО втФакт.ЗаказНаОтгрузку = усСтрокаЗаказаНаОтгрузку.Владелец
		|			И втФакт.Номенклатура = усСтрокаЗаказаНаОтгрузку.Номенклатура
		|			И (НЕ усСтрокаЗаказаНаОтгрузку.ПометкаУдаления)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаОтгрузку,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усКонтрольОтгрузкиОбороты.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	усКонтрольОтгрузкиОбороты.Номенклатура КАК Номенклатура,
		|	усКонтрольОтгрузкиОбороты.СтатусНоменклатуры КАК СтатусНоменклатуры,
		|	усКонтрольОтгрузкиОбороты.ПартияНоменклатуры КАК ПартияНоменклатуры,
		|	усКонтрольОтгрузкиОбороты.КоличествоЗапланированоОборот КАК КоличествоЗапланированоОборот
		|ПОМЕСТИТЬ втКонтрольОтгрузкиЗнО
		|ИЗ
		|	втФакт КАК втФакт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.усКонтрольОтгрузки.Обороты(
		|				,
		|				,
		|				,
		|				ЗаказНаОтгрузку В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						втФакт.ЗаказНаОтгрузку
		|					ИЗ
		|						втФакт)) КАК усКонтрольОтгрузкиОбороты
		|		ПО втФакт.ЗаказНаОтгрузку = усКонтрольОтгрузкиОбороты.ЗаказНаОтгрузку
		|			И втФакт.Номенклатура = усКонтрольОтгрузкиОбороты.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаОтгрузку,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втФакт.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	втФакт.Номенклатура КАК Номенклатура,
		|	втФакт.СтатусНоменклатуры КАК СтатусНоменклатуры,
		|	втФакт.ПартияНоменклатуры КАК ПартияНоменклатуры,
		|	усСпецификация.Ссылка КАК Спецификация
		|ПОМЕСТИТЬ втСпецификации
		|ИЗ
		|	втФакт КАК втФакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.усСпецификация.Комплектующие КАК усСпецификацияКомплектующие
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.усСпецификация КАК усСпецификация
		|			ПО усСпецификацияКомплектующие.Ссылка = усСпецификация.Ссылка
		|				И (НЕ усСпецификация.ПометкаУдаления)
		|		ПО втФакт.Номенклатура = усСпецификацияКомплектующие.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаОтгрузку,
		|	Спецификация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСпецификации.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	втСпецификации.Номенклатура КАК Номенклатура,
		|	втСпецификации.СтатусНоменклатуры,
		|	втСпецификации.ПартияНоменклатуры,
		|	усСтрокаЗаказаНаОтгрузку.ШтрихкодШтуки
		|ПОМЕСТИТЬ втСпецификацияЗнО
		|ИЗ
		|	втСпецификации КАК втСпецификации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.усСтрокаЗаказаНаОтгрузку КАК усСтрокаЗаказаНаОтгрузку
		|		ПО втСпецификации.ЗаказНаОтгрузку = усСтрокаЗаказаНаОтгрузку.Владелец
		|			И втСпецификации.Спецификация = усСтрокаЗаказаНаОтгрузку.Спецификация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаОтгрузку,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втФакт.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	втФакт.Номенклатура КАК Номенклатура,
		|	втФакт.Номенклатура.Артикул КАК НоменклатураАртикул,
		|	втФакт.Номенклатура.МеткаСклада КАК НоменклатураМеткаСклада,
		|	втФакт.СтатусНоменклатуры КАК СтатусНоменклатуры,
		|	втФакт.ПартияНоменклатуры КАК ПартияНоменклатуры,
		|	втФакт.Количество КАК Количество,
		|	ЕСТЬNULL(втКонтрольОтгрузкиЗнО.КоличествоЗапланированоОборот, 0) КАК КоличествоПоЗаказу,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втСтрокиЗнО.ШтрихкодШтуки, """") = """"
		|				И ЕСТЬNULL(втСпецификацияЗнО.ШтрихкодШтуки, """") = """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ТребуетсяМаркировкаШтуки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втСтрокиЗнО.ШтрихкодКванта, """") = """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ТребуетсяМаркировкаКванта,
		|	ЕСТЬNULL(втСтрокиЗнО.КвантОтгрузки, 0) КАК КвантОтгрузки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втСтрокиЗнО.КвантОтгрузки, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ втСтрокиЗнО.Количество / втСтрокиЗнО.КвантОтгрузки
		|	КОНЕЦ КАК КоличествоКвантов,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втСтрокиЗнО.КомментарийКСтроке, """") = """"
		|			ТОГДА """"
		|		ИНАЧЕ втСтрокиЗнО.КомментарийКСтроке
		|	КОНЕЦ КАК КомментарийКСтроке
		|ИЗ
		|	втФакт КАК втФакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСтрокиЗнО КАК втСтрокиЗнО
		|		ПО втФакт.ЗаказНаОтгрузку = втСтрокиЗнО.ЗаказНаОтгрузку
		|			И втФакт.Номенклатура = втСтрокиЗнО.Номенклатура
		|			И (втСтрокиЗнО.СтатусНоменклатуры В (втФакт.СтатусНоменклатуры, ЗНАЧЕНИЕ(Справочник.усСтатусыНоменклатуры.ПустаяСсылка)))
		|			И (втСтрокиЗнО.ПартияНоменклатуры В (втФакт.ПартияНоменклатуры, ЗНАЧЕНИЕ(Справочник.усПартииНоменклатуры.ПустаяСсылка)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтрольОтгрузкиЗнО КАК втКонтрольОтгрузкиЗнО
		|		ПО втФакт.ЗаказНаОтгрузку = втКонтрольОтгрузкиЗнО.ЗаказНаОтгрузку
		|			И втФакт.Номенклатура = втКонтрольОтгрузкиЗнО.Номенклатура
		|			И (втКонтрольОтгрузкиЗнО.СтатусНоменклатуры В (втФакт.СтатусНоменклатуры, ЗНАЧЕНИЕ(Справочник.усСтатусыНоменклатуры.ПустаяСсылка)))
		|			И (втКонтрольОтгрузкиЗнО.ПартияНоменклатуры В (втФакт.ПартияНоменклатуры, ЗНАЧЕНИЕ(Справочник.усПартииНоменклатуры.ПустаяСсылка)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСпецификацияЗнО КАК втСпецификацияЗнО
		|		ПО втФакт.ЗаказНаОтгрузку = втСпецификацияЗнО.ЗаказНаОтгрузку
		|			И втФакт.Номенклатура = втСпецификацияЗнО.Номенклатура
		|			И (втСпецификацияЗнО.СтатусНоменклатуры В (втФакт.СтатусНоменклатуры, ЗНАЧЕНИЕ(Справочник.усСтатусыНоменклатуры.ПустаяСсылка)))
		|			И (втСпецификацияЗнО.ПартияНоменклатуры В (втФакт.ПартияНоменклатуры, ЗНАЧЕНИЕ(Справочник.усПартииНоменклатуры.ПустаяСсылка)))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураАртикул");
		
		Если ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
			мКонтейнеры = Новый Массив;
			Для Индекс = 1 По КоличествоКонтейнеров Цикл
				Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
					мКонтейнеры.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
				КонецЕсли;
			КонецЦикла;
			Для Каждого ДанныеСтроки Из КонечныеКонтейнеры Цикл
				Если мКонтейнеры.Найти(ДанныеСтроки.Контейнер) = Неопределено Тогда
					мКонтейнеры.Добавить(ДанныеСтроки.Контейнер);
				КонецЕсли;
			КонецЦикла;
			
			Запрос.УстановитьПараметр("КонечныеКонтейнеры", мКонтейнеры);
			Запрос.УстановитьПараметр("Контейнер", ТекущийНачальныйКонтейнер);
			Запрос.УстановитьПараметр("Ячейка", Ячейка);
			тбпПланПоЗаказу.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;
	
		Элементы.тбпПланПоЗаказу.Видимость = Истина;
		Элементы.тбпПланПоЗаказу.Обновить();
		
		Элементы.тбпСоставНачальногоКонтейнера.Видимость = Ложь;
		Элементы.тбпПоложениеКонтейнеров.Видимость 		 = Ложь;
		
		Элементы.ГруппаПланИлиСостав.Заголовок = "Непроконтролированный план по контейнеру";
	//-- БПС 30.05.2023 №70597
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	усПоложениеКонтейнеров.Контейнер КАК Контейнер
		|ПОМЕСТИТЬ втНачКонт
		|ИЗ
		|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
		|			,
		|			Ячейка = &Ячейка
		|				И Контейнер.ДокументПривязки = &ЗаказНаОтгрузку
		|				И НЕ Контейнер В (&КонечныеКонтейнеры)
		|				И &УсловиеНачальныйКонтейнер) КАК усПоложениеКонтейнеров
		|ГДЕ
		|	усПоложениеКонтейнеров.КоличествоОстаток = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры КАК СтатусНоменклатуры,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры КАК ПартияНоменклатуры,
		|	СУММА(усОстаткиТоваровОстатки.КоличествоОстаток) КАК Количество,
		|	усОстаткиТоваровОстатки.Контейнер.ДокументПривязки КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ втФакт
		|ИЗ
		|	РегистрНакопления.усОстаткиТоваров.Остатки(
		|			,
		|			Контейнер В
		|				(ВЫБРАТЬ
		|					втНачКонт.Контейнер
		|				ИЗ
		|					втНачКонт)) КАК усОстаткиТоваровОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры,
		|	усОстаткиТоваровОстатки.Контейнер.ДокументПривязки
		|;
		|
		//++ Юдинцев ВС 03.02.23 63216
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втФакт.Номенклатура,
		|	втФакт.СтатусНоменклатуры,
		|	втФакт.ПартияНоменклатуры,
		|	втФакт.ЗаказНаОтгрузку,
		|	усСпецификация.Ссылка КАК Спецификация
		|ПОМЕСТИТЬ втСпецификации
		|ИЗ
		|	втФакт КАК втФакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.усСпецификация.Комплектующие КАК усСпецификацияКомплектующие
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.усСпецификация КАК усСпецификация
		|			ПО усСпецификацияКомплектующие.Ссылка = усСпецификация.Ссылка
		|				И (НЕ усСпецификация.ПометкаУдаления)
		|		ПО втФакт.Номенклатура = усСпецификацияКомплектующие.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСпецификации.Номенклатура,
		|	втСпецификации.СтатусНоменклатуры,
		|	втСпецификации.ПартияНоменклатуры,
		|	втСпецификации.ЗаказНаОтгрузку,
		|	усСтрокаЗаказаНаОтгрузку.ШтрихкодШтуки
		|ПОМЕСТИТЬ втСпецификацияЗаказаНаОтгрузку
		|ИЗ
		|	втСпецификации КАК втСпецификации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.усСтрокаЗаказаНаОтгрузку КАК усСтрокаЗаказаНаОтгрузку
		|		ПО втСпецификации.ЗаказНаОтгрузку = усСтрокаЗаказаНаОтгрузку.Владелец
		|			И втСпецификации.Спецификация = усСтрокаЗаказаНаОтгрузку.Спецификация
		|			И (усСтрокаЗаказаНаОтгрузку.СтатусНоменклатуры В (втСпецификации.СтатусНоменклатуры, ЗНАЧЕНИЕ(Справочник.усСтатусыНоменклатуры.ПустаяСсылка)))
		|;
		//-- Юдинцев ВС 03.02.23 63216
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усПоложениеКонтейнеров.Контейнер КАК Контейнер
		|ПОМЕСТИТЬ втКонтейнерыПоЗаказу
		|ИЗ
		|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
		|			,
		|			Контейнер.ДокументПривязки = &ЗаказНаОтгрузку
		|				И Контейнер.Упакован) КАК усПоложениеКонтейнеров
		|ГДЕ
		|	усПоложениеКонтейнеров.КоличествоОстаток = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура КАК Номенклатура,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры КАК СтатусНоменклатуры,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры КАК ПартияНоменклатуры,
		|	СУММА(усОстаткиТоваровОстатки.КоличествоОстаток) КАК Количество,
		|	усОстаткиТоваровОстатки.Контейнер.ДокументПривязки КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ втФактПоЗаказу
		|ИЗ
		|	РегистрНакопления.усОстаткиТоваров.Остатки(
		|			,
		|			Контейнер В
		|				(ВЫБРАТЬ
		|					втКонтейнерыПоЗаказу.Контейнер
		|				ИЗ
		|					втКонтейнерыПоЗаказу)) КАК усОстаткиТоваровОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры,
		|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры,
		|	усОстаткиТоваровОстатки.Контейнер.ДокументПривязки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втФакт.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	втФакт.Номенклатура КАК Номенклатура,
		|	втФакт.СтатусНоменклатуры КАК СтатусНоменклатуры,
		|	втФакт.ПартияНоменклатуры КАК ПартияНоменклатуры,
		|	втФакт.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(усСтрокаЗаказаНаОтгрузку.ШтрихкодШтуки, """") = """"
		//++ Юдинцев ВС 03.02.23 63216
		|				И ЕСТЬNULL(втСпецификацияЗаказаНаОтгрузку.ШтрихкодШтуки, """") = """"
		//-- Юдинцев ВС 03.02.23 63216
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ТребуетсяМаркировкаШтуки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(усСтрокаЗаказаНаОтгрузку.ШтрихкодКванта, """") = """"
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ТребуетсяМаркировкаКванта,
		|	ЕСТЬNULL(усСтрокаЗаказаНаОтгрузку.КвантОтгрузки, 0) КАК КвантОтгрузки,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(усСтрокаЗаказаНаОтгрузку.КвантОтгрузки, 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ усСтрокаЗаказаНаОтгрузку.Количество / усСтрокаЗаказаНаОтгрузку.КвантОтгрузки
		|	КОНЕЦ КАК КоличествоКвантов,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(усСтрокаЗаказаНаОтгрузку.КомментарийКСтроке, """") = """"
		|			ТОГДА """"
		|		ИНАЧЕ усСтрокаЗаказаНаОтгрузку.КомментарийКСтроке
		|	КОНЕЦ КАК КомментарийКСтроке,
		|	втФакт.Номенклатура.МеткаСклада КАК НоменклатураМеткаСклада,
		|	усКонтрольОтгрузкиОбороты.КоличествоЗапланированоОборот КАК КоличествоПоЗаказу,
		|	втФакт.Номенклатура.Артикул КАК НоменклатураАртикул
		|ИЗ
		|	втФакт КАК втФакт
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.усСтрокаЗаказаНаОтгрузку КАК усСтрокаЗаказаНаОтгрузку
		|		ПО втФакт.ЗаказНаОтгрузку = усСтрокаЗаказаНаОтгрузку.Владелец
		|			И втФакт.Номенклатура = усСтрокаЗаказаНаОтгрузку.Номенклатура
		|			И (усСтрокаЗаказаНаОтгрузку.СтатусНоменклатуры В (втФакт.СтатусНоменклатуры, ЗНАЧЕНИЕ(Справочник.усСтатусыНоменклатуры.ПустаяСсылка)))
		|			И (усСтрокаЗаказаНаОтгрузку.ПартияНоменклатуры В (втФакт.ПартияНоменклатуры, ЗНАЧЕНИЕ(Справочник.усПартииНоменклатуры.ПустаяСсылка)))
		|			И (НЕ усСтрокаЗаказаНаОтгрузку.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.усКонтрольОтгрузки.Обороты(, , , ЗаказНаОтгрузку = &ЗаказНаОтгрузку) КАК усКонтрольОтгрузкиОбороты
		|		ПО втФакт.ЗаказНаОтгрузку = усКонтрольОтгрузкиОбороты.ЗаказНаОтгрузку
		|			И втФакт.Номенклатура = усКонтрольОтгрузкиОбороты.Номенклатура
		|			И (усКонтрольОтгрузкиОбороты.СтатусНоменклатуры В (втФакт.СтатусНоменклатуры, ЗНАЧЕНИЕ(Справочник.усСтатусыНоменклатуры.ПустаяСсылка)))
		|			И (усКонтрольОтгрузкиОбороты.ПартияНоменклатуры В (втФакт.ПартияНоменклатуры, ЗНАЧЕНИЕ(Справочник.усПартииНоменклатуры.ПустаяСсылка)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ втФактПоЗаказу КАК втФактПоЗаказу
		|		ПО втФакт.ЗаказНаОтгрузку = втФактПоЗаказу.ЗаказНаОтгрузку
		|			И втФакт.Номенклатура = втФактПоЗаказу.Номенклатура
		|			И втФакт.СтатусНоменклатуры = втФактПоЗаказу.СтатусНоменклатуры
		|			И втФакт.ПартияНоменклатуры = втФактПоЗаказу.ПартияНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСпецификацияЗаказаНаОтгрузку КАК втСпецификацияЗаказаНаОтгрузку
		//++ Юдинцев ВС 03.02.23 63216
		|		ПО втФакт.ЗаказНаОтгрузку = втСпецификацияЗаказаНаОтгрузку.ЗаказНаОтгрузку
		|			И втФакт.Номенклатура = втСпецификацияЗаказаНаОтгрузку.Номенклатура
		|			И втФакт.СтатусНоменклатуры = втСпецификацияЗаказаНаОтгрузку.СтатусНоменклатуры
		|			И втФакт.ПартияНоменклатуры = втСпецификацияЗаказаНаОтгрузку.ПартияНоменклатуры
		//-- Юдинцев ВС 03.02.23 63216
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураАртикул");
		
		Если ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
			мКонтейнеры = Новый Массив;
			Для Индекс = 1 По КоличествоКонтейнеров Цикл
				Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
					мКонтейнеры.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
				КонецЕсли;
			КонецЦикла;
			Для Каждого ДанныеСтроки Из КонечныеКонтейнеры Цикл
				Если мКонтейнеры.Найти(ДанныеСтроки.Контейнер) = Неопределено Тогда
					мКонтейнеры.Добавить(ДанныеСтроки.Контейнер);
				КонецЕсли;
			КонецЦикла;
			Запрос.УстановитьПараметр("КонечныеКонтейнеры", мКонтейнеры);
			//!ШРВ 06.09.2017 17:02:18 Начало
			//Если ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
			//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Контейнер", "Контейнер <> &Контейнер");
			//	Запрос.УстановитьПараметр("Контейнер", ТекущийНачальныйКонтейнер);
			//Иначе
			//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Контейнер", "ИСТИНА");
			//КонецЕсли;	
			//!ШРВ 06.09.2017 17:02:18 Конец
			Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
			Запрос.УстановитьПараметр("Ячейка", Ячейка);
			
			//!ШРВ 06.10.2017 12:30:23 Начало
			Если ПоНачальному Тогда
			 	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНачальныйКонтейнер", "Контейнер = &Контейнер");
				Запрос.УстановитьПараметр("Контейнер", ТекущийНачальныйКонтейнер);
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНачальныйКонтейнер", ?(Элементы.НеОтображатьУпакованныйТовар.Пометка, "НЕ Контейнер.Упакован", "ИСТИНА"));
			КонецЕсли;
			//!ШРВ 06.10.2017 12:30:23 Конец
			
			тбпПланПоЗаказу.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		
		//!ШРВ 06.10.2017 12:35:13 Начало
		Если ПоНачальному = Ложь Тогда
			Элементы.ГруппаПланИлиСоставСтраницы.ТекущаяСтраница  = Элементы.ГруппаПланПоЗаказу;
		   	Элементы.ДействиеЗавершитьКонечныйКонтейнер.Видимость = Истина;
		КонецЕсли;
		//!ШРВ 06.10.2017 12:35:13 Конец
		
		Если ОтображатьСоставКонтейнера Тогда
			Элементы.тбпПланПоЗаказу.Видимость 				 = Ложь;
			Элементы.тбпСоставНачальногоКонтейнера.Видимость = Истина;
			Запрос.Текст =	
			"ВЫБРАТЬ
			|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура КАК Номенклатура,
			|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры КАК СтатусНоменклатуры,
			|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры КАК ПартияНоменклатуры,
			|	усОстаткиТоваровОстатки.КоличествоОстаток КАК Количество
			|ИЗ
			|	РегистрНакопления.усОстаткиТоваров.Остатки(, &Контейнер) КАК усОстаткиТоваровОстатки
			|ГДЕ
			|	усОстаткиТоваровОстатки.КоличествоОстаток > 0";
			
			Если ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Контейнер", "Контейнер = &Контейнер");
				Запрос.УстановитьПараметр("Контейнер", ТекущийНачальныйКонтейнер);
				Элементы.ГруппаПланИлиСостав.Заголовок = "Состав контейнера";
				Элементы.тбпПоложениеКонтейнеров.Видимость = Ложь;
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Контейнер", "ЛОЖЬ");
				Элементы.ГруппаПланИлиСостав.Заголовок = "Положение контейнеров по заказу";
				Элементы.тбпПоложениеКонтейнеров.Видимость = Истина;
			КонецЕсли;
			
			тбпСоставНачальногоКонтейнера.Загрузить(Запрос.Выполнить().Выгрузить());
			Элементы.тбпСоставНачальногоКонтейнера.Обновить();
		Иначе
			Элементы.тбпПланПоЗаказу.Видимость = Истина;
			Элементы.тбпПланПоЗаказу.Обновить();
			
			Элементы.тбпСоставНачальногоКонтейнера.Видимость = Ложь;
			Элементы.тбпПоложениеКонтейнеров.Видимость 		 = Ложь;
			
			Элементы.ГруппаПланИлиСостав.Заголовок = "Непроконтролированный план по заказу";
		КонецЕсли;
	КонецЕсли;
	
	//++ БПС 30.05.2023 №70597
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		сткОтбор = Новый Структура("Номенклатура", Номенклатура);
		Если ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
			сткОтбор.Вставить("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
		КонецЕсли;
		НайденныеСтроки = тбпПланПоЗаказу.НайтиСтроки(сткОтбор);
		Если НайденныеСтроки.Количество() Тогда
			Элементы.тбпПланПоЗаказу.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	//-- БПС 30.05.2023 №70597
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСоставНачальногоКонтейнера()
	
	СоставКонтейнера = усСервисныеФункции.ПолучитьСоставПоКонтейнеру(ТекущийНачальныйКонтейнер,,
			Номенклатура, ?(ЗначениеЗаполнено(СтатусНоменклатуры), СтатусНоменклатуры, Неопределено), ?(ЗначениеЗаполнено(ПартияНоменклатуры), ПартияНоменклатуры, Неопределено));
			
	Если СоставКонтейнера.Количество() Тогда
		СтатусНоменклатуры = СоставКонтейнера[0].СтатусНоменклатуры;
		ПартияНоменклатуры = СоставКонтейнера[0].ПартияНоменклатуры;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВводКоличества()
	
	//Если ИспользуетсяУчетПартийТовара И ВестиПартионныйУчет И НЕ ЗначениеЗаполнено(ПартияНоменклатуры) тогда
	//	ТекстОшибки = НСтр("ru = 'Не введена партия номенклатуры'");
	//	Возврат
	//КонецЕсли;
	
	//++ ЛЕА 17.05.2023 №46625. 67918
	
	//--> МИ-1 / 2020-08-18
	//Если ЗапрашиватьСерийныйНомер Тогда
	//	сткПолей = Новый Структура;
	//	сткПолей.Вставить("НеКонтролироватьСерийныеНомераПриОтгрузке", "МодельУчета.НеКонтролироватьСерийныеНомераПриОтгрузке");
	//	сткДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, сткПолей);
	//	
	//	Если НЕ сткДанныеНоменклатуры.НеКонтролироватьСерийныеНомераПриОтгрузке Тогда
	//		сткРезультат = ВыполнитьКонтрольСерийныхНомеров();
	//		Если сткРезультат.ЕстьОшибка = Истина Тогда
	//			ТекстОшибки = сткРезультат.ТекстОшибки;
	//			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//<-- МИ-1 / 2020-08-18
	Если СерийныеНомера.Количество() > 0 Тогда
		 ЗаписатьСерийныеНомераВРегистр();
	КонецЕсли;	
	//-- ЛЕА 17.05.2023 №46625. 67918
	
	//++ БПС 30.05.2023 №70597
	сткОтбор = Новый Структура("ЗаказНаОтгрузку, Номенклатура", ЗаказНаОтгрузку, Номенклатура);
	НайденныеСтроки = тбпПланПоЗаказу.НайтиСтроки(сткОтбор);
	//-- БПС 30.05.2023 №70597
	
	КоличествоПереместить = 0;
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если ЗначениеЗаполнено(Строка.СтатусНоменклатуры) И ЗначениеЗаполнено(СтатусНоменклатуры) И Строка.СтатусНоменклатуры <> СтатусНоменклатуры тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ПартияНоменклатуры) И ЗначениеЗаполнено(ПартияНоменклатуры) И Строка.ПартияНоменклатуры <> ПартияНоменклатуры тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПолучитьСоставНачальногоКонтейнера() Тогда
		//	СтатусНоменклатуры = Строка.СтатусНоменклатуры;
		//	ПартияНоменклатуры = Строка.ПартияНоменклатуры;
		КонецЕсли;
		
		Если КонтролироватьСоставКонтейнера И Строка.Количество < Количество Тогда
			ТекстОшибки = НСтр("ru = 'ОШИБКА. Количество номенклатуры больше, чем остаток начального контейнера.'");
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
		
		КоличествоКПеремещению = Мин(Строка.Количество, Количество, Строка.КоличествоПоЗаказу);
		Количество = Количество - КоличествоКПеремещению;

		Если КоличествоКПеремещению > 0 Тогда
			//СоздатьЗадачуПеремещенияТовара(КоличествоКПеремещению, ТекущийКонечныйКонтейнер);
			КоличествоПереместить = КоличествоПереместить + КоличествоКПеремещению;
		КонецЕсли;
		
		Если Количество = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Излишек = Количество;
	
	Если ТекстОшибки = "" Тогда
		Если Излишек > 0 Тогда
			ПоложитьВКорзину();
		Иначе
			Если КоличествоПереместить И ВыполнятьКонтрольПоМассе И ЕстьПревышениеМассы() Тогда
				ВопросПоМассе();
				Возврат;
			КонецЕсли;
			
			СоздатьЗадачуПеремещенияТовара(КоличествоПереместить, ТекущийКонечныйКонтейнер);
			КоличествоПереместить = 0;
		КонецЕсли;
	КонецЕсли;
	
	// обработка действий на клиенте
	Если ОбновитьДанныеЗаказКонтейнер Тогда
		ОбновитьДанныеЗаказКонтейнер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводНоменклатуры(ВРежимеУпаковкиМК = Ложь)
	
	//++ БПС 30.05.2023 №70597
	Если ВРежимеУпаковкиМК Тогда
		ИнициализироватьКонечныйКонтейнер();
	КонецЕсли;
	//-- БПС 30.05.2023 №70597
	
	ПолучитьСоставНачальногоКонтейнера();
	
	Если НЕ ЗначениеЗаполнено(СтатусНоменклатуры) тогда
		СтатусНоменклатуры = ПредопределенноеЗначение("Справочник.усСтатусыНоменклатуры.Кондиция");
	КонецЕсли;
	
	Если НЕ (ИспользуетсяУчетПартийТовара И ВестиПартионныйУчет) тогда
		ПартияНоменклатуры = ПредопределенноеЗначение("Справочник.усПартииНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	//--> МИ-1 / 2020-08-18
	Если ИспользуетсяУчетСерийныхНомеровТовара тогда
		СерийныеНомера.Очистить();
		//++ Москвин М. №46627, закомментировано
		//Если НЕ НеЗапрашиватьКоличество Тогда
		//-- Москвин М. №46627
			сткПолей = Новый Структура;
			сткПолей.Вставить("ЗапрашиватьСерийныйНомерПриУпаковке1",	"МодельУчета.ЗапрашиватьСерийныйНомерПриУпаковке");
			сткПолей.Вставить("ЗапрашиватьСерийныйНомерПриУпаковке2",	"ЗапрашиватьСерийныйНомерПриУпаковке");
			сткДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, сткПолей);
			ЗапрашиватьСерийныйНомер = сткДанныеНоменклатуры.ЗапрашиватьСерийныйНомерПриУпаковке1 ИЛИ сткДанныеНоменклатуры.ЗапрашиватьСерийныйНомерПриУпаковке2;
		//++ Москвин М. №46627, закамментировано	
		//Иначе
		//	ЗапрашиватьСерийныйНомер = Ложь;
		//КонецЕсли;
		//-- Москвин М. №46627
	Иначе
		ЗапрашиватьСерийныйНомер = Ложь;
	КонецЕсли;
	Элементы.ГруппаОткрытьСерийныеНомера.Доступность = ЗапрашиватьСерийныйНомер;
	
	Если ЗапрашиватьСерийныйНомер Тогда
		ОткрытьФормуВводаСерийныхНомеров(Новый ОписаниеОповещения("ОбработатьШтрихкодПослеОткрытияФормыВводаСерийныхномеров", ЭтотОбъект));
		Возврат;
	КонецЕсли;
	//<-- МИ-1 / 2020-08-18
	
	Если НеЗапрашиватьКоличество тогда
		//Если ИспользуетсяУчетПартийТовара И ВестиПартионныйУчет И НЕ ЗначениеЗаполнено(ПартияНоменклатуры) тогда
		//	ОткрытьПартияНоменклатуры(Неопределено);
		//Иначе
			Количество = 1 * ?(Коэффициент>0, Коэффициент, 1);
			ОбработатьВводКоличества();
			ТекущийЭлементСканирования = "Номенклатура";
		//КонецЕсли;
	Иначе
		Элементы.ДействиеОткрытьПартияНоменклатуры.Доступность = ИспользуетсяУчетПартийТовара И ВестиПартионныйУчет;
		ТекущийЭлементСканирования = "Количество";
		УстановитьТекстПодсказки();
		
		Если Элементы.РежимВводаКоличества.Пометка Тогда
			ОткрытьВводКоличества(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложитьВКорзину()
	
	Если Излишек > 0 Тогда
		//спзКонечныеКонтейнеры = Новый СписокЗначений;
		//Для Индекс = 1 По КоличествоКонтейнеров Цикл
		//	Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
		//		спзКонечныеКонтейнеры.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
		//	КонецЕсли;
		//КонецЦикла;
		//
		//Если ЗначениеЗаполнено(УпаковкаНоменклатуры) И Излишек % Коэффициент = 0 Тогда
		//	сткПараметры = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, КонечныеКонтейнеры", Номенклатура, УпаковкаНоменклатуры, Излишек / Коэффициент, спзКонечныеКонтейнеры);
		//Иначе
		//	сткПараметры = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, КонечныеКонтейнеры", Номенклатура, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения"), Излишек, спзКонечныеКонтейнеры);
		//КонецЕсли;
		//
		//ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковкиОперативное.Форма.ФормаПодтверждение", сткПараметры, ЭтаФорма,,,, Новый ОписаниеОповещения("ПоложитьВКорзинуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
		
		//++ ЛЕА 17.05.2023 №46625. 67918
		//ПоложитьВКорзинуВопрос();
		//если указаны сн, вопрос будет задан там
		Если СерийныеНомера.Количество() = 0 Тогда
			ПоложитьВКорзинуВопрос();
		Иначе	 
			ОбработатьПодтверждениеИзлишкаВКорзине();
		КонецЕсли;	 
		//-- ЛЕА 17.05.2023 №46625. 67918
		
	КонецЕсли;
	
КонецПроцедуры

//++ ЛЕА 17.05.2023 №46625. 67918
&НаКлиенте
Процедура ОбработатьПодтверждениеИзлишкаВКорзине()
	
	спзКонечныеКонтейнеры = Новый СписокЗначений;
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			спзКонечныеКонтейнеры.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(УпаковкаНоменклатуры) И Излишек % Коэффициент = 0 Тогда
		сткПараметры = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, КонечныеКонтейнеры", Номенклатура, УпаковкаНоменклатуры, Излишек / Коэффициент, спзКонечныеКонтейнеры);
	Иначе
		сткПараметры = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, КонечныеКонтейнеры", Номенклатура, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения"), Излишек, спзКонечныеКонтейнеры);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковкиОперативное.Форма.ФормаПодтверждение", сткПараметры, ЭтаФорма,,,, Новый ОписаниеОповещения("ПоложитьВКорзинуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры	
//-- ЛЕА 17.05.2023 №46625. 67918

&НаКлиенте
Процедура ПоложитьВКорзинуВопрос()
	
	ПараметрыОткрытияФормы = Новый Структура;
	спКнопок = Новый СписокЗначений;
	спКнопок.Добавить("Нет", "Нет");
	спКнопок.Добавить("Да", "Да");	
	ПараметрыОткрытияФормы.Вставить("СписокКнопок", спКнопок);
	ПараметрыОткрытияФормы.Вставить("ТекстВопроса", НСтр("ru = 'Отсканирован излишек, вы уверены?'"));
	
	ОткрытьФорму("ОбщаяФорма.усФормаВопрос", ПараметрыОткрытияФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ПоложитьВКорзинуВопросЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоложитьВКорзинуВопросЗавершение(Результат, дПараметры) Экспорт
	
	Если Результат = "Да" Тогда 
		
		спзКонечныеКонтейнеры = Новый СписокЗначений;
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
				спзКонечныеКонтейнеры.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(УпаковкаНоменклатуры) И Излишек % Коэффициент = 0 Тогда
			сткПараметры = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, КонечныеКонтейнеры", Номенклатура, УпаковкаНоменклатуры, Излишек / Коэффициент, спзКонечныеКонтейнеры);
		Иначе
			сткПараметры = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, КонечныеКонтейнеры", Номенклатура, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения"), Излишек, спзКонечныеКонтейнеры);
		КонецЕсли;
		
		ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковкиОперативное.Форма.ФормаПодтверждение", сткПараметры, ЭтаФорма,,,, Новый ОписаниеОповещения("ПоложитьВКорзинуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПревышениеМассы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	усУпаковкиНоменклатуры.Масса КАК Масса,
	|	усУпаковкиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.усУпаковкиНоменклатуры КАК усУпаковкиНоменклатуры
	|ГДЕ
	|	усУпаковкиНоменклатуры.Коэффициент = 1
	|	И усУпаковкиНоменклатуры.Владелец = &Номенклатура
	|	И НЕ усУпаковкиНоменклатуры.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Масса УБЫВ";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		Если НЕ ЗначениеЗаполнено(УпаковкаНоменклатуры) тогда
			УпаковкаНоменклатуры = Выборка.Ссылка;
			Коэффициент = 1;
		КонецЕсли;
		
		МассаКПеремещению = Выборка.Масса * КоличествоПереместить;
		Если МассаКПеремещению > 0 тогда
			сткДанныеКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийКонечныйКонтейнер, Новый Структура("Масса, ДопустимаяМасса", "Масса", "ТипКонтейнера.ДопустимаяМасса"));
			Возврат МассаКПеремещению + сткДанныеКонтейнера.Масса > сткДанныеКонтейнера.ДопустимаяМасса;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ВопросПоМассе()

	ПараметрыОткрытияФормы = Новый Структура;
	спКнопок = Новый СписокЗначений;
	спКнопок.Добавить("Да", "Да");
	спКнопок.Добавить("Нет", "Нет");
	ПараметрыОткрытияФормы.Вставить("СписокКнопок", спКнопок);
	ПараметрыОткрытияФормы.Вставить("ТекстВопроса", НСтр("ru = 'Будет превышена масса грузового места. Продолжить?'"));
	
	ОткрытьФорму("ОбщаяФорма.усФормаВопрос", ПараметрыОткрытияФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ВопросПоМассеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПоМассеЗавершение(Результат, дПараметры) Экспорт
	
	Если Результат = "Да" Тогда
		СоздатьЗадачуПеремещенияТовара(КоличествоПереместить, ТекущийКонечныйКонтейнер);
		КоличествоПереместить = 0;
		
		// обработка действий на клиенте
		Если ОбновитьДанныеЗаказКонтейнер Тогда
			ОбновитьДанныеЗаказКонтейнер();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоложитьВКорзинуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		СоздатьЗадачуПеремещенияТовараВКорзину(Излишек, Результат.Контейнер);
		Излишек = 0;
		Если КоличествоПереместить Тогда
			Если ВыполнятьКонтрольПоМассе И ЕстьПревышениеМассы() тогда
				ВопросПоМассе();
				Возврат;
			КонецЕсли;
			
			СоздатьЗадачуПеремещенияТовара(КоличествоПереместить, ТекущийКонечныйКонтейнер);
			КоличествоПереместить = 0;
			
			// обработка действий на клиенте
			Если ОбновитьДанныеЗаказКонтейнер Тогда
				ОбновитьДанныеЗаказКонтейнер();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПустойКонтейнер(Контейнер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры
	|ИЗ
	|	РегистрНакопления.усОстаткиТоваров.Остатки(
	|			,
	|			Контейнер = &Контейнер
	|				И Контейнер.ДокументПривязки <> &ЗаказНаОтгрузку) КАК усОстаткиТоваровОстатки";
		
	Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
	Запрос.УстановитьПараметр("Контейнер", Контейнер);
		
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция НайденаНоменклатураПоШтрихкоду(Штрихкод, НеуникальныйШК = Ложь, ТекстОшибки = "")

	сткУточнениеПоискаНоменклатуры = Новый Структура;
	сткУточнениеПоискаНоменклатуры.Вставить("Контейнер", ТекущийНачальныйКонтейнер);
	
	тРезультат = усТСДОсновной.НайтиНоменклатуру(Штрихкод,,,,,,,сткУточнениеПоискаНоменклатуры);
	Если НЕ ЗначениеЗаполнено(тРезультат.Ошибка) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, тРезультат);
		ВестиПартионныйУчет = Номенклатура.МодельУчета.ВестиПартионныйУчет;
		Возврат Истина;
	ИначеЕсли тРезультат.Ошибка = НСтр("ru = 'ОШИБКА. ШК не однозначно определяет номенклатуру.'") Тогда
		НеуникальныйШК = Истина;
		Возврат Истина;
	Иначе
		ТекстОшибки = тРезультат.Ошибка;
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПереместитьКонтейнер(сткВозврат)
	
	сткПоложениеКонтейнера = РегистрыНакопления.усПоложениеКонтейнеров.ПолучитьПоложениеКонтейнера(сткВозврат.Контейнер);
	Задача = усТСДОсновной.СоздатьЗадачуПеремещенияКонтейнера(, ПредопределенноеЗначение("Перечисление.усТипыЗадач.Перемещение"), ?(ЗначениеЗаполнено(сткПоложениеКонтейнера.Ячейка), сткПоложениеКонтейнера.Ячейка, Ячейка), сткПоложениеКонтейнера.МастерКонтейнер, сткВозврат.Контейнер, ЗаказНаОтгрузку, Исполнитель);
	
	Попытка
		ТекстОшибки = "";
		усУправлениеЗадачами.ВыполнитьДействиеПоложитьЦелыйКонтейнер(Задача, Ячейка, Неопределено, -1, ТекстОшибки,,Ложь);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	
	Если ТекстОшибки <> "" Тогда
		Ошибка = "";
		усУправлениеЗадачами.ОтменитьЗадачуПеремещениеКонтейнера(Задача, Ошибка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихКод(ШтрихКод)
	
	ТекстОшибки = "";
	Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	ОбработатьЭлементСканирования(ШтрихКод);
	
	//++ БПС 30.05.2023 №70597
	ОбновитьСостояниеРежимовРаботы();
	//-- БПС 30.05.2023 №70597
	
КонецПроцедуры

&НаСервере
Функция ИсполнительНайден(ШтрихКод)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	усСкладскиеСотрудники.Ссылка
	|ИЗ
	|	Справочник.усСкладскиеСотрудники КАК усСкладскиеСотрудники
	|ГДЕ
	|	усСкладскиеСотрудники.Логин = &Логин";
	
	Запрос.УстановитьПараметр("Логин", ШтрихКод);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Исполнитель = Выборка.Ссылка;
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция СостояниеСотрудника(РабочееМесто)
	
	//--> МИ-1 / #10445# / 2022-03-28
	сткВозврат = миУправлениеСкладомСервер.КонтрольСостоянияСотрудников(Исполнитель, РабочееМесто.Наименование);
	Если сткВозврат.Ошибка = Истина Тогда
		Возврат сткВозврат.ПредставлениеОшибки;
	КонецЕсли;
	//<-- МИ-1 / #10445# / 2022-03-28
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	усТекущееДействиеПользователяТСД.НомерУстройства
	|ИЗ
	|	РегистрСведений.усТекущееДействиеПользователяТСД КАК усТекущееДействиеПользователяТСД
	|ГДЕ
	|	усТекущееДействиеПользователяТСД.Сотрудник = &Сотрудник
	|	И усТекущееДействиеПользователяТСД.Активен";
	
	Запрос.УстановитьПараметр("Сотрудник", Исполнитель);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Вход под данным сотрудником выполнен на устройстве IMEI: %1.'"), Выборка.НомерУстройства);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЭлементСканирования(ШтрихКод, СледующийЭлементСканирования = "")
	
	Если ЗначениеЗаполнено(СледующийЭлементСканирования) Тогда
		ТекущийЭлементСканирования = СледующийЭлементСканирования;
	КонецЕсли;
	
	Если ТекущийЭлементСканирования = "Исполнитель" Тогда
		
		Если Не ИсполнительНайден(ШтрихКод) Тогда
			ТекстОшибки = НСтр("ru = 'ОШИБКА. Не найден сотрудник.'");
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
		
		ТекущаяСмена = ТекущаяСменаСотрудникаСервер();
		РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
		
		стрСостояниеСотрудника = СостояниеСотрудника(РабочееМесто);
		Если стрСостояниеСотрудника <> "" тогда
			ТекстОшибки = стрСостояниеСотрудника;
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
		
		Если ТекущаяСмена <> Неопределено Тогда
		//++ВИА 27.03.2023 задача:
			МИ_ИзменитьСостояниеИАктивность(ТекущаяСмена,РабочееМесто);
			//усУправлениеСкладомСервер.ЗаписатьСостояниеСотрудника(ОбщегоНазначенияКлиент.ДатаСеанса(), Исполнитель, РабочийПоток, ПредопределенноеЗначение("Перечисление.усСостоянияСотрудников.Работает"), ТекущаяСмена, , , РабочееМесто);
			//ИзменитьАктивностьСтолаУпаковкиНаСервере(Истина);
		//--ВИА 27.03.2023 задача:
		Иначе
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЕстьВладелец", Истина);
			ПараметрыФормы.Вставить("Исполнитель", Исполнитель);
			ПараметрыФормы.Вставить("РабочийПоток", РабочийПоток);
			ПараметрыФормы.Вставить("РабочееМесто", РабочееМесто);
			ОткрытьФорму("Обработка.усУстановкаСмены.Форма", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
		//++ БПС 30.05.2023 №70597
		Если миПеремещатьКонтейнерыВЗонуУпаковки Тогда
			ТекущийЭлементСканирования = "Перемещение";
		ИначеЕсли МИ_РежимУпаковкиМК Тогда
			ТекущийЭлементСканирования = "НачальныйКонтейнер";
		Иначе
			ТекущийЭлементСканирования = "ЗаказНаОтгрузку";
		КонецЕсли;
		УстановитьТекстПодсказкиНаКлиенте();
		//-- БПС 30.05.2023 №70597
		
	ИначеЕсли ТекущийЭлементСканирования = "Перемещение" Тогда
		
		Если миПеремещатьКонтейнерыПоАлгоритмуПоиска Тогда
			ТекстОшибки = "";
			Элементы.ДекорацияТекстОшибки.Заголовок					= ТекстОшибки;
			Элементы.ГруппаПланИлиСоставСтраницы.ТекущаяСтраница	= Элементы.ГруппаЗадачиПеремещения;
						
			сткВозврат = усТСДОсновной.НайтиКонтейнер(Штрихкод, Неопределено);
			Если сткВозврат.Ошибка <> "" Тогда
				ТекстОшибки = сткВозврат.Ошибка;
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат;
			КонецЕсли;
			
			сткВозврат = НайтиКонтейнерПоАлгоритмуПоиска(сткВозврат.Контейнер, миАлгоритмПоискаКонтейнераНаОстатке);
			Если сткВозврат.Ошибка <> "" Тогда
				ТекстОшибки = сткВозврат.Ошибка;
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ТекущийЭлементСканирования = "ЗаказНаОтгрузку" Тогда
		
		НайденныйДокументПоШК = усСервисныеФункции.ПолучитьДокументПоШК(Штрихкод, "Документ.усЗаказНаОтгрузку");
		Если НайденныйДокументПоШК = Неопределено Тогда
			сткВозврат = усТСДОсновной.НайтиЗаказНаОтгрузку(Штрихкод, Истина);
			ТекстОшибки = сткВозврат.Ошибка;
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			
			Если сткВозврат.Ошибка = "" Тогда
				ЗаказНаОтгрузку = сткВозврат.Ссылка;
				ПриИзмененииЗаказаНаОтгрузку();
				//--> МИ-1 / 2019-05-22
				ПриИзмененииЗаказаНаОтгрузкуНаКлиенте();
				//<-- МИ-1 / 2019-05-22
			Иначе
				сткВозврат = усТСДОсновной.НайтиКонтейнер(Штрихкод,,,);
				Если сткВозврат.Ошибка = "" Тогда
					Если сткВозврат.Ячейка <> Ячейка тогда
						Если миПеремещатьКонтейнерыПоРабочемуПотоку тогда
							ПереместитьКонтейнер(сткВозврат);
							Если ТекстОшибки <> "" Тогда
								Возврат;
							КонецЕсли;	
						Иначе
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контейнер %1 числится в ячейке %2'"), сткВозврат.Контейнер, сткВозврат.Ячейка);
							Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
							Возврат;
						КонецЕсли;
					КонецЕсли;
					
					ТекстОшибки = "";
					Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
					//++ БПС 30.05.2023 №70597
					МИ_РежимУпаковкиМК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(сткВозврат.Контейнер, Новый Структура("МастерКонтейнер", "ТипКонтейнера.МастерКонтейнер")).МастерКонтейнер;
					Если МИ_РежимУпаковкиМК Тогда
						ОбработатьЭлементСканирования(ШтрихКод, "НачальныйКонтейнер");
					//-- БПС 30.05.2023 №70597
					Иначе
						ЗаказНаОтгрузку = сткВозврат.ДокументПривязки;
						ПриИзмененииЗаказаНаОтгрузку();
						//--> МИ-1 / 2019-05-22
						ПриИзмененииЗаказаНаОтгрузкуНаКлиенте();
						//<-- МИ-1 / 2019-05-22
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗаказНаОтгрузку = НайденныйДокументПоШК;
			ПриИзмененииЗаказаНаОтгрузку();
			//--> МИ-1 / 2019-05-22
			ПриИзмененииЗаказаНаОтгрузкуНаКлиенте();
			//<-- МИ-1 / 2019-05-22
		КонецЕсли;
		
	ИначеЕсли ТекущийЭлементСканирования = "НачальныйКонтейнер" Тогда
		
		сткВозврат = усТСДОсновной.НайтиКонтейнер(Штрихкод,,,,,, ЗаказНаОтгрузку);
		Если сткВозврат.Ошибка <> "" Тогда
			ТекстОшибки = сткВозврат.Ошибка;
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(сткВозврат.Ячейка) тогда
			ТипЯчейки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(сткВозврат.Ячейка, "ТипЯчейки");
			Если ТипЯчейки = ПредопределенноеЗначение("Справочник.усТипыЯчеек.Ресурс") тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контейнер числится на исполнителе %1'"), сткВозврат.Ячейка);
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если сткВозврат.Ячейка <> Ячейка тогда
			Если миПеремещатьКонтейнерыПоРабочемуПотоку тогда
				ПереместитьКонтейнер(сткВозврат);
				Если ТекстОшибки <> "" Тогда
					Возврат;
				КонецЕсли;	
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контейнер %1 числится в ячейке %2'"), сткВозврат.Контейнер, сткВозврат.Ячейка);
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ТекущийНачальныйКонтейнер	= сткВозврат.Контейнер;
		ЗаказНаОтгрузку 			= сткВозврат.ДокументПривязки;
		
		//++ БПС 30.05.2023 №70597
		Если Не МИ_РежимУпаковкиМК Тогда
		//-- БПС 30.05.2023 №70597
			ПриИзмененииЗаказаНаОтгрузку(ТекущийНачальныйКонтейнер);
			//--> МИ-1 / 2019-05-22
			ПриИзмененииЗаказаНаОтгрузкуНаКлиенте();
			//<-- МИ-1 / 2019-05-22
			ОбновитьПланПоЗаказу(Истина);
		КонецЕсли;
		
		//!ШРВ 06.10.2017 12:37:47 Начало
		ОтключитьОбработчикОжидания("НайтиЗадачи");
		//!ШРВ 06.10.2017 12:37:47 Конец
		
		ИмяКнопки = ?(ЗначениеЗаполнено(текИмяКнопки) И Найти(текИмяКнопки, "НачальныйКонтейнер") > 0, текИмяКнопки, "НачальныйКонтейнер1");
		текИмяКнопки = "";
		Если ТипЗнч(ЭтаФорма.ТекущийЭлемент) = Тип("КнопкаФормы") 
		   И Найти(ЭтаФорма.ТекущийЭлемент.Имя, "НачальныйКонтейнер") > 0 
		   И ЭтаФорма.ТекущийЭлемент.Родитель.Родитель.Имя = "ГруппаНачальныеКонтейнерыКнопки" Тогда
			ИмяКнопки = ЭтаФорма.ТекущийЭлемент.Имя;
			ПроверкаНаДубльКонтейнера = ПолучитьИмяКнопкиНаСервере(ТекущийНачальныйКонтейнер, "НачальныйКонтейнер");
			Если ПроверкаНаДубльКонтейнера <> Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Контейнер <%1> уже указан в качестве начального контейнера № %2'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТекущийНачальныйКонтейнер, СтрЗаменить(ПроверкаНаДубльКонтейнера, "НачальныйКонтейнер", ""));
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ЭтаФорма[ИмяКнопки] = ТекущийНачальныйКонтейнер;
		ДобавитьСоответствиеКонтейнеровНаСервере(ИмяКнопки, ТекущийНачальныйКонтейнер, "НачальныйКонтейнер");
		//++ БПС 30.05.2023 №70597
		Если МИ_РежимУпаковкиМК Тогда
			ПриИзмененииНачальногоКонтейнера(, Истина);
		//-- БПС 30.05.2023 №70597
		Иначе
			ТекущийЭлементСканирования = "";
			ПриИзмененииНачальногоКонтейнера(ИмяКнопки);
		КонецЕсли;
		
		Если ОтображатьПоложениеКонтейнеровПоЗаказу Тогда 
			Если ОтображатьСоставКонтейнера Тогда
				Элементы.ГруппаПланИлиСостав.Заголовок = "Состав контейнера";
				Элементы.ГруппаПланИлиСоставСтраницы.ТекущаяСтраница = Элементы.ГруппаСоставКонтейнера;
			Иначе
				Элементы.ГруппаПланИлиСостав.Заголовок = "Непроконтролированный план по " + ?(ПланПоКонтейнеру, "контейнеру", "заказу");
				Элементы.ГруппаПланИлиСоставСтраницы.ТекущаяСтраница = Элементы.ГруппаПланПоЗаказу;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущийЭлементСканирования = "КонечныйКонтейнер" ИЛИ (Не ЗначениеЗаполнено(ТекущийКонечныйКонтейнер) И МожноСканироватьКонечныйКонтейнер И ТекущийЭлементСканирования <> "ЗавершитьМастерКонтейнер") Тогда
		
		сткВозврат = усТСДОсновной.НайтиКонтейнер(Штрихкод, Неопределено,, Ячейка);		
		Если сткВозврат.Ошибка <> "" Тогда
			ТекстОшибки = сткВозврат.Ошибка;
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(сткВозврат.ДокументПривязки) И сткВозврат.ДокументПривязки <> ЗаказНаОтгрузку Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контейнер %1 зарезервирован за другим заказом'"), сткВозврат.Контейнер);
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		ИначеЕсли ЗначениеЗаполнено(сткВозврат.Ячейка) Тогда
			ТипЯчейки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(сткВозврат.Ячейка, "ТипЯчейки");
			Если ТипЯчейки = ПредопределенноеЗначение("Справочник.усТипыЯчеек.Ресурс") Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контейнер %1 числится на исполнителе %2'"), сткВозврат.Контейнер, сткВозврат.Ячейка);
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если сткВозврат.Контейнер = ТекущийНачальныйКонтейнер Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Начальный и Конечный контейнеры совпадают!'"), сткВозврат.Контейнер);
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
		
		Если НЕ ПустойКонтейнер(сткВозврат.Контейнер) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контейнер %1 не пустой'"), сткВозврат.Контейнер);
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
		
		сткДанныеКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(сткВозврат.Контейнер, Новый Структура("ТипУпаковка", "ТипКонтейнера.КонтейнерУпаковки"));
		Если НЕ сткДанныеКонтейнера.ТипУпаковка Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контейнер %1 не является контейнером упаковки'"), сткВозврат.Контейнер);
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;	
		
		ИмяКнопки = ?(ЗначениеЗаполнено(текИмяКнопки), текИмяКнопки, "КонечныйКонтейнер1");
		текИмяКнопки = "";
		Если Найти(ЭтаФорма.ТекущийЭлемент.Имя, "КонечныйКонтейнер") > 0 
		   И ЭтаФорма.ТекущийЭлемент.Родитель.Родитель.Имя = "ГруппаКонечныеКонтейнерыКнопки" Тогда
			ИмяКнопки = ЭтаФорма.ТекущийЭлемент.Имя;
			ПроверкаНаДубльКонтейнера = ПолучитьИмяКнопкиНаСервере(сткВозврат.Контейнер, "КонечныйКонтейнер");
			Если ПроверкаНаДубльКонтейнера <> Неопределено Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контейнер %1 уже указан в качестве конечного контейнера № %2'"),
					сткВозврат.Контейнер, СтрЗаменить(ПроверкаНаДубльКонтейнера, "КонечныйКонтейнер", ""));
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ТекущийКонечныйКонтейнер = сткВозврат.Контейнер;
		
		ЭтаФорма[ИмяКнопки] = ТекущийКонечныйКонтейнер;
		ДобавитьСоответствиеКонтейнеровНаСервере(ИмяКнопки, ТекущийКонечныйКонтейнер, "КонечныйКонтейнер");
		ТекущийЭлементСканирования = "";
		ПриИзмененииКонечногоКонтейнера(ИмяКнопки);
		
	ИначеЕсли ТекущийЭлементСканирования = "Номенклатура" Тогда
		
		Если ТекущийНачальныйКонтейнер = ТекущийКонечныйКонтейнер Тогда
			ТекстОшибки = НСтр("ru = 'Начальный и конечный контейнеры совпадают'");
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = "";
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		
		НеуникальныйШК 	= Ложь;
		Количество 		= 0;
		
		Если НайденаНоменклатураПоШтрихкоду(Штрихкод, НеуникальныйШК, ТекстОшибки) Тогда
			//++ БПС 30.05.2023 №70597
			ПараметрыОповещенияОЗакрытии = Новый Структура("ИмяМетода, Используется", "ОбработатьВводНоменклатуры", Ложь);
			Если Не ИдентифицированаНоменклатураПоПлану(МИ_РежимУпаковкиМК, ТекстОшибки, ПараметрыОповещенияОЗакрытии) Тогда
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат;
			КонецЕсли;
			УстановитьТекущуюСтрокуПланаПоЗаказу();
			//-- БПС 30.05.2023 №70597
			Если НеуникальныйШК Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьШтрихКодПослеВыбораНеуникальнойНоменклатуры", ЭтотОбъект);
				ОткрытьФорму("ОбщаяФорма.усФормаВводаНоменклатурыРМ", Новый Структура("Штрихкод", ШтрихКод), ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				//++ БПС 30.05.2023 №70597
				Если Не ПараметрыОповещенияОЗакрытии.Используется Тогда
					ОбработатьВводНоменклатуры(МИ_РежимУпаковкиМК);
				КонецЕсли;
				//-- БПС 30.05.2023 №70597
				Если ЗначениеЗаполнено(Количество) Тогда
					ОткрытьВводКоличестваЗавершение(Количество, Неопределено);
				КонецЕсли;				
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'Номенклатура не найдена'");
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		КонецЕсли;
		
	ИначеЕсли ТекущийЭлементСканирования = "МастерКонтейнер" Тогда
		
		сткВозврат = усТСДОсновной.НайтиКонтейнер(Штрихкод, Неопределено,, Ячейка);
		Если сткВозврат.Ошибка <> "" Тогда
			ТекстОшибки = сткВозврат.Ошибка;
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(сткВозврат.ДокументПривязки) Тогда
			Если ТипЗнч(сткВозврат.ДокументПривязки) = Тип("ДокументСсылка.усЗаказНаОтгрузку") И сткВозврат.ДокументПривязки <> ЗаказНаОтгрузку Тогда
				ТекстОшибки = НСтр("ru = 'Контейнер зарезервирован за другим заказом'");
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				//ТекущийЭлементСканирования = "";
				//УстановитьТекстПодсказки();
				Возврат;
			ИначеЕсли ТипЗнч(сткВозврат.ДокументПривязки) = Тип("ДокументСсылка.усРейс") И сткВозврат.ДокументПривязки <> Рейс Тогда
				ТекстОшибки = НСтр("ru = 'Контейнер зарезервирован за другим рейсом'");
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				//ТекущийЭлементСканирования = "";
				//УстановитьТекстПодсказки();
				Возврат;
			КонецЕсли;
		Иначе
			ПроверитьМастерКонтейнер(сткВозврат.Контейнер);
			Если ТекстОшибки <> "" Тогда
				Возврат;
			КонецЕсли;  		
		КонецЕсли;
		
		МастерКонтейнер = сткВозврат.Контейнер;
		ПоложитьВМастерКонтейнерНаСервере();
		
		ИмяКнопки = ПолучитьИмяКнопки(ТекущийКонечныйКонтейнер, "КонечныйКонтейнер"); 
		ЗавершитьКонечныйКонтейнерОкончание(ИмяКнопки, ТекущийКонечныйКонтейнер);
		
	ИначеЕсли ТекущийЭлементСканирования = "ЗавершитьМастерКонтейнер" Тогда
		
		сткВозврат = усТСДОсновной.НайтиКонтейнер(Штрихкод, Неопределено,, Ячейка);
		Если сткВозврат.Ошибка <> "" Тогда
			ТекстОшибки = сткВозврат.Ошибка;
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
		
		Если ИзменитьСтатусМастерКонтейнера(МастерКонтейнер, СтатусМастерКонтейнераПриЗавершении) Тогда
			//ПечатьМастерКонтейнера();
			Печать(МастерКонтейнер);
			МастерКонтейнер = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихКодПослеВыбораНеуникальнойНоменклатуры(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ВыбранноеЗначение.Количество) Тогда 
			ВыбранноеЗначение.Количество = ВыбранноеЗначение.Коэффициент;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВыбранноеЗначение);
		//++ БПС 30.05.2023 №70597
		ОбработатьВводНоменклатуры(МИ_РежимУпаковкиМК);
		//-- БПС 30.05.2023 №70597
	Иначе
		ТекстОшибки = НСтр("ru = 'Номенклатура не выбрана'");
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПодсказки()
	
	ТекстОшибки = "";
	Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	//++ БПС 30.05.2023 №70597
	Элементы.ГруппаКнопкиРежимыРаботы.Видимость				= Истина;
	Элементы.ГруппаКнопкиКоманды.Видимость					= Истина;
	Элементы.ГруппаЗаказНаОтгрузку.Видимость				= Истина;
	Элементы.ГруппаПанельУправления.Видимость				= Истина;
	Элементы.ГруппаДействияСНоменклатурой.Видимость			= Ложь;
	Элементы.ГруппаЗавершитьКонтроль.Видимость				= Ложь;
	Элементы.ГруппаДействияСКонечнымКонтейнером.Видимость	= Истина;
	Элементы.ГруппаОбщаяПраво.Видимость						= Истина;
	Элементы.ГруппаКонечныеКонтейнеры.Видимость				= Истина;
	//-- БПС 30.05.2023 №70597
	
	ТекстПодсказки = "";
	Если ТекущийЭлементСканирования = "Исполнитель" Тогда
		ТекстПодсказки = НСтр("ru = 'Отсканируйте бэйджик'");
		//++ БПС 30.05.2023 №70597
		Элементы.ГруппаКнопкиРежимыРаботы.Видимость			= Ложь;
		Элементы.ГруппаКнопкиКоманды.Видимость				= Ложь;
		Элементы.ГруппаЗаказНаОтгрузку.Видимость			= Ложь;
		Элементы.ГруппаПанельУправления.Видимость			= Ложь;
		Элементы.ГруппаОбщаяПраво.Видимость					= Ложь;
		//-- БПС 30.05.2023 №70597
		
	ИначеЕсли ТекущийЭлементСканирования = "Перемещение" Тогда
		Если миПеремещатьКонтейнерыПоРабочемуПотоку Тогда
			ТекстПодсказки = НСтр("ru = 'Поиск задач, ожидайте'");
		ИначеЕсли миПеремещатьКонтейнерыПоАлгоритмуПоиска Тогда
			ТекстПодсказки = НСтр("ru = 'Отсканируйте контейнер для перемещения в зону упаковки'");
		КонецЕсли;
		ТекстКомментария = "";
		//++ БПС 30.05.2023 №70597
		Элементы.ГруппаЗаказНаОтгрузку.Видимость				= Ложь;
		Элементы.ГруппаПланИлиСоставСтраницы.ТекущаяСтраница	= Элементы.ГруппаЗадачиПеремещения;
		Элементы.ГруппаПланИлиСостав.Заголовок					= "Задачи на перемещение контейнеров";
		Элементы.ГруппаКонечныеКонтейнеры.Видимость				= Ложь;
		//-- БПС 30.05.2023 №70597
		
	//++ БПС 30.05.2023 №70597
	ИначеЕсли ТекущийЭлементСканирования = "ЗаказНаОтгрузку" ИЛИ Не ЗначениеЗаполнено(ЗаказНаОтгрузку) И Не МИ_РежимУпаковкиМК Тогда
	//-- БПС 30.05.2023 №70597
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 заказ на отгрузку или контейнер'"), ?(ВыбиратьЗаказНаОтгрузкуИзСписка, НСтр("ru = 'Выберите'"), НСтр("ru = 'Отсканируйте'")));
		
	ИначеЕсли ТекущийЭлементСканирования = "НачальныйКонтейнер" Тогда
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 начальный контейнер'"), ?(ВыбиратьКонтейнерИзСписка, НСтр("ru = 'Выберите'"), НСтр("ru = 'Отсканируйте'")));
		
	ИначеЕсли ТекущийЭлементСканирования = "КонечныйКонтейнер" Тогда
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 конечный контейнер'"), ?(АвтоматическиСоздаватьНовыйКонтейнер, НСтр("ru = 'Создайте'"), ?(ВыбиратьКонтейнерИзСписка, НСтр("ru = 'Выберите'"), НСтр("ru = 'Отсканируйте'"))));
		//++ БПС 30.05.2023 №70597
		Элементы.ГруппаЗавершитьКонтроль.Видимость = Не МИ_РежимУпаковкиМК;
		//-- БПС 30.05.2023 №70597
		
	ИначеЕсли ТекущийЭлементСканирования = "Номенклатура" Тогда
		ТекстПодсказки = НСтр("ru = 'Отсканируйте номенклатуру'");
		//++ БПС 30.05.2023 №70597
		Элементы.ГруппаДействияСНоменклатурой.Видимость	= Не МИ_РежимУпаковкиМК;
		Элементы.ГруппаЗавершитьКонтроль.Видимость		= Не МИ_РежимУпаковкиМК;
		//-- БПС 30.05.2023 №70597
		
	ИначеЕсли ТекущийЭлементСканирования = "Количество" Тогда
		ТекстПодсказки = НСтр("ru = 'Введите количество'");
		Элементы.ДействиеОткрытьСтатусНоменклатуры.ТекстНевыбраннойКартинки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Статус: %1'"), СтатусНоменклатуры);
		
		Если ЗначениеЗаполнено(ПартияНоменклатуры) тогда
			ТекстИнформация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Партия: %1'"), ПартияНоменклатуры);
		Иначе
			ТекстИнформация = "Выбрать партию";
		КонецЕсли;
		Элементы.ДействиеОткрытьПартияНоменклатуры.ТекстНевыбраннойКартинки = ТекстИнформация;
		
		//--> МИ-1 / 2020-08-18
		Если ИспользуетсяУчетСерийныхНомеровТовара тогда
			Если СерийныеНомера.Количество() = 0 Тогда
				Элементы.ДействиеОткрытьСерийныеНомера.ТекстНевыбраннойКартинки = НСтр("ru='Ввести серийные номера'");
			Иначе
				Элементы.ДействиеОткрытьСерийныеНомера.ТекстНевыбраннойКартинки = НСтр("ru='Серийные номера'");
			КонецЕсли;
		КонецЕсли;
		//<-- МИ-1 / 2020-08-18
		
	ИначеЕсли ТекущийЭлементСканирования = "МастерКонтейнер" ИЛИ ТекущийЭлементСканирования = "ЗавершитьМастерКонтейнер" Тогда
		ТекстПодсказки = НСтр("ru = 'Отсканируйте мастер-контейнер'");
	Иначе
		//!ШРВ 06.09.2017 16:54:03 Начало
		//Если Не ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
		//	ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 начальный контейнер'"), ?(ЗначениеЗаполнено(ТекущийНачальныйКонтейнер), НСтр("ru = 'Отсканируйте'"), НСтр("ru = 'Выберите'")));
		//	ТекущийЭлементСканирования = "НачальныйКонтейнер";
		//	УстановитьИнформациюПоПоложениюКонтейнеров();
		//!ШРВ 06.09.2017 16:54:03 Конец	
		Если Не ЗначениеЗаполнено(ТекущийКонечныйКонтейнер) Тогда
			ТекстПодсказки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 конечный контейнер'"), ?(ЗначениеЗаполнено(ТекущийКонечныйКонтейнер), НСтр("ru = 'Отсканируйте'"), НСтр("ru = 'Выберите'")));
			ТекущийЭлементСканирования = "КонечныйКонтейнер";
			МожноСканироватьКонечныйКонтейнер = Истина;
			//++ БПС 30.05.2023 №70597
			Элементы.ГруппаЗавершитьКонтроль.Видимость 		= Не МИ_РежимУпаковкиМК;
			//-- БПС 30.05.2023 №70597
		Иначе
			ТекстПодсказки = НСтр("ru = 'Отсканируйте номенклатуру'");
			ТекущийЭлементСканирования = "Номенклатура";
			//++ БПС 30.05.2023 №70597
			Элементы.ГруппаДействияСНоменклатурой.Видимость	= Не МИ_РежимУпаковкиМК;
			Элементы.ГруппаЗавершитьКонтроль.Видимость		= Не МИ_РежимУпаковкиМК;
			//-- БПС 30.05.2023 №70597
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(УпаковкаНоменклатуры) Тогда
		ПредставлениеНоменклатуры = СокрЛП(Номенклатура.Наименование) + " (" + УпаковкаНоменклатуры.Наименование + ")";
	ИначеЕсли ЗначениеЗаполнено(Номенклатура) Тогда
		ПредставлениеНоменклатуры = СокрЛП(Номенклатура.Наименование);
	Иначе
		ПредставлениеНоменклатуры = "Номенклатура не отсканирована";
	КонецЕсли;
	
	УстановитьФонКнопкамКонтейнеров();
	
	Если ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
		сткДанныеЗнО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказНаОтгрузку, "НомерКИС, ВидДоставки");
		ВидДоставки	 = сткДанныеЗнО.ВидДоставки;
		
		Элементы.ДействиеОткрытьРасшифровкуЗаказа.Доступность = Истина;
		Элементы.ДействиеОткрытьРасшифровкуЗаказа.ТекстНевыбраннойКартинки = "Расшифровка заказа" + ?(ЗначениеЗаполнено(сткДанныеЗнО.НомерКИС), " (" + сткДанныеЗнО.НомерКИС + ")", "");
		Элементы.ВидДоставки.Видимость = ЗначениеЗаполнено(ВидДоставки);
	Иначе
		Элементы.ДействиеОткрытьРасшифровкуЗаказа.Доступность = Ложь;
		Элементы.ДействиеОткрытьРасшифровкуЗаказа.ТекстНевыбраннойКартинки = "Расшифровка заказа";
		Элементы.ВидДоставки.Видимость = Ложь;
	КонецЕсли;
	
	Если Допланирование Тогда
		Допланирование = Ложь;
	Иначе
		//ТекстОшибки = "";
	КонецЕсли;
	
	//++ БПС 30.05.2023 №70597
	Если ТекущийЭлементСканирования = "Перемещение" Тогда
		Элементы.ГруппаПанельУправления.ТекущаяСтраница	= Элементы.ГруппаПеремещение;
	ИначеЕсли ТекущийЭлементСканирования = "Количество" Тогда
		Элементы.ГруппаПанельУправления.ТекущаяСтраница	= Элементы.ГруппаКоличество;
	Иначе
		Элементы.ГруппаПанельУправления.ТекущаяСтраница	= Элементы.ГруппаУпаковка;
	КонецЕсли;
	//-- БПС 30.05.2023 №70597
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИнформациюПоПоложениюКонтейнеров()
	
	Если ОтображатьПоложениеКонтейнеровПоЗаказу Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	усКонтейнеры.Ссылка КАК Контейнер
		|ПОМЕСТИТЬ втКонтейнеры
		|ИЗ
		|	Справочник.усКонтейнеры КАК усКонтейнеры
		|ГДЕ
		|	усКонтейнеры.ДокументПривязки = &Заказ
		|	И НЕ усКонтейнеры.Упакован
		|	И усКонтейнеры.Ссылка НЕ В(&Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	усПоложениеКонтейнеровОстатки.Контейнер,
		|	усПоложениеКонтейнеровОстатки.Ячейка
		|ПОМЕСТИТЬ втОстатки
		|ИЗ
		|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
		|			,
		|			Контейнер В
		|				(ВЫБРАТЬ
		|					втКонтейнеры.Контейнер
		|				ИЗ
		|					втКонтейнеры)) КАК усПоложениеКонтейнеровОстатки
		|ГДЕ
		|	усПоложениеКонтейнеровОстатки.КоличествоОстаток = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОстатки.Ячейка,
		|	NULL КАК МастерКонтейнер,
		|	втОстатки.Контейнер КАК Контейнер
		|ИЗ
		|	втОстатки КАК втОстатки
		|ГДЕ
		|	втОстатки.Ячейка ССЫЛКА Справочник.усЯчейки
		|	И втОстатки.Ячейка.Зона <> ЗНАЧЕНИЕ(Справочник.усЗоны.Ресурсы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	усПоложениеКонтейнеровОстатки.Ячейка,
		|	усПоложениеКонтейнеровОстатки.Контейнер,
		|	втОстатки.Контейнер
		|ИЗ
		|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
		|			,
		|			Контейнер В
		|				(ВЫБРАТЬ
		|					втОстатки.Ячейка
		|				ИЗ
		|					втОстатки)) КАК усПоложениеКонтейнеровОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
		|		ПО усПоложениеКонтейнеровОстатки.Контейнер = втОстатки.Ячейка
		|ГДЕ
		|	усПоложениеКонтейнеровОстатки.КоличествоОстаток = 1
		|	И усПоложениеКонтейнеровОстатки.Ячейка.Зона <> ЗНАЧЕНИЕ(Справочник.усЗоны.Ресурсы)";
		Запрос.УстановитьПараметр("Заказ",  ЗаказНаОтгрузку);            
		мсвКонтейнеров = Новый Массив;
		Для Индекс = 1 По КоличествоКонтейнеров Цикл 
			Если ЗначениеЗаполнено(ЭтаФорма["НачальныйКонтейнер" + Индекс]) Тогда
				мсвКонтейнеров.Добавить(ЭтаФорма["НачальныйКонтейнер" + Индекс]);
			КонецЕсли;	
		КонецЦикла;	
		
		Запрос.УстановитьПараметр("Ссылка", мсвКонтейнеров);
		тбпПоложениеКонтейнеров.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Элементы.ГруппаПланИлиСостав.Заголовок = "Положение контейнеров по заказу";
		Элементы.ГруппаПланИлиСоставСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаПоложенияКонтейнеров;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФонКнопкамКонтейнеров()
	
	// Кнопка Завершить начальный контейнер
	Если ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
		Элементы.ГруппаЗавершитьНачальныйКонтейнер.ЦветФона = ЦветаСтиля.упЦветФонаВыбранногоКонтейнера;
		Элементы.ДействиеЗавершитьНачальныйКонтейнер.ЦветРамки = ЦветаСтиля.упЦветРамкиВыбранногоКонтейнера;
	Иначе
		Элементы.ГруппаЗавершитьНачальныйКонтейнер.ЦветФона = ЦветаСтиля.упЦветФонаНевыбранногоКонтейнера;
		Элементы.ДействиеЗавершитьНачальныйКонтейнер.ЦветРамки = ЦветаСтиля.упЦветРамкиНевыбранногоКонтейнера;
	КонецЕсли;
	
	// Кнопка Завершить конечный контейнер
	Если ЗначениеЗаполнено(ТекущийКонечныйКонтейнер) Тогда
		Элементы.ГруппаЗавершитьКонечныеКонтейнер.ЦветФона = ЦветаСтиля.упЦветФонаВыбранногоКонтейнера;
		Элементы.ДействиеЗавершитьКонечныйКонтейнер.ЦветРамки = ЦветаСтиля.упЦветРамкиВыбранногоКонтейнера;
	Иначе
		Элементы.ГруппаЗавершитьКонечныеКонтейнер.ЦветФона = ЦветаСтиля.упЦветФонаНевыбранногоКонтейнера;
		Элементы.ДействиеЗавершитьКонечныйКонтейнер.ЦветРамки = ЦветаСтиля.упЦветРамкиНевыбранногоКонтейнера;
	КонецЕсли;
	
	// Кнопка Положить в мастер-контейнер
	Элементы.ГруппаПоложитьВМастерКонтейнер.ЦветФона = ?(ВводитьМастерКонтейнер И ЗначениеЗаполнено(ТекущийКонечныйКонтейнер), ЦветаСтиля.упЦветФонаВыбранногоКонтейнера, ЦветаСтиля.упЦветФонаНевыбранногоКонтейнера);
	Элементы.ДействиеПоложитьВМастерКонтейнер.ЦветРамки = ?(ВводитьМастерКонтейнер И ЗначениеЗаполнено(ТекущийКонечныйКонтейнер), ЦветаСтиля.упЦветРамкиВыбранногоКонтейнера, ЦветаСтиля.упЦветРамкиНевыбранногоКонтейнера);
	
	// Кнопка завершить мастер-контейнер
	Элементы.ГруппаЗавершитьМастерКонтейнер.ЦветФона = ?(ВводитьМастерКонтейнер И (ЗначениеЗаполнено(ЗаказНаОтгрузку) ИЛИ ЗначениеЗаполнено(МастерКонтейнер)), ЦветаСтиля.упЦветФонаВыбранногоКонтейнера, ЦветаСтиля.упЦветФонаНевыбранногоКонтейнера);
	Элементы.ДействиеЗавершитьМастерКонтейнер.ЦветРамки = ?(ВводитьМастерКонтейнер И (ЗначениеЗаполнено(ЗаказНаОтгрузку) ИЛИ ЗначениеЗаполнено(МастерКонтейнер)), ЦветаСтиля.упЦветРамкиВыбранногоКонтейнера, ЦветаСтиля.упЦветРамкиНевыбранногоКонтейнера);
	Элементы.ДействиеЗавершитьМастерКонтейнер.Доступность = ВводитьМастерКонтейнер И (ЗначениеЗаполнено(ЗаказНаОтгрузку) ИЛИ ЗначениеЗаполнено(МастерКонтейнер));
	
КонецПроцедуры

&НаСервере
Функция ИзменитьСтатусКонтейнера(Контейнер, СтатусКонтейнера)
	
	ТекстОшибки		= "";
	ЗадачаУпаковки	= Неопределено;
	
	Попытка
		//--> МИ-1 / #9512# / 2021-12-21
		тзСоставКонтейнера = усСервисныеФункции.ПолучитьСоставПоКонтейнеру(Контейнер);
		Если тзСоставКонтейнера.Количество() = 0 Тогда
			КонтейнерОбъект = Контейнер.ПолучитьОбъект();
			КонтейнерОбъект.ДокументПривязки = Неопределено;
			КонтейнерОбъект.Записать();
		//<-- МИ-1 / #9512# / 2021-12-21
		Иначе
			ЗадачаУпаковки = усТСДОсновной.СоздатьЗадачуИзмененияСтатусаКонтейнера(, Ячейка,, Контейнер, СтатусКонтейнера, ЗаказНаОтгрузку, Исполнитель);
			усУправлениеЗадачами.ВыполнитьИзменениеСтатусаКонтейнера(ЗадачаУпаковки, ТекстОшибки);
			
			//--> МИ-1 / #9350# / 2022-01-24
			Если ТекстОшибки = "" Тогда
				Если миАвтоматическиИзменятьШтрихкодКонтейнера И КонтрольПланаПоЗаказу(Истина) Тогда
					ИзменитьШтрихкодКонтейнера(Контейнер);
				КонецЕсли;
			КонецЕсли;
			//<-- МИ-1 / #9350# / 2022-01-24
			
			ОбновитьКонтрольЗаказаНаОтгрузку();
		КонецЕсли;
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
		
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		
		Если ЗначениеЗаполнено(ЗадачаУпаковки) Тогда
			мсвДокументы = Новый Массив;
			мсвДокументы.Добавить(ЗадачаУпаковки);
			усРаботаСоСтатусами.УстановитьСтатусДокументам(мсвДокументы, Перечисления.усСтатусыЗадач.Отменена);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ?(ТекстОшибки = "", Истина, Ложь);
	
КонецФункции

&НаСервере
Функция ИзменитьСтатусМастерКонтейнера(МастерКонтейнер, СтатусМастерКонтейнераПриЗавершении)
		
	Попытка
		ЗадачаИзмененияСтатуса = усТСДОсновной.СоздатьЗадачуИзмененияСтатусаКонтейнера(, Ячейка,, МастерКонтейнер, СтатусМастерКонтейнераПриЗавершении, ЗаказНаОтгрузку, Исполнитель);
		ТекстОшибки = "";
	    Если Не усУправлениеЗадачами.ВыполнитьИзменениеСтатусаКонтейнера(ЗадачаИзмененияСтатуса, ТекстОшибки) Тогда
			ЗадачаОбъект = ЗадачаИзмененияСтатуса.ПолучитьОбъект();
			ЗадачаОбъект.Статус = Перечисления.усСтатусыЗадач.Отменена;
			ЗадачаОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ОписаниеОшибки());
	КонецПопытки;
	
	Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	
	Возврат ?(ТекстОшибки = "", Истина, Ложь);
	
КонецФункции

&НаСервере
Функция УстановитьРеквизитУпакован(Контейнер)
	
	Если ЗначениеЗаполнено(Контейнер) тогда
		сткУпакован = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контейнер, "Упакован, ДокументПривязки");
		Если НЕ сткУпакован.Упакован ИЛИ НЕ ЗначениеЗаполнено(сткУпакован.ДокументПривязки) ИЛИ сткУпакован.ДокументПривязки <> ЗаказНаОтгрузку тогда
			Попытка
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				
				БлокировкаДанных = Новый БлокировкаДанных;
				НоваяБлокировка = БлокировкаДанных.Добавить("Справочник.усКонтейнеры");
				НоваяБлокировка.Режим = РежимБлокировкиДанных.Исключительный;
				НоваяБлокировка.УстановитьЗначение("Ссылка", Контейнер);
				БлокировкаДанных.Заблокировать();
				
				текКонтейнер = Контейнер.ПолучитьОбъект();
				текКонтейнер.Упакован = Истина;
				текКонтейнер.ДокументПривязки = ЗаказНаОтгрузку;
				текКонтейнер.Записать();
				
				ЗафиксироватьТранзакцию();
				
				ОбновитьПланПоЗаказу(ПланПоКонтейнеру);
			Исключение
				ОтменитьТранзакцию();
				ТекстОшибки = КраткоеПредставлениеОшибки(ОписаниеОшибки());
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СоздатьЗадачуПеремещенияТовара(КоличествоКПеремещению, КонечныйКонтейнер)
	
	////!ШРВ 06.09.2017 15:29:52 Начало
	//// контроль остатков
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	усОстаткиТоваровОстатки.КоличествоОстаток КАК Остаток
	//|ИЗ
	//|	РегистрНакопления.усОстаткиТоваров.Остатки(
	//|			,
	//|			Контейнер = &Контейнер
	//|				И КлючАналитикиУчетаНоменклатуры = &КлючАналитики) КАК усОстаткиТоваровОстатки";
	//Запрос.УстановитьПараметр("Контейнер",     ТекущийНачальныйКонтейнер);
	//Запрос.УстановитьПараметр("КлючАналитики", КлючАналитики);
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//	КоличествоИзлишек = Макс(КоличествоКПеремещению - Выборка.Остаток, 0);
	//	КоличествоКПеремещению = КоличествоКПеремещению - КоличествоИзлишек;
	//Иначе
	//	КоличествоИзлишек = 0;
	//КонецЕсли;
	//
	//Если КоличествоИзлишек > 0 Тогда
	//	Если ЗначениеЗаполнено(УпаковкаНоменклатуры) И КоличествоИзлишек % Коэффициент = 0 Тогда
	//		текУпаковкаНоменклатуры = УпаковкаНоменклатуры;
	//		текКоличествоУпаковок = КоличествоИзлишек / Коэффициент;
	//	Иначе
	//		текУпаковкаНоменклатуры = Справочники.усУпаковкиНоменклатуры.ПустаяСсылка();
	//		текКоличествоУпаковок = КоличествоИзлишек;
	//	КонецЕсли;
	//	сткПоложениеКонтейнера = РегистрыНакопления.усПоложениеКонтейнеров.ПолучитьПоложениеКонтейнера(КонечныйКонтейнер);
	//	ТекстОшибки = "";
	//	ТекстОшибки = усУправлениеЗадачами.ЗафиксироватьРасхожденияПоОстаткам(?(ЗначениеЗаполнено(сткПоложениеКонтейнера.Ячейка), сткПоложениеКонтейнера.Ячейка, Ячейка), КонечныйКонтейнер, Номенклатура,
	//																			СтатусНоменклатуры, ПартияНоменклатуры, текУпаковкаНоменклатуры, КоличествоИзлишек, текКоличествоУпаковок, ЗаказНаОтгрузку, Исполнитель);
	//	Если ТекстОшибки <> "" Тогда 
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Если НЕ УстановитьРеквизитУпакован(КонечныйКонтейнер) тогда
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	//		Возврат;
	//	КонецЕсли;		
	//	ОбновитьДанныеЗаказКонтейнер = Истина;
	//КонецЕсли;
	////!ШРВ 06.09.2017 15:29:52 Конец
	
	Если КоличествоКПеремещению <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючАналитикиУчетаНоменклатуры = усУправлениеСкладомСерверПовтИсп.ЗначениеКлючаАналитики(Номенклатура, СтатусНоменклатуры, ПартияНоменклатуры);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	усПоложениеКонтейнеровОстатки.Контейнер
	|ПОМЕСТИТЬ втКонтейнеры
	|ИЗ
	|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
	|			,
	|			Ячейка = &Ячейка
	|				И Контейнер.ДокументПривязки = &ЗаказНаОтгрузку
	|				И НЕ Контейнер В (&КонечныеКонтейнеры)) КАК усПоложениеКонтейнеровОстатки
	|ГДЕ
	|	усПоложениеКонтейнеровОстатки.КоличествоОстаток = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	усОстаткиТоваровОстатки.Контейнер,
	|	СУММА(усОстаткиТоваровОстатки.КоличествоОстаток) КАК КоличествоОстаток,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры
	|ПОМЕСТИТЬ втКонтейнерСТоваром
	|ИЗ
	|	РегистрНакопления.усОстаткиТоваров.Остатки(
	|			,
	|			Контейнер В
	|				(ВЫБРАТЬ
	|					втконтейнеры.Контейнер
	|				ИЗ
	|					втконтейнеры)) КАК усОстаткиТоваровОстатки
	|ГДЕ
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура = &Номенклатура
	|	И усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры = &СтатусНоменклатуры
	|	И &ПартияНоменклатуры В (усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры, ЗНАЧЕНИЕ(Справочник.усПартииНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	усОстаткиТоваровОстатки.Контейнер,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКонтейнерСТоваром.Контейнер,
	|	втКонтейнерСТоваром.КоличествоОстаток,
	|	втКонтейнерСТоваром.КлючАналитикиУчетаНоменклатурыНоменклатура КАК Номенклатура,
	|	втКонтейнерСТоваром.КлючАналитикиУчетаНоменклатурыСтатусНоменклатуры КАК СтатусНоменклатуры,
	|	втКонтейнерСТоваром.КлючАналитикиУчетаНоменклатурыПартияНоменклатуры КАК ПартияНоменклатуры
	|ИЗ
	|	втКонтейнерСТоваром КАК втКонтейнерСТоваром
	|ГДЕ
	|	втКонтейнерСТоваром.КоличествоОстаток > 0");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СтатусНоменклатуры", СтатусНоменклатуры);
	Запрос.УстановитьПараметр("ПартияНоменклатуры", ?(ЗначениеЗаполнено(ПартияНоменклатуры), ПартияНоменклатуры, Справочники.усПартииНоменклатуры.ПустаяСсылка()));
	Запрос.УстановитьПараметр("КоличествоКПеремещению", КоличествоКПеремещению);
	Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
	//++ БПС 30.05.2023 №70597
	Запрос.УстановитьПараметр("Ячейка", ?(МИ_РежимУпаковкиМК, ТекущийНачальныйКонтейнер, Ячейка));
	//-- БПС 30.05.2023 №70597
	
	мКонтейнеры = Новый Массив;
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			мКонтейнеры.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеСтроки Из КонечныеКонтейнеры Цикл
		Если мКонтейнеры.Найти(ДанныеСтроки.Контейнер) = Неопределено Тогда
			  мКонтейнеры.Добавить(ДанныеСтроки.Контейнер);
		КонецЕсли;
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("КонечныеКонтейнеры", мКонтейнеры);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 ИЛИ Результат.Итог("КоличествоОстаток") < КоличествоКПеремещению Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Нет плановых контейнеров с нужным количеством %1 в ячейке %2 '"), КлючАналитикиУчетаНоменклатуры, Ячейка));
	    Возврат;
	КонецЕсли; 

	Для Каждого СтрокаРезультат Из Результат Цикл
		КлючАналитикиУчетаНоменклатуры = усУправлениеСкладомСерверПовтИсп.ЗначениеКлючаАналитики(СтрокаРезультат.Номенклатура, СтрокаРезультат.СтатусНоменклатуры, СтрокаРезультат.ПартияНоменклатуры);
		//++ БПС 30.05.2023 №70597
		Если Не МИ_РежимУпаковкиМК Тогда
		//-- БПС 30.05.2023 №70597
			ТекущийНачальныйКонтейнер 	= СтрокаРезультат.Контейнер;
		КонецЕсли;
		КоличествоКПеремещениюТекущее 	= МИН(СтрокаРезультат.КоличествоОстаток, КоличествоКПеремещению);
		
		сткДанныеДокумента 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказНаОтгрузку, Новый Структура("ПравилоУпаковки", "Контрагент.ПравилоУпаковки"));
		РезультатПроверки 	= усТСДОтгрузка.ПроверитьПравилаУпаковки(сткДанныеДокумента.ПравилоУпаковки, КонечныйКонтейнер, КлючАналитикиУчетаНоменклатуры, КоличествоКПеремещениюТекущее);
		
		Если Не РезультатПроверки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не выполнены условия упаковки ""%1."" '"), сткДанныеДокумента.ПравилоУпаковки));
		Иначе
			сткПоложениеКонтейнера = РегистрыНакопления.усПоложениеКонтейнеров.ПолучитьПоложениеКонтейнера(СтрокаРезультат.Контейнер);
			
			сткДанные = Новый Структура();
			сткДанные.Вставить("ДокументОснование",		ЗаказНаОтгрузку);
			сткДанные.Вставить("Ячейка",				сткПоложениеКонтейнера.Ячейка);
			сткДанные.Вставить("МастерКонтейнер",		сткПоложениеКонтейнера.МастерКонтейнер);
			сткДанные.Вставить("Контейнер",				СтрокаРезультат.Контейнер);
			сткДанные.Вставить("Номенклатура",			СтрокаРезультат.Номенклатура);
			сткДанные.Вставить("СтатусНоменклатуры",	СтрокаРезультат.СтатусНоменклатуры);
			сткДанные.Вставить("ПартияНоменклатуры",	СтрокаРезультат.ПартияНоменклатуры);
			Если ЗначениеЗаполнено(УпаковкаНоменклатуры) И КоличествоКПеремещениюТекущее % Коэффициент = 0 Тогда
				сткДанные.Вставить("УпаковкаНоменклатуры",	УпаковкаНоменклатуры);
				сткДанные.Вставить("КоличествоУпаковок",	КоличествоКПеремещениюТекущее/Коэффициент);
			Иначе
				сткДанные.Вставить("УпаковкаНоменклатуры",	Справочники.усУпаковкиНоменклатуры.ПустаяСсылка());
				сткДанные.Вставить("КоличествоУпаковок",	КоличествоКПеремещениюТекущее);
			КонецЕсли;
			сткДанные.Вставить("Количество", КоличествоКПеремещениюТекущее);
			
			Задача = усТСДОсновной.СоздатьЗадачуПеремещенияТовара(, Перечисления.усТипыЗадач.Упаковка, сткДанные, Исполнитель);
			Попытка
				сткПоложениеКонтейнера = РегистрыНакопления.усПоложениеКонтейнеров.ПолучитьПоложениеКонтейнера(КонечныйКонтейнер);
				
				ТекстОшибки = "";
				усУправлениеЗадачами.ВыполнитьДействиеПеремещениеТовара(Задача, ?(ЗначениеЗаполнено(сткПоложениеКонтейнера.Ячейка), сткПоложениеКонтейнера.Ячейка, Ячейка), сткПоложениеКонтейнера.МастерКонтейнер,
					КонечныйКонтейнер, сткДанные.УпаковкаНоменклатуры, сткДанные.КоличествоУпаковок, сткДанные.Количество, -1, ТекстОшибки,,,Ложь);
					
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				
				Если ТекстОшибки = "" Тогда
					ОбновитьДанныеЗаказКонтейнер = Истина;
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					Ошибка = "";
					усУправлениеЗадачами.ОтменитьЗадачуПеремещенияТовара(Задача, Ошибка);
					Возврат;
				КонецЕсли;
				
				Если Не УстановитьРеквизитУпакован(КонечныйКонтейнер) тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					Возврат;
				КонецЕсли;
				
				//--> МИ-1 / 2020-08-18
				Если СерийныеНомера.Количество() > 0 И ЗапрашиватьСерийныйНомер Тогда
					сткДанные = Новый Структура();
					сткДанные.Вставить("ДокументОснование",    ЗаказНаОтгрузку);
					сткДанные.Вставить("Номенклатура",         СтрокаРезультат.Номенклатура);
					сткДанные.Вставить("СтатусНоменклатуры",   СтрокаРезультат.СтатусНоменклатуры);
					сткДанные.Вставить("ПартияНоменклатуры",   СтрокаРезультат.ПартияНоменклатуры);
					
					усТСДОсновной.ДобавитьВЗаказНаОтгрузкуСН(сткДанные, СерийныеНомера);
					СерийныеНомера.Очистить();
				КонецЕсли;
				//<-- МИ-1 / 2020-08-18
				
				Если КонечныеКонтейнеры.НайтиСтроки(Новый Структура("Контейнер", КонечныйКонтейнер)).Количество() = 0 Тогда
					СтрокаКонтейнеры = КонечныеКонтейнеры.Добавить();
					СтрокаКонтейнеры.Контейнер = КонечныйКонтейнер;
				КонецЕсли;
				
				Задача 					= Неопределено;
				КоличествоКПеремещению	= КоличествоКПеремещению - КоличествоКПеремещениюТекущее;
				
				Если КоличествоКПеремещению <= 0 Тогда
					Прервать;
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗадачуПеремещенияТовараВКорзину(КоличествоКПеремещению, КонечныйКонтейнер)
	
	КлючАналитики = усУправлениеСкладомСерверПовтИсп.ЗначениеКлючаАналитики(Номенклатура, СтатусНоменклатуры, ПартияНоменклатуры);
	
	Задача = Неопределено;
	
	сткПоложение = РегистрыНакопления.усПоложениеКонтейнеров.ПолучитьПоложениеКонтейнера(КонечныйКонтейнер);	
	
	Задача = усТСДОсновной.СоздатьЗадачуПересчета(, Перечисления.усТипыЗадачПересчета.КонтрольОтгрузки, ?(ЗначениеЗаполнено(сткПоложение.Ячейка),сткПоложение.Ячейка,Ячейка), КонечныйКонтейнер, ЗаказНаОтгрузку, Исполнитель, сткПоложение.МастерКонтейнер);	
	ЗадачаОбъект = Задача.ПолучитьОбъект();	
	
	НоваяСтрока = ЗадачаОбъект.Товары.Добавить();
	НоваяСтрока.Контейнер = КонечныйКонтейнер;
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.СтатусНоменклатуры = СтатусНоменклатуры;
	НоваяСтрока.ПартияНоменклатуры = ПартияНоменклатуры;
	НоваяСтрока.КоличествоФакт = КоличествоКПеремещению;
	НоваяСтрока.Корзина = Истина;
	
	Если ЗадачаОбъект.Контейнеры.Найти(КонечныйКонтейнер, "Контейнер") = Неопределено Тогда		
		НоваяСтрока = ЗадачаОбъект.Контейнеры.Добавить();
		НоваяСтрока.Ячейка         = ?(ЗначениеЗаполнено(сткПоложение.Ячейка),сткПоложение.Ячейка,Ячейка);				НоваяСтрока.Контейнер 	   = КонечныйКонтейнер;
		НоваяСтрока.КоличествоФакт = 1;
		НоваяСтрока.Корзина        = Истина;
	КонецЕсли;
	
	ЗадачаОбъект.Записать();
	
	Если ЗначениеЗаполнено(Задача) И усУправлениеЗадачами.ВыполнитьДействиеПересчет(Задача, ТекстОшибки) Тогда
		
	ИначеЕсли ЗначениеЗаполнено(Задача) Тогда
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.Статус = Перечисления.усСтатусыЗадач.Отменена;
		ЗадачаОбъект.Записать();
	КонецЕсли;
	
	Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	
	// контроль остатков
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	усОстаткиТоваровОстатки.КоличествоОстаток КАК Остаток
	//|ИЗ
	//|	РегистрНакопления.усОстаткиТоваров.Остатки(
	//|			,
	//|			Контейнер = &Контейнер
	//|				И КлючАналитикиУчетаНоменклатуры = &КлючАналитики) КАК усОстаткиТоваровОстатки";
	//Запрос.УстановитьПараметр("Контейнер",     ТекущийНачальныйКонтейнер);
	//Запрос.УстановитьПараметр("КлючАналитики", КлючАналитики);
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Если Выборка.Следующий() тогда
	//	КоличествоИзлишек = Макс(КоличествоКПеремещению - Выборка.Остаток, 0);
	//	КоличествоКПеремещению = КоличествоКПеремещению - КоличествоИзлишек;
	//Иначе
	//	КоличествоИзлишек = 0;
	//КонецЕсли;
	//
	//Если КоличествоИзлишек > 0 тогда
	//	Если ЗначениеЗаполнено(УпаковкаНоменклатуры) И КоличествоИзлишек % Коэффициент = 0 тогда
	//		текУпаковкаНоменклатуры = УпаковкаНоменклатуры;
	//		текКоличествоУпаковок = КоличествоИзлишек / Коэффициент;
	//	Иначе
	//		текУпаковкаНоменклатуры = Справочники.усУпаковкиНоменклатуры.ПустаяСсылка();
	//		текКоличествоУпаковок = КоличествоИзлишек;
	//	КонецЕсли;
	//	сткПоложениеКонтейнера = РегистрыНакопления.усПоложениеКонтейнеров.ПолучитьПоложениеКонтейнера(КонечныйКонтейнер);
	//	ТекстОшибки = "";
	//	ТекстОшибки = усУправлениеЗадачами.ЗафиксироватьРасхожденияПоОстаткам(?(ЗначениеЗаполнено(сткПоложениеКонтейнера.Ячейка), сткПоложениеКонтейнера.Ячейка, Ячейка), КонечныйКонтейнер, Номенклатура,
	//																			СтатусНоменклатуры, ПартияНоменклатуры, текУпаковкаНоменклатуры, КоличествоИзлишек, текКоличествоУпаковок,, Исполнитель);
	//	Если ТекстОшибки <> "" Тогда 
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	//		Возврат;
	//	КонецЕсли;
	//
	//КонецЕсли;
	//
	//Если КоличествоКПеремещению > 0 тогда
	//
	//	сткПоложениеКонтейнера = РегистрыНакопления.усПоложениеКонтейнеров.ПолучитьПоложениеКонтейнера(ТекущийНачальныйКонтейнер);
	//	
	//	сткДанные = Новый Структура();
	//	сткДанные.Вставить("ДокументОснование",    Неопределено);
	//	сткДанные.Вставить("Ячейка",               сткПоложениеКонтейнера.Ячейка);
	//	сткДанные.Вставить("Контейнер",            ТекущийНачальныйКонтейнер);
	//	сткДанные.Вставить("МастерКонтейнер",      сткПоложениеКонтейнера.МастерКонтейнер);
	//	сткДанные.Вставить("Номенклатура",         Номенклатура);
	//	сткДанные.Вставить("СтатусНоменклатуры",   СтатусНоменклатуры);
	//	сткДанные.Вставить("ПартияНоменклатуры",   ПартияНоменклатуры);
	//	Если ЗначениеЗаполнено(УпаковкаНоменклатуры) И КоличествоКПеремещению % Коэффициент = 0 Тогда
	//		сткДанные.Вставить("УпаковкаНоменклатуры", УпаковкаНоменклатуры);
	//		сткДанные.Вставить("КоличествоУпаковок",   КоличествоКПеремещению/Коэффициент);
	//	Иначе
	//		сткДанные.Вставить("УпаковкаНоменклатуры", Справочники.усУпаковкиНоменклатуры.ПустаяСсылка());
	//		сткДанные.Вставить("КоличествоУпаковок",   КоличествоКПеремещению);
	//	КонецЕсли;
	//	сткДанные.Вставить("Количество",           КоличествоКПеремещению);
	//	
	//	Задача = усТСДОсновной.СоздатьЗадачуПеремещенияТовара(Задача, Перечисления.усТипыЗадач.ОтменаОтбора, сткДанные, Исполнитель);
	//	Попытка
	//		сткПоложениеКонтейнера = РегистрыНакопления.усПоложениеКонтейнеров.ПолучитьПоложениеКонтейнера(КонечныйКонтейнер);
	//		ТекстОшибки = "";
	//		усУправлениеЗадачами.ВыполнитьДействиеПеремещениеТовара(Задача, ?(ЗначениеЗаполнено(сткПоложениеКонтейнера.Ячейка), сткПоложениеКонтейнера.Ячейка, Ячейка), сткПоложениеКонтейнера.МастерКонтейнер,
	//																КонечныйКонтейнер, сткДанные.УпаковкаНоменклатуры, сткДанные.КоличествоУпаковок, сткДанные.Количество, -1, ТекстОшибки,,,Ложь);
	//		Если ТекстОшибки <> "" Тогда 
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	//			Возврат;
	//		КонецЕсли;
	//		
	//		Задача = Неопределено;
	//	Исключение
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляПечатиЭтикеток()
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(КонтейнерДляПечати);
	
	Возврат Справочники.усКонтейнеры.ПолучитьДанныеДляПечатиЭтикеток(МассивОбъектов);
	
КонецФункции

&НаСервере
// Функция создает задачу маркировки контейнера
//
Функция СоздатьЗадачуМаркировки()
	
	сткДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказНаОтгрузку, Новый Структура ("Контрагент, ШаблонЭтикетки", "Контрагент" , "Контрагент.ЭтикеткаТовара"));	
	Возврат Обработки.усРабочееМестоОператораУпаковкиОперативное.СоздатьЗадачуМаркировки(КонтейнерДляПечати, сткДанныеДокумента.Контрагент, Исполнитель, ЗаказНаОтгрузку, сткДанныеДокумента.ШаблонЭтикетки);
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляПечатиЭтикетокТоваров(ПараметрКоманды, ТипЭтикеток, ТабличнаяЧасть, ПараметрыВыполненияКоманды)
	
	Возврат Документы.усМаркировка.ПолучитьДанныеДляПечатиЭтикеток(ПараметрКоманды, ТипЭтикеток, ТабличнаяЧасть, ПараметрыВыполненияКоманды);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСтатусНоменклатуры(Команда)
	
	ОткрытьФорму("Справочник.усСтатусыНоменклатуры.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОткрытьСтатусНоменклатурыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатусНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Не ЗначениеЗаполнено(Результат) Тогда
        Возврат;
    КонецЕсли;
    
    СтатусНоменклатуры = Результат;
	УстановитьТекстПодсказки();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПартияНоменклатуры(Элемент)
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Номенклатура));

	ОткрытьФорму("Справочник.усПартииНоменклатуры.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ОткрытьПартияНоменклатурыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПартияНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Не ЗначениеЗаполнено(Результат) Тогда
        Возврат;
    КонецЕсли;
	
	ПартияНоменклатуры = Результат;
	
	Если НеЗапрашиватьКоличество Тогда
		Количество = 1;
		ОбработатьВводКоличества();
		ТекущийЭлементСканирования = "Номенклатура";
	КонецЕсли;
	
    УстановитьТекстПодсказки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВводКоличества(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнтерактивныйРежим", Ложь);
	ПараметрыОткрытияФормы.Вставить("ТипВводимогоЗначения", "ЧИСЛО");
	ПараметрыОткрытияФормы.Вставить("ТолькоРучнойВвод", Ложь);
	ПараметрыОткрытияФормы.Вставить("ЗаголовокФормы", "Введите количество");
	
	//--> МИ-1 / 2020-08-18
	Если ЗапрашиватьСерийныйНомер Тогда
		ПараметрыОткрытияФормы.Вставить("Количество", Количество);
	КонецЕсли;
	//<-- МИ-1 / 2020-08-18
	
	ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковкиОперативное.Форма.ФормаВводаКоличества", ПараметрыОткрытияФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьВводКоличестваЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВводКоличестваЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	текРезультат = Результат;
	Если Не ЗначениеЗаполнено(текРезультат) Тогда
	    Возврат;
	КонецЕсли;
	
	КоличествоУпаковок = текРезультат;
	Количество = текРезультат * Коэффициент;

	ОбработатьВводКоличества();
	
	ТекущийЭлементСканирования = "Номенклатура";
	УстановитьТекстПодсказки();
    
КонецПроцедуры

//--> МИ-1 / 2020-08-18

&НаКлиенте
Процедура ОткрытьСерийныеНомера(Элемент)
	
	ОткрытьФормуВводаСерийныхНомеров(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаСерийныхНомеров(Знач Оповещение)
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСерийныхНомеров = Новый Массив;
	Для Каждого СтрокаСерийногоНомера Из СерийныеНомера Цикл
		МассивСерийныхНомеров.Добавить(Новый Структура("СерийныйНомер, СерийныйНомерПо", СтрокаСерийногоНомера.СерийныйНомер, СтрокаСерийногоНомера.СерийныйНомерПо));
	КонецЦикла;
	
	//++ ЛЕА 17.05.2023 №46625. 67918
	//ПараметрыОткрытия = Новый Структура("МассивСерийныхНомеров", МассивСерийныхНомеров);
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("МассивСерийныхНомеров", МассивСерийныхНомеров);
	ПараметрыОткрытия.Вставить("Номенклатура",   Номенклатура);	
	
	сткОтбор = Новый Структура("Номенклатура", Номенклатура);
	НайденныеСтроки = тбпПланПоЗаказу.НайтиСтроки(сткОтбор);
	Для каждого Строка Из НайденныеСтроки цикл
		КоличествоКПеремещению = Строка.Количество;
	КонецЦикла;	
	ПараметрыОткрытия.Вставить("КоличествоПлан", КоличествоКПеремещению);	
	//-- ЛЕА 17.05.2023 №46625. 67918
	
	ОткрытьФорму("ОбщаяФорма.усФормаВводаСерийныхНомеров", ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ОбработатьВводСерийныхНомеров", ЭтотОбъект, Новый Структура("Оповещение",Оповещение)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводСерийныхНомеров(Результат, ДополнительныеПараметры) Экспорт
	
	МассивСерийныхНомеров = Результат;
	Если МассивСерийныхНомеров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СерийныеНомера.Очистить();
	Для Каждого СерийныйНомер Из МассивСерийныхНомеров Цикл
		СтрокаСерийногоНомера = СерийныеНомера.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСерийногоНомера, СерийныйНомер);
	КонецЦикла;
	
	Количество = СерийныеНомера.Количество();
	УстановитьТекстПодсказки();
	
	// обработка оповещения
	Оповещение = ДополнительныеПараметры.Оповещение;
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодПослеОткрытияФормыВводаСерийныхномеров(Результат, ДополнительныеПараметры) Экспорт
	
	//++ ЛЕА 17.05.2023 №46625. 67918
	ВведеныСерийныеНомера = СерийныеНомера.Количество() > 0;	
	
	//Если НеЗапрашиватьКоличество Тогда
	Если НеЗапрашиватьКоличество И НЕ ВведеныСерийныеНомера Тогда
	//-- ЛЕА 17.05.2023 №46625. 67918
	
		//Если ИспользуетсяУчетПартийТовара И ВестиПартионныйУчет И НЕ ЗначениеЗаполнено(ПартияНоменклатуры) Тогда
		//	ОткрытьПартияНоменклатуры(Неопределено);
		//Иначе
			Количество = 1 * ?(Коэффициент > 0, Коэффициент, 1);
			ОбработатьВводКоличества();
			ТекущийЭлементСканирования = "Номенклатура";
		//КонецЕсли;
		
	//++ ЛЕА 17.05.2023 №46625. 67918
	ИначеЕсли ВведеныСерийныеНомера Тогда
		
		Количество = СерийныеНомера.Количество();
		ОбработатьВводКоличества();
		ТекущийЭлементСканирования = "Номенклатура";
		
	//-- ЛЕА 17.05.2023 №46625. 67918		
		
	Иначе
		Элементы.ДействиеОткрытьПартияНоменклатуры.Доступность = ИспользуетсяУчетПартийТовара И ВестиПартионныйУчет;
		ТекущийЭлементСканирования = "Количество";
		УстановитьТекстПодсказки();
		
		Если Элементы.РежимВводаКоличества.Пометка Тогда
			ОткрытьВводКоличества(Неопределено);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьКонтрольСерийныхНомеров()

	сткВозврат = Новый Структура("ЕстьОшибка, ТекстОшибки", Ложь, "");
	
	ТаблицаСерийныеНомера = СерийныеНомера.Выгрузить();
	
	Если ТаблицаСерийныеНомера.Количество() = 0 Тогда
		сткВозврат.ТекстОшибки = НСтр("ru = 'ОШИБКА. Не указаны С/Н.'");
		сткВозврат.ЕстьОшибка  = Истина;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	усСерийныеНомера.СерийныйНомер,
		|	усСерийныеНомера.СерийныйНомерПо
		|ПОМЕСТИТЬ врСерийныеНомера
		|ИЗ
		|	&ТаблицаСерийныеНомера КАК усСерийныеНомера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врСерийныеНомера.СерийныйНомер,
		|	врСерийныеНомера.СерийныйНомерПо
		|ПОМЕСТИТЬ врСерийныеНомераДиапазонБаза
		|ИЗ
		|	РегистрСведений.усСерийныеНомера КАК усСерийныеНомера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врСерийныеНомера КАК врСерийныеНомера
		|		ПО (усСерийныеНомера.Номенклатура = &Номенклатура)
		//|			И (усСерийныеНомера.ПартияНоменклатуры = &ПартияНоменклатуры)
		|			И усСерийныеНомера.СерийныйНомер <= врСерийныеНомера.СерийныйНомер
		|			И усСерийныеНомера.СерийныйНомерПо >= врСерийныеНомера.СерийныйНомерПо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врСерийныеНомера.СерийныйНомер,
		|	врСерийныеНомера.СерийныйНомерПо
		|ИЗ
		|	врСерийныеНомера КАК врСерийныеНомера
		|		ЛЕВОЕ СОЕДИНЕНИЕ врСерийныеНомераДиапазонБаза КАК врСерийныеНомераБаза
		|		ПО врСерийныеНомера.СерийныйНомер = врСерийныеНомераБаза.СерийныйНомер
		|			И врСерийныеНомера.СерийныйНомерПо = врСерийныеНомераБаза.СерийныйНомерПо
		|ГДЕ
		|	врСерийныеНомераБаза.СерийныйНомер ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Номенклатура",          Номенклатура);
		Запрос.УстановитьПараметр("ПартияНоменклатуры",    ПартияНоменклатуры);
		Запрос.УстановитьПараметр("ТаблицаСерийныеНомера", ТаблицаСерийныеНомера);
		СерийныеНомераОшибка = Запрос.Выполнить().Выгрузить();
		
		ТекстОшибки = "";
		Для Каждого СтрокаТаблица Из СерийныеНомераОшибка Цикл
			Если ТекстОшибки <> "" Тогда
				ТекстОшибки = ТекстОшибки + "; ";
			КонецЕсли;
			ТекстОшибки = ТекстОшибки + СтрокаТаблица.СерийныйНомер;
		КонецЦикла;
		
		Если ТекстОшибки <> "" Тогда
			сткВозврат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'ОШИБКА. Неверные С/Н: %1'"), ТекстОшибки);
			сткВозврат.ЕстьОшибка  = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат сткВозврат;

КонецФункции

//<-- МИ-1 / 2020-08-18

&НаСервере
Функция ПолучитьСписокТоваров()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	усКонтрольОтгрузкиОбороты.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрНакопления.усКонтрольОтгрузки.Обороты(, , , ЗаказНаОтгрузку = &ЗаказНаОтгрузку) КАК усКонтрольОтгрузкиОбороты
	|ГДЕ
	|	усКонтрольОтгрузкиОбороты.КоличествоЗапланированоОборот > 0";
	
	Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");	
	
КонецФункции

//++ ЛЕА 17.05.2023 №46625. 67918
&НаСервере
Процедура ЗаписатьСерийныеНомераВРегистр()
	
	Пока Истина Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			
			// Блокировка данных.
			текБлокировка = Новый БлокировкаДанных;
			
			тбдРегистр = текБлокировка.Добавить("РегистрСведений.усСерийныеНомера");
			тбдРегистр.Режим = РежимБлокировкиДанных.Исключительный;
			тбдРегистр.УстановитьЗначение("Номенклатура", Номенклатура);
			текБлокировка.Заблокировать();
			
			Для Каждого текСтрока из СерийныеНомера цикл
				Запись = РегистрыСведений.усСерийныеНомера.СоздатьМенеджерЗаписи();
				Запись.Номенклатура          = Номенклатура;
				Запись.ПартияНоменклатуры    = ПартияНоменклатуры;
				Запись.СерийныйНомер         = текСтрока.СерийныйНомер;
				Запись.МИ_ДатаУпаковано		 = текСтрока.ДатаУпаковано;
				Запись.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			Прервать;
			
		Исключение	
			
			ОтменитьТранзакцию();
			Прервать;
			
		КонецПопытки;	
		
	КонецЦикла;	
	
КонецПроцедуры
//-- ЛЕА 17.05.2023 №46625. 67918	

&НаКлиенте
Процедура ШтрихкодТестированиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТекущийЭлементСканирования = "Номенклатура" тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Номенклатура", ПолучитьСписокТоваров()));
		
		ОткрытьФорму("РегистрСведений.усШтрихкоды.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбработатьШтрихкодТестированиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодТестированиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ОбработатьЭлементСканирования(Результат.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КонтейнерНегабаритный(мКонтейнер)
	
	Если ЗначениеЗаполнено(мКонтейнер) Тогда
		Негабаритный = мКонтейнер.ТипКонтейнера.Негабаритный;
	Иначе
		Негабаритный = Ложь;
	КонецЕсли;
	
	Возврат Негабаритный;
	
КонецФункции

&НаСервере
Процедура ЗаписатьВГХКонтейнера(Контейнер, ВведенныеВГХ)
	
	Если Не ЗначениеЗаполнено(Контейнер) Тогда
		Возврат;
	КонецЕсли;
	
	КонтейнерОбъект = Контейнер.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(КонтейнерОбъект, ВведенныеВГХ);
	КонтейнерОбъект.Объем = ВведенныеВГХ.Ширина * ВведенныеВГХ.Глубина * ВведенныеВГХ.Высота;
	
	Попытка
		КонтейнерОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка записи ВГХ для контейнера: " + Контейнер);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНомерПломбыКонтейнера(Контейнер, ВведныйНомерПломбы)
	
	Если Не ЗначениеЗаполнено(Контейнер) Тогда
		Возврат;
	КонецЕсли;
	
	КонтейнерОбъект = Контейнер.ПолучитьОбъект();
	КонтейнерОбъект.НомерПломбы = ВведныйНомерПломбы.НомерПломбы;
	
	Попытка
		КонтейнерОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка записи номера пломбы для контейнера: " + Контейнер);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьМастерКонтейнер(Контейнер)
	
	ТекстОшибки = "";
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	усКонтейнеры.Ссылка,
	               |	усКонтейнеры.ДокументПривязки,
	               |	ЕСТЬNULL(усПоложениеКонтейнеровОстатки.Ячейка, НЕОПРЕДЕЛЕНО) КАК Ячейка
	               |ИЗ
	               |	Справочник.усКонтейнеры КАК усКонтейнеры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.усПоложениеКонтейнеров.Остатки КАК усПоложениеКонтейнеровОстатки
	               |		ПО (усПоложениеКонтейнеровОстатки.Контейнер = усКонтейнеры.Ссылка)
	               |			И (усПоложениеКонтейнеровОстатки.КоличествоОстаток > 0)
	               |ГДЕ
	               |	усКонтейнеры.Состояние = ЗНАЧЕНИЕ(Перечисление.усСостоянияКонтейнеров.Доступен)
	               |	И усКонтейнеры.Упакован = ЛОЖЬ
	               |	И усКонтейнеры.ТипКонтейнера <> ЗНАЧЕНИЕ(Справочник.усТипыКонтейнеров.Ресурс)
	               |	И усКонтейнеры.Ссылка = &Контейнер";
				   
	//Запрос.УстановитьПараметр("ДокументПривязки", Рейс);
	Запрос.УстановитьПараметр("Контейнер", Контейнер);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.ДокументПривязки) Тогда 
			Если ЗначениеЗаполнено(Рейс) И Выборка.ДокументПривязки <> Рейс Тогда 
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбранный мастер-контейнер зарезервирован за рейсом %1. Отсканируйте новый  мастер-контейнер'"), Выборка.ДокументПривязки);
			ИначеЕсли  Выборка.ДокументПривязки <> ЗаказНаОтгрузку Тогда 
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбранный мастер-контейнер зарезервирован за заказом %1. Отсканируйте новый  мастер-контейнер'"), Выборка.ДокументПривязки);
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Ячейка) И  Выборка.Ячейка <> Ячейка Тогда 		
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Выбранный мастер-контейнер зарезервирован за рейсом %1. Отсканируйте новый мастер-контейнер'"), Выборка.Ячейка);
		КонецЕсли;				
	Иначе
		ТекстОшибки = НСтр("ru = 'Выбранный мастер-контейнер не подходит. Отсканируйте новый мастер-контейнер'");
	КонецЕсли;
	
	Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	
КонецПроцедуры

&НаСервере
Функция ТекущаяСменаСотрудникаСервер()

	ТекущаяСмена = Неопределено;
	ДоступныеСмены = Обработки.усУстановкаСмены.ДоступныеСотрудникуСмены(Исполнитель);
	Если ДоступныеСмены.Количество() = 1 Тогда
		ТекущаяСмена = ДоступныеСмены[0].Смена;
	КонецЕсли;
	
	Возврат ТекущаяСмена;

КонецФункции // ДоступныеСменыСотрудникаСервер()

&НаСервере
Процедура ИзменитьАктивностьСтолаУпаковкиНаСервере(Включить = Ложь)
	
	МенеджерЗаписи = РегистрыСведений.усАктивныеСтолыУпаковки.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ячейка 		= Ячейка;
	МенеджерЗаписи.Активен 		= Включить;
	//!РАВ, 16.01.2019 - начало блока
	МенеджерЗаписи.Исполнитель 	= ?(Включить, Исполнитель, Справочники.усСкладскиеСотрудники.ПустаяСсылка());
	//!РАВ, 16.01.2019 - конец блока
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

//!ШРВ 04.09.2017 16:59:57 Начало

&НаКлиенте
Процедура ОткрытьСписокНоменклатурыПоПлануНажатие(Элемент)
	
	ОтборНоменклатуры = Новый Структура("ДокументПривязки", ЗаказНаОтгрузку);
	ПараметрыОткрытия = Новый Структура("Отбор", ОтборНоменклатуры);

	ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковкиОперативное.Форма.ФормаВыбора",ПараметрыОткрытия,,,,, Новый ОписаниеОповещения("ОткрытьСписокЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокНоменклатурыНажатие(Элемент)
	
	ОткрытьФорму("Справочник.усНоменклатура.ФормаВыбора",,,,,, Новый ОписаниеОповещения("ОткрытьСписокЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗавершение(Результат, дПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Номенклатура		= Результат;
		Коэффициент			= 1;
		ВестиПартионныйУчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "МодельУчета.ВестиПартионныйУчет");
		//++ БПС 30.05.2023 №70597
		ОбработатьВводНоменклатуры(МИ_РежимУпаковкиМК);
		//-- БПС 30.05.2023 №70597
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриступитьКУпаковкеНажатие(Элемент)
	
	////++ БПС 30.05.2023 №70597
	//Если тбпЗадачиПеремещенияПоЗаказу.Количество() = 0 Тогда
	//	ТекстОшибки = НСтр("ru = 'ОШИБКА. Нет задач на перемещение.'");
	//	Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
	//	Возврат;
	//КонецЕсли;
	////-- БПС 30.05.2023 №70597
	
	ВыполнитьПеремещениеВЗонуУпаковки();
	//--> МИ-1 / 2019-05-22
	ПриИзмененииЗаказаНаОтгрузкуНаКлиенте();
	//<-- МИ-1 / 2019-05-22
	
	//++ БПС 30.05.2023 №70597
	ОбновитьСостояниеРежимовРаботы();
	//-- БПС 30.05.2023 №70597
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПеремещениеВЗонуУпаковки()
	
	Успешно = Истина;
	
	Для Каждого Строка Из тбпЗадачиПеремещенияПоЗаказу Цикл
		ТекущийНачальныйКонтейнер	= Строка.Контейнер;
		ЗаказНаОтгрузку 			= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Задача, "ДокументОснование");

		Ошибка = "";
		Если Не усУправлениеЗадачами.ВыполнитьДействиеПоложитьЦелыйКонтейнер(Строка.Задача, Ячейка, Неопределено, -1, Ошибка) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Строка(Строка.Задача) + ": " + Ошибка, Строка.Задача);	
			усУправлениеЗадачами.ЗаблокироватьЗадачуПеремещениеКонтейнера(Строка.Задача, Ошибка, Справочники.усПричиныБлокировкиЗадач.НетМеста);
			Успешно = Ложь;
			Прервать;
		Иначе
			СоставКонтейнера = усСервисныеФункции.ПолучитьСоставПоКонтейнеру(Строка.Контейнер);
			
			текКоличество	= СоставКонтейнера.Итог("Количество");
			текОбъем 		= 0;
			
			Для Каждого стр Из СоставКонтейнера Цикл
				сткДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(стр.Номенклатура, "Масса, Объем, ВложениеДругВДруга, ДобавочныйОбъемПриВложении");
				Если Не ПолучитьФункциональнуюОпцию("усИспользуетсяВложенностьТоваров") ИЛИ Не сткДанные.ВложениеДругВДруга Тогда 
					текОбъем = текОбъем + сткДанные.Объем * текКоличество;
				Иначе	
					текОбъем = текОбъем + усУправлениеСкладомСервер.ПолучитьОбъем(стр.Номенклатура,, текКоличество,, сткДанные);
				КонецЕсли;	
			КонецЦикла;
			
			усПроведениеДокумента.ЗаписатьВыполнениеЗадачи(Строка.Задача, Исполнитель, 1, текКоличество, сткДанные.Масса * текКоличество, текОбъем, Перечисления.усРезультатВыполненияЗадачи.Успешно);
		КонецЕсли;
	КонецЦикла;
	
	Если Успешно Тогда
		тбпЗадачиПеремещенияПоЗаказу.Очистить();
		//++ БПС 30.05.2023 №70597
		Если ЗначениеЗаполнено(ТекущийНачальныйКонтейнер) Тогда
			МИ_РежимУпаковкиМК = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийНачальныйКонтейнер, Новый Структура("МастерКонтейнер", "ТипКонтейнера.МастерКонтейнер")).МастерКонтейнер;
		КонецЕсли;
		Если МИ_РежимУпаковкиМК Тогда
			ПриИзмененииНачальногоКонтейнера(, Истина);
		Иначе
			ПриИзмененииЗаказаНаОтгрузку();
		КонецЕсли;
		Элементы.ГруппаПланИлиСоставСтраницы.ТекущаяСтраница = Элементы.ГруппаПланПоЗаказу;
		//-- БПС 30.05.2023 №70597
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗавершитьКонтрольНажатие(Элемент)
	
	ПараметрыОткрытияФормы = Новый Структура;
	спКнопок = Новый СписокЗначений;
	спКнопок.Добавить("Да", "Да");
	спКнопок.Добавить("Нет", "Нет");
	спКнопок.Добавить("Отмена", "Отмена");
	ПараметрыОткрытияФормы.Вставить("СписокКнопок", спКнопок);
	ПараметрыОткрытияФормы.Вставить("ТекстВопроса", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Зафиксировать недостачу?'"), ТекущийНачальныйКонтейнер));
	
	ОткрытьФорму("ОбщаяФорма.усФормаВопрос", ПараметрыОткрытияФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ЗавершитьКонтрольЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьКонтрольЗавершение(Результат, дПараметры) Экспорт
	
	Если Результат = "Да" Тогда
		// списать состав контейнера
		Если ЕстьЧтоСписать() Тогда
			Описание_ВводПароля = Новый ОписаниеОповещения("ПослеВводаПароля", ЭтаФорма);
			ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковкиОперативное.Форма.ФормаВводПароляСписания", , ЭтаФорма,,,, Описание_ВводПароля, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			//ПланПоКонтейнеру = Ложь;
			//СписатьНепроконтролированныйОстаток();
			
			Для Индекс = 1 По КоличествоКонтейнеров Цикл
				Если ЗначениеЗаполнено(ЭтаФорма["НачальныйКонтейнер" + Индекс]) Тогда
					ЭтаФорма["НачальныйКонтейнер" + Индекс] = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
				КонецЕсли;			
			КонецЦикла;
			
			ЗаказНаОтгрузку = Неопределено;
			ПланПоКонтейнеру = Ложь;
			ПредставлениеНоменклатуры = "Номенклатура не отсканирована";
			Элементы.ДекорацияКонтрагент.Заголовок = "";
			ОбновитьПланПоЗаказу();
			
			ТекущийЭлементСканирования = ?(миПеремещатьКонтейнерыВЗонуУпаковки, "Перемещение", "ЗаказНаОтгрузку");
			УстановитьТекстПодсказкиНаКлиенте();
		КонецЕсли;
	ИначеЕсли Результат = "Нет" Тогда
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
				ТекстОшибки = НСтр( "ru = 'ОШИБКА. Остались незакрытые конечные контейнеры.'" );
				Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			Если ЗначениеЗаполнено(ЭтаФорма["НачальныйКонтейнер" + Индекс]) Тогда
                ЭтаФорма["НачальныйКонтейнер" + Индекс] = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
            КонецЕсли;			
		КонецЦикла;
		
		ЗаказНаОтгрузку = Неопределено;
		ПланПоКонтейнеру = Ложь;
		ПредставлениеНоменклатуры = "Номенклатура не отсканирована";
		Элементы.ДекорацияКонтрагент.Заголовок = "";
		ОбновитьПланПоЗаказу();
		
		ТекущийЭлементСканирования = ?(миПеремещатьКонтейнерыВЗонуУпаковки, "Перемещение", "ЗаказНаОтгрузку");
		УстановитьТекстПодсказкиНаКлиенте();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПароля(Результат, дПараметры) Экспорт
	
	Если Результат = "Списывать" Тогда
		ПланПоКонтейнеру = Ложь;
		СписатьНепроконтролированныйОстаток();
		
		Для Индекс = 1 По КоличествоКонтейнеров Цикл
			Если ЗначениеЗаполнено(ЭтаФорма["НачальныйКонтейнер" + Индекс]) Тогда
		        ЭтаФорма["НачальныйКонтейнер" + Индекс] = ПредопределенноеЗначение("Справочник.усКонтейнеры.ПустаяСсылка");
		    КонецЕсли;			
		КонецЦикла;
		
		ЗаказНаОтгрузку = Неопределено;
		ПланПоКонтейнеру = Ложь;
		ПредставлениеНоменклатуры = "Номенклатура не отсканирована";
		Элементы.ДекорацияКонтрагент.Заголовок = "";
		ОбновитьПланПоЗаказу();
		
		ТекущийЭлементСканирования = ?(миПеремещатьКонтейнерыВЗонуУпаковки, "Перемещение", "ЗаказНаОтгрузку");
		УстановитьТекстПодсказкиНаКлиенте();
	КонецЕсли;
	
конецПроцедуры	

&НаСервере
Функция ЕстьЧтоСписать()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	усПоложениеКонтейнеровОстатки.Контейнер
	|ПОМЕСТИТЬ втКонтейнеры
	|ИЗ
	|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
	|			,
	|			Ячейка = &Ячейка
	|				И Контейнер.ДокументПривязки = &ЗаказНаОтгрузку
	|				И НЕ Контейнер В (&КонечныеКонтейнеры)) КАК усПоложениеКонтейнеровОстатки
	|ГДЕ
	|	усПоложениеКонтейнеровОстатки.КоличествоОстаток = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	усОстаткиТоваровОстатки.Контейнер
	|ИЗ
	|	РегистрНакопления.усОстаткиТоваров.Остатки(
	|			,
	|			Контейнер В
	|				(ВЫБРАТЬ
	|					втКонтейнеры.Контейнер
	|				ИЗ
	|					втКонтейнеры)) КАК усОстаткиТоваровОстатки
	|ГДЕ
	|	усОстаткиТоваровОстатки.КоличествоОстаток > 0");
	
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
	
	мКонтейнеры = Новый Массив;
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			мКонтейнеры.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеСтроки Из КонечныеКонтейнеры Цикл
		Если мКонтейнеры.Найти(ДанныеСтроки.Контейнер) = Неопределено Тогда
			мКонтейнеры.Добавить(ДанныеСтроки.Контейнер);
		КонецЕсли;		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КонечныеКонтейнеры", мКонтейнеры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции	

&НаСервере
Процедура СписатьНепроконтролированныйОстаток()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	усПоложениеКонтейнеровОстатки.Контейнер
	|ИЗ
	|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
	|			,
	|			Ячейка = &Ячейка
	|				И Контейнер.ДокументПривязки = &ЗаказНаОтгрузку
	|				И НЕ Контейнер В (&КонечныеКонтейнеры)
	|				И НЕ Контейнер.Упакован) КАК усПоложениеКонтейнеровОстатки
	|ГДЕ
	|	усПоложениеКонтейнеровОстатки.КоличествоОстаток = 1");
	
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
	
	мКонтейнеры = Новый Массив;
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			мКонтейнеры.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеСтроки Из КонечныеКонтейнеры Цикл		
		Если мКонтейнеры.Найти(ДанныеСтроки.Контейнер) = Неопределено Тогда
			мКонтейнеры.Добавить(ДанныеСтроки.Контейнер);
		КонецЕсли;		
	КонецЦикла; 
	
	Запрос.УстановитьПараметр("КонечныеКонтейнеры", мКонтейнеры);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		КонтрольСоставаКонтейнера(Выборка.Контейнер, Истина);	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура тбпПланПоЗаказуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТекущийЭлементСканирования = "Номенклатура" тогда
		текДанные = Элементы.тбпПланПоЗаказу.ТекущиеДанные;
		Если текДанные <> Неопределено Тогда
			//++ БПС 30.05.2023 №70597
			ПродолжитьОбработкуНоменклатуры = Истина;
			Если МИ_РежимУпаковкиМК Тогда
				Если ЗначениеЗаполнено(ЗаказНаОтгрузку) И текДанные.ЗаказНаОтгрузку <> ЗаказНаОтгрузку Тогда
					ТекстОшибки = НСтр("ru = 'ОШИБКА. Номенклатура по другому заказу на отгрузку.'");
					Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
					ПродолжитьОбработкуНоменклатуры = Ложь;
				КонецЕсли;
			КонецЕсли;
			//-- БПС 30.05.2023 №70597
			Если ПродолжитьОбработкуНоменклатуры Тогда
				Номенклатура			= текДанные.Номенклатура;
				СтатусНоменклатуры		= текДанные.СтатусНоменклатуры;
				ПартияНоменклатуры		= текДанные.ПартияНоменклатуры;
				УпаковкаНоменклатуры	= ПредопределенноеЗначение("Справочник.усУпаковкиНоменклатуры.ПустаяСсылка");
				Коэффициент				= 1;
				//++ БПС 30.05.2023 №70597
				ПараметрыОповещенияОЗакрытии = Новый Структура("ИмяМетода, Используется", "ОбработатьВводНоменклатуры", Ложь);
				Если Не ЗначениеЗаполнено(ЗаказНаОтгрузку) И МИ_РежимУпаковкиМК Тогда
					ЗаказНаОтгрузку	= текДанные.ЗаказНаОтгрузку;
					ПриИзмененииЗаказаНаОтгрузку(, Истина);
					//--> МИ-1 / 2019-05-22
					ПриИзмененииЗаказаНаОтгрузкуНаКлиенте(ПараметрыОповещенияОЗакрытии);
					//<-- МИ-1 / 2019-05-22
				КонецЕсли;
				Если Не ПараметрыОповещенияОЗакрытии.Используется Тогда
					ОбработатьВводНоменклатуры(МИ_РежимУпаковкиМК);
				КонецЕсли;
				//-- БПС 30.05.2023 №70597
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокКонтейнеров()
	
	мсвИсключаемыеЭлементы = Новый Массив;
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["НачальныйКонтейнер" + Индекс]) Тогда
			мсвИсключаемыеЭлементы.Добавить(ЭтаФорма["НачальныйКонтейнер" + Индекс]);
		КонецЕсли;
	КонецЦикла;
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			мсвИсключаемыеЭлементы.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	//++ БПС 30.05.2023 №70597
	Если МИ_РежимУпаковкиМК Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	усПоложениеКонтейнеровОстатки.Контейнер
		|ИЗ
		|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(, Ячейка = &Ячейка) КАК усПоложениеКонтейнеровОстатки
		|ГДЕ
		|	усПоложениеКонтейнеровОстатки.Контейнер.ДокументПривязки = НЕОПРЕДЕЛЕНО
		|	И усПоложениеКонтейнеровОстатки.Контейнер.ТипКонтейнера.МастерКонтейнер
		|	И усПоложениеКонтейнеровОстатки.КоличествоОстаток = 1
		|	И усПоложениеКонтейнеровОстатки.КоличествоРасходОстаток = 0
		|	И НЕ усПоложениеКонтейнеровОстатки.Контейнер В (&мсвИсключаемыеЭлементы)";
	//-- БПС 30.05.2023 №70597
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	усПоложениеКонтейнеровОстатки.Контейнер
		|ИЗ
		|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(, Ячейка = &Ячейка) КАК усПоложениеКонтейнеровОстатки
		|ГДЕ
		|	усПоложениеКонтейнеровОстатки.Контейнер.ДокументПривязки <> НЕОПРЕДЕЛЕНО
		|	И усПоложениеКонтейнеровОстатки.КоличествоОстаток = 1
		|	И усПоложениеКонтейнеровОстатки.КоличествоРасходОстаток = 0
		|	И НЕ усПоложениеКонтейнеровОстатки.Контейнер В (&мсвИсключаемыеЭлементы)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	Запрос.УстановитьПараметр("мсвИсключаемыеЭлементы", мсвИсключаемыеЭлементы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контейнер");
	
КонецФункции

&НаКлиенте
Процедура ВыборКонтейнера(Команда)
	
	ПланПоКонтейнеру = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", ПолучитьСписокКонтейнеров()));
	ОткрытьФорму("Справочник.усКонтейнеры.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ВвестиНачальныйКонтейнерЗавершение", ЭтотОбъект, Новый Структура("Команда", Команда)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревыбратьНоменклатуру(Элемент)
	
	ТекущийЭлементСканирования = "Номенклатура";
	УстановитьТекстПодсказки();
	
КонецПроцедуры

&НаСервере
Функция СоздатьНовыйМастерКонтейнерНаСервере()	
	
	Если НЕ ЗначениеЗаполнено(ТипМастерКонтейнераПоУмолчанию) Тогда
		ТекстОшибки = НСтр( "ru = 'Не указан тип мастер контейнера по умолчанию в настройках рабочего потока.'");
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		Возврат Неопределено;
	Иначе
		НомерЗаказаНаОтгрузку = ?(ЗначениеЗаполнено(ЗаказНаОтгрузку), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказНаОтгрузку, "НомерКИС"), "");
		Возврат усСервисныеФункции.СоздатьКонтейнер(ТипМастерКонтейнераПоУмолчанию, НомерЗаказаНаОтгрузку, 1);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СоздатьМастерКонтейнерНаСервере()
	
	МастерКонтейнер = СоздатьНовыйМастерКонтейнерНаСервере();
	Если НЕ ЗначениеЗаполнено(МастерКонтейнер) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяЗадача = Документы.усЗадачаПересчет.СоздатьДокумент();
	НоваяЗадача.Дата = ТекущаяДата();
	
	НоваяЗадача.Статус             = Перечисления.усСтатусыЗадач.КВыполнению;
	НоваяЗадача.ТипЗадачи          = Перечисления.усТипыЗадачПересчета.ИнвентаризацияКонтейнеров;
	НоваяЗадача.Важность           = Перечисления.усВажностьЗадач.Обычная;
	НоваяЗадача.ПлановоеВремя      = ТекущаяДата() + 60;
	
	НоваяЗадача.Ячейка             = Ячейка;
	НоваяЗадача.Контейнер          = МастерКонтейнер;
	
	НоваяСтрока = НоваяЗадача.Контейнеры.Добавить();
	НоваяСтрока.Ячейка             = Ячейка;
	НоваяСтрока.Контейнер          = МастерКонтейнер;
	НоваяСтрока.КоличествоФакт     = 1;
	НоваяСтрока.КоличествоПлан     = 0;
	
	НоваяЗадача.Записать(РежимЗаписиДокумента.Запись);
	
	сткТаблицПроведения    = Новый Структура;
	НовоеДействие          = усПроведениеДокумента.ПолучитьНовоеДействиеПоПересчету(НоваяЗадача, сткТаблицПроведения);
	
	Ошибка = "";
	Если Не усПроведениеДокумента.ЗаписатьДействиеПоПересчету(сткТаблицПроведения, НоваяЗадача, НовоеДействие, Перечисления.усСтатусыЗадач.Выполнена, Ошибка) Тогда 
		НоваяЗадача.Статус = Перечисления.усСтатусыЗадач.Отменена;
		НоваяЗадача.Записать(РежимЗаписиДокумента.Запись);
		
		ТекстОшибки = Ошибка;
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		МастерКонтейнер = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМастерКонтейнер(Команда)
	
	СоздатьМастерКонтейнерНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаказЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) тогда
		ОтключитьОбработчикОжидания("НайтиЗадачи");
		
		Если ЗаказНаОтгрузку <> Результат тогда
			ВернутьЗадачиКВыполнению();
			ЗаказНаОтгрузку = Результат;
		КонецЕсли;
		
		ПланПоКонтейнеру = Ложь;
		ПриИзмененииЗаказаНаОтгрузку();
		//--> МИ-1 / 2019-05-22
		ПриИзмененииЗаказаНаОтгрузкуНаКлиенте();
		//<-- МИ-1 / 2019-05-22
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗаказов(Команда)
	
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			ТекстОшибки = НСтр( "ru = 'ОШИБКА. Остались незакрытые конечные контейнеры.'" );
			Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	сзСтатусы = Новый СписокЗначений;
	сзСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.усСтатусыЗаказовНаОтгрузку.ВОтборе"));
	сзСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.усСтатусыЗаказовНаОтгрузку.Отобран"));
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Статус", сзСтатусы));
	ОткрытьФорму("Документ.усЗаказНаОтгрузку.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ВыбратьЗаказЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеЗаказаУпаковывается()
	
	Попытка
		Запись = РегистрыСведений.усСтатусыЗаказовНаОтгрузку.СоздатьМенеджерЗаписи();
		Запись.ЗаказНаОтгрузку	= ЗаказНаОтгрузку;
		Запись.Прочитать();
		Запись.ЗаказНаОтгрузку	= ЗаказНаОтгрузку;
		Запись.Упаковывается	= Истина;
		Запись.Записать(Истина);
		
		ЗаказУпаковывается = Истина;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьПоАртикулуНаСервере(Направление)
	
	тбпПланПоЗаказу.Сортировать("НоменклатураАртикул " + Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоАртикулу(Команда)
	
	Если Команда.Имя = "СортировкаПоАртикулуУбыв" Тогда 
		СортироватьПоАртикулуНаСервере("УБЫВ");
	Иначе
		СортироватьПоАртикулуНаСервере("ВОЗР");
	КонецЕсли;
	
КонецПроцедуры

//!ШРВ 04.09.2017 16:59:57 Конец

&НаКлиенте
Процедура Печать(Контейнер)
	
	ДокументПривязки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контейнер, "ДокументПривязки");
	Если Не ЗначениеЗаполнено(ДокументПривязки) Тогда
		Возврат;
	КонецЕсли;
	
	//--> МИ-1 / #9350# / 2022-01-24
	Если ПечатьУпаковочногоЛиста И ЗначениеЗаполнено(миАлгоритмПечатиУпаковочногоЛиста) Тогда
		ПечатьУпаковочногоЛистаПоАлгоритму(Контейнер, миАлгоритмПечатиУпаковочногоЛиста);
	//<-- МИ-1 / #9350# / 2022-01-24

	ИначеЕсли ПечатьУпаковочногоЛиста ИЛИ ПечатьЭтикеткиКонтейнера ИЛИ ПечатьЭтикеткиТоваров Тогда
	    КонтейнерДляПечати = Контейнер;
		Элементы.ГруппаСоставПечать.ТекущаяСтраница = Элементы.ГруппаПечать;
			
		//ПараметрыОткрытияФормы = Новый Структура();
		//ПараметрыОткрытияФормы.Вставить("Контейнер", Контейнер);
		//ПараметрыОткрытияФормы.Вставить("ПечатьУпаковочногоЛиста", ПечатьУпаковочногоЛиста);
		//ПараметрыОткрытияФормы.Вставить("ПечатьЭтикеткиКонтейнера", ПечатьЭтикеткиКонтейнера);
		//ПараметрыОткрытияФормы.Вставить("ПечатьЭтикеткиТоваров", ПечатьЭтикеткиТоваров);
		//ПараметрыОткрытияФормы.Вставить("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
		//
		//ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковки.Форма.ФормаПечать", ПараметрыОткрытияФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьУпаковочногоЛистаПоАлгоритму(Контейнер, АлгоритмПечати)
	
	СтратегияПечати = СформироватьСтратегиюПечатиУпаковочногоЛиста(Контейнер, АлгоритмПечати);
	
	Для Каждого текЭлемент Из СтратегияПечати Цикл
		ИдентификаторПечати	= текЭлемент.ИдентификаторПечати;
		СсылкаНаИсточник	= текЭлемент.СсылкаНаИсточник;
		
		Если текЭлемент.Свойство("СразуНаПринтер") Тогда
			СразуНаПринтер = текЭлемент.СразуНаПринтер;
		Иначе
			СразуНаПринтер = ПечатьНаПринтер;
		КонецЕсли;
		
		//++ Москвин М. №52946
		// Если в алгоритме был указан принтер для печати, возьмем его.
		текИмяПринтера = "";
		текЭлемент.Свойство("ИмяПринтера", текИмяПринтера);
		//-- Москвин М. №52946
		
		Если ИдентификаторПечати = "усКонтейнерыПрисоединенныйФайл" Тогда
			ПолныйПутьКФайлу = Строка(СсылкаНаИсточник);
			Если СразуНаПринтер Тогда
			    ShellApp         = Новый COMОбъект("Shell.Application");
		    	ShellApp.ShellExecute(ПолныйПутьКФайлу, "", "", "print", 0);
			Иначе
				Попытка	
					ЗапуститьПриложение(ПолныйПутьКФайлу);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;	
			КонецЕсли;
				
		ИначеЕсли ИдентификаторПечати = "усКонтейнерыПечатнаяФорма" Тогда
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(Контейнер);
			
			ИмяМакетаПечати = Строка(СсылкаНаИсточник);
			ПараметрыПечати = Новый Структура;
			//++ Москвин М. №52946
			ПараметрыПечати.Вставить("ИмяПринтера", текИмяПринтера);
			//-- Москвин М. №52946
			
			Если СразуНаПринтер Тогда
				//++ Москвин М. №52946
				// Т.к. нельзя вносить изменения в ОМ БСП, переопределил процедуру
				
				//УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
				//	"Справочник.усКонтейнеры",
				//	ИмяМакетаПечати,
				//	МассивОбъектов,
				//	ПараметрыПечати);
				
				МИ_Клиент.ВыполнитьКомандуПечатиНаПринтер(
					"Справочник.усКонтейнеры",
					ИмяМакетаПечати,
					МассивОбъектов,
					ПараметрыПечати,
					текИмяПринтера);
				//-- Москвин М. №52946
			Иначе
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
					"Справочник.усКонтейнеры",
					ИмяМакетаПечати,
					МассивОбъектов,
					Неопределено,
					ПараметрыПечати);
			КонецЕсли;
			
		ИначеЕсли ИдентификаторПечати = "усРабочееМестоОператораУпаковки" Тогда
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(Контейнер);
			
			ИмяМакетаПечати = Строка(СсылкаНаИсточник);
			ПараметрыПечати = Новый Структура("ВБазовых");
			
			Если СразуНаПринтер Тогда
				//++ Москвин М. №52946
				// Т.к. нельзя вносить изменения в ОМ БСП, переопределил процедуру
				
				//УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
				//	"Обработка.усРабочееМестоОператораУпаковкиОперативное",
				//	ИмяМакетаПечати,
				//	МассивОбъектов,
				//	ПараметрыПечати);
					
				МИ_Клиент.ВыполнитьКомандуПечатиНаПринтер(
					"Справочник.усКонтейнеры",
					ИмяМакетаПечати,
					МассивОбъектов,
					ПараметрыПечати,
					текИмяПринтера);
				//-- Москвин М. №52946
			Иначе
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
					"Обработка.усРабочееМестоОператораУпаковкиОперативное",
					ИмяМакетаПечати,
					МассивОбъектов,
					Неопределено,
					ПараметрыПечати);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСтратегиюПечатиУпаковочногоЛиста(Контейнер, АлгоритмПечати)
	
	МассивВозврат = Новый Массив;
	
	Попытка
		ПроизвольныйАлгоритм = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АлгоритмПечати, "ПроизвольныйАлгоритм");
		УстановитьБезопасныйРежим("WMS4");
		Выполнить(ПроизвольныйАлгоритм);
		УстановитьБезопасныйРежим(Ложь);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = '(ми) ПроизвольныеАлгоритмы.АлгоритмПечатиУпаковочногоЛиста'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		МассивВозврат.Очистить();
	КонецПопытки;
	
	Возврат МассивВозврат;
	
КонецФункции

&НаСервере
Процедура ИзменитьШтрихкодКонтейнера(Контейнер)
	
//++ВИА 22.12.2022 задача:57253
	НовыйШтрихкод = МИ_МаркетПлейсы.ШтрихКодПоЗаказуНаОтгрузку(ЗаказНаОтгрузку);
	
	//ДанныеЭтикетки = миСервисныеФункции.СформироватьДанныеЭтикетки(ЗаказНаОтгрузку);
	//
	//Если ТипЗнч(ДанныеЭтикетки) = Тип("Структура") Тогда
	//	НовыйШтрихкод = ПолучитьЗначениеШтрихкодаИзСтруктуры(ДанныеЭтикетки);
	Если ЗначениеЗаполнено(НовыйШтрихкод) Тогда
		КонтейнерОбъект = Контейнер.ПолучитьОбъект();
		КонтейнерОбъект.Наименование 	= НовыйШтрихкод;
		КонтейнерОбъект.Штрихкод 		= НовыйШтрихкод;
		КонтейнерОбъект.Записать();
	КонецЕсли;
	//КонецЕсли;
//--ВИА 22.12.2022 задача:57253
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЗаказаНаОтгрузкуНаКлиенте(ПараметрыОповещенияОЗакрытии = Неопределено)
	
	текМассивФайлы = Новый Массив;
	
	Если ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
		текМассивФайлы = ПолучитьПрисоединенныеФайлы(ЗаказНаОтгрузку);
	КонецЕсли;
	
	Если текМассивФайлы.Количество() Тогда
		Элементы.ГруппаПоказатьИнструкции.Видимость = Истина;
	Иначе
		Элементы.ГруппаПоказатьИнструкции.Видимость = Ложь;
	КонецЕсли;
	
	//++ БПС 30.05.2023 №70597
	Если Элементы.ГруппаПоказатьИнструкции.Видимость Тогда
		Если ТипЗнч(ПараметрыОповещенияОЗакрытии) = Тип("Структура") Тогда
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПриИзмененииЗаказаНаОтгрузкуНаКлиентеЗавершение", ЭтотОбъект, ПараметрыОповещенияОЗакрытии);
			ПараметрыОповещенияОЗакрытии.Используется = Истина;
		Иначе
			ОповещениеОЗакрытии = Неопределено;
		КонецЕсли;
		ОткрытьФорму("Обработка.усРабочееМестоОператораУпаковкиОперативное.Форма.ФормаПредупреждение",, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	//-- БПС 30.05.2023 №70597
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЗаказаНаОтгрузкуНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ИмяМетода = Неопределено;
		Если ДополнительныеПараметры.Свойство("ИмяМетода", ИмяМетода) Тогда
			Если ИмяМетода = "ОбработатьВводНоменклатуры" Тогда
				ОбработатьВводНоменклатуры(МИ_РежимУпаковкиМК);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПрисоединенныеФайлы(ДокументОснование)
	
	текМассивФайлы = Новый Массив;
	
	текЗапрос = Новый Запрос;
	текЗапрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	усСтрокаЗаказаНаОтгрузку.Номенклатура
	|ИЗ
	|	Документ.усСтрокаЗаказаНаОтгрузку КАК усСтрокаЗаказаНаОтгрузку
	|ГДЕ
	|	усСтрокаЗаказаНаОтгрузку.Владелец = &Владелец
	|	И НЕ усСтрокаЗаказаНаОтгрузку.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	усСтрокаЗаказаНаОтгрузку.Номенклатура.Артикул";
	
	текЗапрос.УстановитьПараметр("Владелец", ДокументОснование);
	текМассивТовары = текЗапрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Если текМассивТовары.Количество() Тогда
		текФайлы = Справочники.усНоменклатура.ПолучитьФайлыИнструкции(текМассивТовары);
		Для Каждого текФайл Из текФайлы Цикл
			текМассивФайлы.Добавить(текФайл);
		КонецЦикла;
	КонецЕсли;
	
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
	Если ЗначениеЗаполнено(Контрагент) Тогда
		текФайлы = Справочники.усКонтрагенты.ПолучитьФайлыИнструкции(Контрагент);
		Для Каждого текФайл Из текФайлы Цикл
			текМассивФайлы.Добавить(текФайл);
		КонецЦикла;
	КонецЕсли;
	
	Возврат текМассивФайлы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекстПодсказкиНаКлиенте()
	
	Если ТекущийЭлементСканирования = "Перемещение" Тогда
		Если миПеремещатьКонтейнерыПоРабочемуПотоку Тогда
			ПодключитьОбработчикОжидания("НайтиЗадачи", 10);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТекстПодсказки();
	
КонецПроцедуры

&НаСервере
Функция НайтиКонтейнерПоАлгоритмуПоиска(Контейнер, АлгоритмПоиска)
	
	сткВозврат = Новый Структура("Ошибка", "");
	
	тзКонтейнеры = Новый ТаблицаЗначений;
	
	Попытка
		ПроизвольныйАлгоритм = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АлгоритмПоиска, "ПроизвольныйАлгоритм");
		УстановитьБезопасныйРежим("WMS4");
		Выполнить(ПроизвольныйАлгоритм);
		УстановитьБезопасныйРежим(Ложь);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = '(ми) ПроизвольныеАлгоритмы.АлгоритмПоискаКонтейнера'"), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецПопытки;
	
	Если тзКонтейнеры.Количество() = 0 Тогда
		сткВозврат.Ошибка = НСтр("ru = 'Контейнер не доступен для перемещения в зону упаковки'");
	КонецЕсли;
	
	Для Каждого ДанныеСтроки Из тзКонтейнеры Цикл
		ЗадачаСсылка = ДанныеСтроки.Задача;
		
		Если Не ЗначениеЗаполнено(ЗадачаСсылка) Тогда
			ЗадачаСсылка = усТСДОсновной.СоздатьЗадачуПеремещенияКонтейнера(, Перечисления.усТипыЗадач.Перемещение, ДанныеСтроки.Ячейка,, ДанныеСтроки.Контейнер, ДанныеСтроки.ДокументОснование, Справочники.усСкладскиеСотрудники.ПустаяСсылка());
			
			ЗадачаОбъект = ЗадачаСсылка.ПолучитьОбъект();
			ЗадачаОбъект.КонечнаяЗона	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ячейка, "Зона");
			ЗадачаОбъект.КонечнаяЯчейка = Ячейка;
			
			ТекстОшибки = "";
			Если Не усУправлениеЗадачами.ПередатьЗадачуПеремещениеКонтейнераНаИсполнение(ЗадачаОбъект, ТекстОшибки) Тогда
				ЗадачаСсылка = Неопределено;
				
				ЗадачаОбъект.Статус = Перечисления.усСтатусыЗадач.Отменена;
				ЗадачаОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					сткВозврат.Ошибка = ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗадачаСсылка) Тогда
			ЗадачаПолучена = усУправлениеЗадачами.ПолучитьЗадачуДляИсполнителя(Исполнитель, ЗадачаСсылка, Ложь, Неопределено);
		Иначе
			ЗадачаПолучена = Ложь;
		КонецЕсли;
		
		Если ЗадачаПолучена Тогда
			НоваяСтрока = тбпЗадачиПеремещенияПоЗаказу.Добавить();
			НоваяСтрока.Ячейка			= ДанныеСтроки.Ячейка;
			НоваяСтрока.Контейнер		= ДанныеСтроки.Контейнер;
			//++ БПС 30.05.2023 №70597
			НоваяСтрока.ЗаказНаОтгрузку = ДанныеСтроки.ДокументОснование;
			//-- БПС 30.05.2023 №70597
			НоваяСтрока.Задача			= ЗадачаСсылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат сткВозврат;
	
КонецФункции

&НаСервере
Функция КонтрольПланаПоЗаказу(КонтрольКонтейнеров = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	усПоложениеКонтейнеров.Контейнер КАК Контейнер
	|ПОМЕСТИТЬ втКонтейнеры
	|ИЗ
	|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(
	|			,
	|			Контейнер.ДокументПривязки = &ЗаказНаОтгрузку
	|				И НЕ Контейнер В (&КонечныеКонтейнеры)) КАК усПоложениеКонтейнеров
	|ГДЕ
	|	усПоложениеКонтейнеров.КоличествоОстаток = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	усОстаткиТоваровОстатки.Контейнер,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры КАК СтатусНоменклатуры,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры КАК ПартияНоменклатуры,
	|	СУММА(усОстаткиТоваровОстатки.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.усОстаткиТоваров.Остатки(
	|			,
	|			Контейнер В
	|				(ВЫБРАТЬ
	|					втКонтейнеры.Контейнер
	|				ИЗ
	|					втКонтейнеры)) КАК усОстаткиТоваровОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	усОстаткиТоваровОстатки.Контейнер,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.Номенклатура,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.СтатусНоменклатуры,
	|	усОстаткиТоваровОстатки.КлючАналитикиУчетаНоменклатуры.ПартияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	усПоложениеКонтейнеров.Контейнер КАК Контейнер
	|ИЗ
	|	РегистрНакопления.усПоложениеКонтейнеров.Остатки(, Контейнер.ДокументПривязки = &ЗаказНаОтгрузку) КАК усПоложениеКонтейнеров
	|ГДЕ
	|	усПоложениеКонтейнеров.КоличествоОстаток = 1";
	
	мКонтейнеры = Новый Массив;
	Для Индекс = 1 По КоличествоКонтейнеров Цикл
		Если ЗначениеЗаполнено(ЭтаФорма["КонечныйКонтейнер" + Индекс]) Тогда
			мКонтейнеры.Добавить(ЭтаФорма["КонечныйКонтейнер" + Индекс]);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ДанныеСтроки Из КонечныеКонтейнеры Цикл
		Если мКонтейнеры.Найти(ДанныеСтроки.Контейнер) = Неопределено Тогда
			мКонтейнеры.Добавить(ДанныеСтроки.Контейнер);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КонечныеКонтейнеры", мКонтейнеры);
	Запрос.УстановитьПараметр("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
	текМассивПакет = Запрос.ВыполнитьПакет();
	
	Если текМассивПакет[1].Пустой() Тогда
		ЗначениеВозврат = Истина;
	Иначе
		ЗначениеВозврат = Ложь;
	КонецЕсли;
	
	Если КонтрольКонтейнеров Тогда
		тзКонтейнеры = текМассивПакет[2].Выгрузить();
		Если тзКонтейнеры.Количество() > 1 Тогда
			ЗначениеВозврат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеВозврат;
	
КонецФункции

&НаКлиенте
Процедура УпаковатьСписокНоменклатурыПоПлануНажатие(Элемент)
	
	//++ Москвин М. №50762
	Если ЕстьИсполнителиСЗапретомНаУпаковку(ЗаказНаОтгрузку) Тогда
		ТекстОшибки = НСтр("ru = 'ОШИБКА. Упаковка по плану запрещена. Необходим контроль отобранного товара.'");
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		Возврат;
	КонецЕсли;
	//-- Москвин М. №50762
	
	Если Не ЗначениеЗаполнено(ТекущийКонечныйКонтейнер) Тогда
		ТекстОшибки = НСтр("ru = 'ОШИБКА. Не выбран конечный контейнер.'");
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		Возврат;
	КонецЕсли;
	
	//++ SLT #13181 2022-10-05 Москвин М.
	планПоЗаказуКопия = тбпПланПоЗаказу;
	Если ЕстьНоменклатураСЗапросомСН(планПоЗаказуКопия) Тогда
		ТекстОшибки = НСтр("ru = 'В планах есть номенклатура по которой ведется учет С/Н!'");
		Элементы.ДекорацияТекстОшибки.Заголовок = ТекстОшибки;
		Возврат;
	КонецЕсли;
	//-- SLT #13181 2022-10-05 Москвин М.
	
	// упаковка номенклатуры по плану
	УпаковатьСписокНоменклатурыНаСервере();
		
	// обработка действий на клиенте
	Если ОбновитьДанныеЗаказКонтейнер Тогда
		ОбновитьДанныеЗаказКонтейнер();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УпаковатьСписокНоменклатурыНаСервере()
	
	Для Каждого ДанныеСтроки Из тбпПланПоЗаказу Цикл
		Номенклатура			= ДанныеСтроки.Номенклатура;
		СтатусНоменклатуры		= ДанныеСтроки.СтатусНоменклатуры;
		ПартияНоменклатуры		= ДанныеСтроки.ПартияНоменклатуры;
		КоличествоКПеремещению	= Мин(ДанныеСтроки.Количество, ДанныеСтроки.КоличествоПоЗаказу);
		
		Если КоличествоКПеремещению > 0 Тогда
			СоздатьЗадачуПеремещенияТовара(КоличествоКПеремещению, ТекущийКонечныйКонтейнер);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеЗаказКонтейнер = Истина;
	
КонецПроцедуры

//++ SLT #13181 2022-10-05 Москвин М.
&НаСервереБезКонтекста
Функция ЕстьНоменклатураСЗапросомСН(ПланПоЗаказу)
	
	тбзПлан = ДанныеФормыВЗначение(ПланПоЗаказу, Тип("ТаблицаЗначений"));
	
	текЗапрос = Новый Запрос;
	текЗапрос.Текст =
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.усНоменклатура) КАК Номенклатура
		|ПОМЕСТИТЬ втДанные
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанные.Номенклатура
		|ИЗ
		|	втДанные КАК втДанные
		|ГДЕ
		|	втДанные.Номенклатура.ЗапрашиватьСерийныйНомерПриУпаковке";
	
	текЗапрос.УстановитьПараметр("Таблица", тбзПлан);
	текРезультат = текЗапрос.Выполнить();
	
	Возврат Не текРезультат.Пустой();
	
КонецФункции //ЕстьНоменклатураСЗапросомСН()
//-- SLT #13181 2022-10-05 Москвин М.

//++ Москвин М. №50762
&НаСервереБезКонтекста
// Функция проверяет группы у исполнителей в подзадачах (усЗадачаПеремещенияТовара) с типом "Отбор" и статусом "Выполнена" по заказу на отгрузку.
// Если хоть один исполнитель входит в группу с признаком "МИ_ЗапрещеноУпаковыватьПоПлану" = Истина, то будет возвращена "Истина".
//
Функция ЕстьИсполнителиСЗапретомНаУпаковку(ЗнО)
	
	резВозврата = Ложь;
	
	текЗапрос = Новый Запрос;
	текЗапрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(усЗадачаПеремещениеТовара.Исполнитель.Группа.МИ_ЗапрещеноУпаковыватьПоПлану, ЛОЖЬ)) КАК ЗапрещеноУпаковыватьПоПлану
	|ИЗ
	|	Документ.усЗадачаПеремещениеТовара КАК усЗадачаПеремещениеТовара
	|ГДЕ
	|	усЗадачаПеремещениеТовара.ТипЗадачи = ЗНАЧЕНИЕ(Перечисление.усТипыЗадач.Отбор)
	|	И усЗадачаПеремещениеТовара.Статус = ЗНАЧЕНИЕ(Перечисление.усСтатусыЗадач.Выполнена)
	|	И (ВЫРАЗИТЬ(усЗадачаПеремещениеТовара.ДокументОснование КАК Документ.усЗаказНаОтгрузку)) = &ДокументОснование
	|	И НЕ усЗадачаПеремещениеТовара.ПометкаУдаления";
	
	текЗапрос.УстановитьПараметр("ДокументОснование", ЗнО);
	текВыборка = текЗапрос.Выполнить().Выбрать();
	
	Если текВыборка.Следующий() Тогда
		резВозврата = текВыборка.ЗапрещеноУпаковыватьПоПлану;
	КонецЕсли;
		
	Возврат резВозврата;
	
КонецФункции //ЕстьИсполнителиСЗапретомНаУпаковку()
//-- Москвин М. №50762

#КонецОбласти

#Область МИ_Дополнение

//++ВИА 27.03.2023
&НаСервере
Процедура МИ_ВыполнитьЗавершениеРаботыНаСервере()
	
	Если ЗначениеЗаполнено(Исполнитель) И ЗначениеЗаполнено(РабочийПоток) Тогда
		РабочийПоток = МИ_ТекущийРабочийПоток();
		РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
		усУправлениеСкладомСервер.ЗаписатьСостояниеСотрудника(ТекущаяДатаСеанса(), Исполнитель, РабочийПоток, ПредопределенноеЗначение("Перечисление.усСостоянияСотрудников.НеРаботает"), , , , РабочееМесто);
	КонецЕсли;
	
	ИзменитьАктивностьСтолаУпаковкиНаСервере();
	ВернутьЗадачиКВыполнению();
	
КонецПроцедуры
//--ВИА 27.03.2023 

//++ВИА 27.03.2023
&НаСервере
Процедура МИ_ИзменитьСостояниеИАктивность(ТекущаяСмена,РабочееМесто)
	РабочийПоток = МИ_ТекущийРабочийПоток();
	усУправлениеСкладомСервер.ЗаписатьСостояниеСотрудника(ТекущаяДатаСеанса(), Исполнитель, РабочийПоток, ПредопределенноеЗначение("Перечисление.усСостоянияСотрудников.Работает"), ТекущаяСмена, , , РабочееМесто);
	ИзменитьАктивностьСтолаУпаковкиНаСервере(Истина);
КонецПроцедуры 
//--ВИА 27.03.2023 

//++ВИА 27.03.2023
&НаСервере
Функция МИ_ТекущийРабочийПоток()
	
	ТекущийРабочийПоток = РабочийПоток;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник",Исполнитель);
	Запрос.Текст = 
				"ВЫБРАТЬ
				|	усСостояниеСотрудниковСрезПоследних.РабочийПоток
				|ИЗ
				|	РегистрСведений.усСостояниеСотрудников.СрезПоследних(, Сотрудник = &Сотрудник) КАК усСостояниеСотрудниковСрезПоследних
				|ГДЕ
				|	усСостояниеСотрудниковСрезПоследних.Состояние = Значение(Перечисление.усСостоянияСотрудников.Работает)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТекущийРабочийПоток  = Выборка.РабочийПоток;
	КонецЕсли;	
	
	Возврат ТекущийРабочийПоток;
	
КонецФункции 
//--ВИА 27.03.2023

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ПриИзмененииРежимаРаботы_АктивностьСтолаУпаковки()
	
	ИзменитьАктивностьСтолаУпаковкиНаСервере(Элементы.АктивностьСтолаУпаковки.Пометка);
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ПриИзмененииРежимаРаботы_РежимСканирования()
	
	Элементы.РежимСканирования.Пометка			= НеЗапрашиватьКоличество;
	Элементы.РежимВводаКоличества.Доступность	= Не НеЗапрашиватьКоличество;
	Элементы.РежимВводаКоличества.Пометка		= Не НеЗапрашиватьКоличество;
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ПриИзмененииРежимаРаботы_РежимУпаковкиМК()
	
	Элементы.РежимУпаковкиМК.Пометка					= МИ_РежимУпаковкиМК;
	Элементы.НеОтображатьУпакованныйТовар.Пометка 		= Не МИ_РежимУпаковкиМК;
	Элементы.НеОтображатьУпакованныйТовар.Доступность	= Не МИ_РежимУпаковкиМК;
	
	Элементы.ВыборЗаказа.Видимость						= Не МИ_РежимУпаковкиМК;
	Элементы.СоздатьМастерКонтейнер.Видимость			= Не МИ_РежимУпаковкиМК;
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ПриИзмененииРежимаРаботы_НеОтображатьУпакованныйТовар()
	
	ОбновитьПланПоЗаказу(ПланПоКонтейнеру);
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ОбновитьСостояниеРежимовРаботы(сткОбновление = Неопределено)
	
	Если сткОбновление = Неопределено Тогда
		сткОбновление = Новый Структура;
	КонецЕсли;
	
	Если сткОбновление.Свойство("АктивностьСтолаУпаковки") Тогда
		ПриИзмененииРежимаРаботы_АктивностьСтолаУпаковки();
	КонецЕсли;
	
	Если сткОбновление.Свойство("РежимСканирования")
		ИЛИ Элементы.РежимСканирования.Пометка <> НеЗапрашиватьКоличество Тогда
		ПриИзмененииРежимаРаботы_РежимСканирования();
	КонецЕсли;
	
	Если сткОбновление.Свойство("РежимУпаковкиМК")
		ИЛИ Элементы.РежимУпаковкиМК.Пометка <> МИ_РежимУпаковкиМК Тогда
		ПриИзмененииРежимаРаботы_РежимУпаковкиМК();
	КонецЕсли;
	
	Если сткОбновление.Свойство("НеОтображатьУпакованныйТовар") Тогда
		ПриИзмененииРежимаРаботы_НеОтображатьУпакованныйТовар();
	КонецЕсли;
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура ИнициализироватьКонечныйКонтейнер()
	
	ИмяКнопки = "КонечныйКонтейнер1";
	
	Если Не ЗначениеЗаполнено(ЭтаФорма[ИмяКнопки]) Тогда
		НовыйКонтейнер = СоздатьНовыйКонтейнерНаСервере();
		Если ЗначениеЗаполнено(НовыйКонтейнер) Тогда
			ЭтаФорма[ИмяКнопки] = НовыйКонтейнер;
			ДобавитьСоответствиеКонтейнеров(ИмяКнопки, НовыйКонтейнер, "КонечныйКонтейнер");
		КонецЕсли;
	ИначеЕсли ТекущийКонечныйКонтейнер = ПолучитьКонтейнер(ИмяКнопки, "КонечныйКонтейнер") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКонечныйКонтейнер = ПолучитьКонтейнер(ИмяКнопки, "КонечныйКонтейнер");
    ПриИзмененииКонечногоКонтейнера();
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Функция ИдентифицированаНоменклатураПоПлану(ВРежимеУпаковкиМК = Ложь, ТекстОшибки = "", ПараметрыОповещенияОЗакрытии = Неопределено)
	
	сткОтбор = Новый Структура("Номенклатура", Номенклатура);
	Если ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
		сткОтбор.Вставить("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
	КонецЕсли;
	
	НайденныеСтроки = тбпПланПоЗаказу.НайтиСтроки(сткОтбор);
	Если НайденныеСтроки.Количество() Тогда
		Если Не ЗначениеЗаполнено(ЗаказНаОтгрузку) И ВРежимеУпаковкиМК Тогда
			ЗаказНаОтгрузку = НайденныеСтроки[0].ЗаказНаОтгрузку;
			ПриИзмененииЗаказаНаОтгрузку(, Истина);
			//--> МИ-1 / 2019-05-22
			ПриИзмененииЗаказаНаОтгрузкуНаКлиенте(ПараметрыОповещенияОЗакрытии);
			//<-- МИ-1 / 2019-05-22
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
		ТекстОшибки = НСтр("ru = 'ОШИБКА. Номенклатура отсутствует по плану.'");
	Иначе
		НайденныеСтроки = тбпПланПоЗаказу.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'ОШИБКА. Номенклатура отсутствует по плану.'");
		ИначеЕсли ВРежимеУпаковкиМК Тогда
			ТекстОшибки = НСтр("ru = 'ОШИБКА. Номенклатура по другому заказу на отгрузку.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстОшибки = "" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
//-- БПС 30.05.2023 №70597

//++ БПС 30.05.2023 №70597
&НаКлиенте
Процедура УстановитьТекущуюСтрокуПланаПоЗаказу()
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		сткОтбор = Новый Структура("Номенклатура", Номенклатура);
		Если ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
			сткОтбор.Вставить("ЗаказНаОтгрузку", ЗаказНаОтгрузку);
		КонецЕсли;
		НайденныеСтроки = тбпПланПоЗаказу.НайтиСтроки(сткОтбор);
		Если НайденныеСтроки.Количество() Тогда
			Элементы.тбпПланПоЗаказу.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//-- БПС 30.05.2023 №70597

#КонецОбласти
